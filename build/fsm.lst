ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"fsm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._recivedArmHandler,"ax",%progbits
  18              		.align	1
  19              		.global	_recivedArmHandler
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	_recivedArmHandler:
  25              	.LVL0:
  26              	.LFB44:
  27              		.file 1 "Core/Src/fsm.c"
   1:Core/Src/fsm.c **** /*
   2:Core/Src/fsm.c ****  * fsm.c
   3:Core/Src/fsm.c ****  *
   4:Core/Src/fsm.c ****  *  Created on: Mar 30, 2021
   5:Core/Src/fsm.c ****  *      Author: flynn
   6:Core/Src/fsm.c ****  *  based off https://aticleworld.com/state-machine-using-c/
   7:Core/Src/fsm.c ****  */
   8:Core/Src/fsm.c **** 
   9:Core/Src/fsm.c **** #include <stddef.h>
  10:Core/Src/fsm.c **** #include <stdio.h>
  11:Core/Src/fsm.c **** #include "fsm.h"
  12:Core/Src/fsm.c **** #include "usart.h"
  13:Core/Src/fsm.c **** #include "gpio.h"
  14:Core/Src/fsm.c **** #include "pwm.h"
  15:Core/Src/fsm.c **** 
  16:Core/Src/fsm.c **** // Defines
  17:Core/Src/fsm.c **** #define MSGBUFF_SIZE             32
  18:Core/Src/fsm.c **** #define ERROR_MSG_SIZE           30
  19:Core/Src/fsm.c **** #define IGN_CONTROL_OFF_DELAY    20 //ms
  20:Core/Src/fsm.c **** #define SERVO_CLOSED_ANGLE       0  //degrees
  21:Core/Src/fsm.c **** #define SERVO_OPEN_ANGLE         90 //degrees
  22:Core/Src/fsm.c **** 
  23:Core/Src/fsm.c **** #define RX_TIMEOUT  100
  24:Core/Src/fsm.c **** 
  25:Core/Src/fsm.c **** // Nasty global vars
  26:Core/Src/fsm.c **** static eFsmState  eFsmCurrentState = Last_State;
  27:Core/Src/fsm.c **** static eFsmEvent  eFsmNewEvent     = Last_Event;
  28:Core/Src/fsm.c **** 
  29:Core/Src/fsm.c **** static const char errorMsg[] = "\r\nSomthing went wrong! MOVED TO ERROR STATE\r\n";
  30:Core/Src/fsm.c **** static const char resetMsg[] = "\r\nReturned to idel state\r\n";
  31:Core/Src/fsm.c **** 
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 2


  32:Core/Src/fsm.c **** // Event handler function pointer
  33:Core/Src/fsm.c **** typedef eFsmState (*pfEventHandler) (eFsmPeripheriesData *sPeripheries);
  34:Core/Src/fsm.c **** 
  35:Core/Src/fsm.c **** 
  36:Core/Src/fsm.c **** // 2d array of fsm linkages that will return a function pointer
  37:Core/Src/fsm.c **** typedef eFsmState (*const afEventHandler[Last_State][Last_Event])(eFsmPeripheriesData *sPeripheries
  38:Core/Src/fsm.c **** 
  39:Core/Src/fsm.c **** // Private helper functions
  40:Core/Src/fsm.c **** //**************************************
  41:Core/Src/fsm.c **** 
  42:Core/Src/fsm.c **** // Anounce on UART that it has moved to a state
  43:Core/Src/fsm.c **** void sendStateMsg(eFsmState state);
  44:Core/Src/fsm.c **** 
  45:Core/Src/fsm.c **** // Returns the next event from current state given no errors;
  46:Core/Src/fsm.c **** eFsmEvent nextEventFromState(eFsmState state);
  47:Core/Src/fsm.c **** 
  48:Core/Src/fsm.c **** // Event handles
  49:Core/Src/fsm.c **** //**************************************
  50:Core/Src/fsm.c **** 
  51:Core/Src/fsm.c **** // When an error is detected call Error_Event and go to the aborted state
  52:Core/Src/fsm.c **** eFsmState _errorHandler(eFsmPeripheriesData *sPeripheries)
  53:Core/Src/fsm.c **** {
  54:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
  55:Core/Src/fsm.c ****     // Turn off igniter and power to the ignition sorce
  56:Core/Src/fsm.c ****     // Turn off IGN Control
  57:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
  58:Core/Src/fsm.c **** 
  59:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
  60:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
  61:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
  62:Core/Src/fsm.c **** 
  63:Core/Src/fsm.c ****     // Move valve to suitable position
  64:Core/Src/fsm.c ****     // TODO pwm control
  65:Core/Src/fsm.c **** 
  66:Core/Src/fsm.c ****     // Anounce over usart and i2c to let everyone know
  67:Core/Src/fsm.c ****     HAL_UART_Transmit_DMA(&huart2, (uint8_t *)errorMsg, sizeof(errorMsg) / sizeof(char));
  68:Core/Src/fsm.c ****     // TODO Some i2c related method
  69:Core/Src/fsm.c ****     return Aborted_State;
  70:Core/Src/fsm.c **** }
  71:Core/Src/fsm.c **** 
  72:Core/Src/fsm.c **** // Go from idle to standby
  73:Core/Src/fsm.c **** eFsmState _recivedArmHandler(eFsmPeripheriesData *sPeripheries)
  74:Core/Src/fsm.c **** {
  28              		.loc 1 74 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 74 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  75:Core/Src/fsm.c ****     // TODO turn on pwr supply for igiter (i.e. turn on the buck converter)
  76:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
  77:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_SET);
  38              		.loc 1 77 5 is_stmt 1 view .LVU2
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 3


  39 0002 A020     		movs	r0, #160
  40              	.LVL1:
  41              		.loc 1 77 5 is_stmt 0 view .LVU3
  42 0004 0122     		movs	r2, #1
  43 0006 8021     		movs	r1, #128
  44 0008 C005     		lsls	r0, r0, #23
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL2:
  78:Core/Src/fsm.c ****     return Standby_State;
  47              		.loc 1 78 5 is_stmt 1 view .LVU4
  79:Core/Src/fsm.c **** }
  48              		.loc 1 79 1 is_stmt 0 view .LVU5
  49 000e 0120     		movs	r0, #1
  50              		@ sp needed
  51 0010 10BD     		pop	{r4, pc}
  52              		.cfi_endproc
  53              	.LFE44:
  55              		.section	.text._revicedLaunchHandler,"ax",%progbits
  56              		.align	1
  57              		.global	_revicedLaunchHandler
  58              		.syntax unified
  59              		.code	16
  60              		.thumb_func
  62              	_revicedLaunchHandler:
  63              	.LVL3:
  64              	.LFB45:
  80:Core/Src/fsm.c **** 
  81:Core/Src/fsm.c **** // Turn igniter on
  82:Core/Src/fsm.c **** eFsmState _revicedLaunchHandler(eFsmPeripheriesData *sPeripheries)
  83:Core/Src/fsm.c **** {
  65              		.loc 1 83 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		.loc 1 83 1 is_stmt 0 view .LVU7
  70 0000 10B5     		push	{r4, lr}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
  84:Core/Src/fsm.c ****     // TODO turn on mosfet to allow current to travel to the igiter
  85:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_SET);
  75              		.loc 1 85 5 is_stmt 1 view .LVU8
  76 0002 A020     		movs	r0, #160
  77              	.LVL4:
  78              		.loc 1 85 5 is_stmt 0 view .LVU9
  79 0004 0122     		movs	r2, #1
  80 0006 4021     		movs	r1, #64
  81 0008 C005     		lsls	r0, r0, #23
  82 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL5:
  86:Core/Src/fsm.c ****     return Igniter_On_State;
  84              		.loc 1 86 5 is_stmt 1 view .LVU10
  87:Core/Src/fsm.c **** }
  85              		.loc 1 87 1 is_stmt 0 view .LVU11
  86 000e 0220     		movs	r0, #2
  87              		@ sp needed
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 4


  88 0010 10BD     		pop	{r4, pc}
  89              		.cfi_endproc
  90              	.LFE45:
  92              		.section	.text._alarmTurnOffIgniterHandler,"ax",%progbits
  93              		.align	1
  94              		.global	_alarmTurnOffIgniterHandler
  95              		.syntax unified
  96              		.code	16
  97              		.thumb_func
  99              	_alarmTurnOffIgniterHandler:
 100              	.LVL6:
 101              	.LFB47:
  88:Core/Src/fsm.c **** 
  89:Core/Src/fsm.c **** // Timer finishes counting to open clock
  90:Core/Src/fsm.c **** eFsmState _alarmOpenValveHandler(eFsmPeripheriesData *sPeripheries)
  91:Core/Src/fsm.c **** {
  92:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
  93:Core/Src/fsm.c ****     return Valve_Open_State;
  94:Core/Src/fsm.c **** }
  95:Core/Src/fsm.c **** 
  96:Core/Src/fsm.c **** // Timer finishes counting to turn igniter off
  97:Core/Src/fsm.c **** eFsmState _alarmTurnOffIgniterHandler(eFsmPeripheriesData *sPeripheries)
  98:Core/Src/fsm.c **** {
 102              		.loc 1 98 1 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		.loc 1 98 1 is_stmt 0 view .LVU13
 107 0000 10B5     		push	{r4, lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 4, -8
 111              		.cfi_offset 14, -4
  99:Core/Src/fsm.c ****     // TODO turn off mosfet and turn off pwr supply for igniter
 100:Core/Src/fsm.c ****     // Turn off IGN Control
 101:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
 112              		.loc 1 101 5 is_stmt 1 view .LVU14
 113 0002 A024     		movs	r4, #160
 114 0004 E405     		lsls	r4, r4, #23
 115 0006 0022     		movs	r2, #0
 116 0008 4021     		movs	r1, #64
 117 000a 2000     		movs	r0, r4
 118              	.LVL7:
 119              		.loc 1 101 5 is_stmt 0 view .LVU15
 120 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL8:
 102:Core/Src/fsm.c **** 
 103:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
 104:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
 122              		.loc 1 104 5 is_stmt 1 view .LVU16
 123 0010 1420     		movs	r0, #20
 124 0012 FFF7FEFF 		bl	HAL_Delay
 125              	.LVL9:
 105:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 126              		.loc 1 105 5 view .LVU17
 127 0016 0022     		movs	r2, #0
 128 0018 8021     		movs	r1, #128
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 5


 129 001a 2000     		movs	r0, r4
 130 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 131              	.LVL10:
 106:Core/Src/fsm.c **** 
 107:Core/Src/fsm.c ****     return Igniter_Off_State;
 132              		.loc 1 107 5 view .LVU18
 108:Core/Src/fsm.c **** }
 133              		.loc 1 108 1 is_stmt 0 view .LVU19
 134 0020 0420     		movs	r0, #4
 135              		@ sp needed
 136 0022 10BD     		pop	{r4, pc}
 137              		.cfi_endproc
 138              	.LFE47:
 140              		.section	.text._errorHandler,"ax",%progbits
 141              		.align	1
 142              		.global	_errorHandler
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 147              	_errorHandler:
 148              	.LVL11:
 149              	.LFB43:
  53:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
 150              		.loc 1 53 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
  53:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
 154              		.loc 1 53 1 is_stmt 0 view .LVU21
 155 0000 10B5     		push	{r4, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
  57:Core/Src/fsm.c **** 
 160              		.loc 1 57 5 is_stmt 1 view .LVU22
 161 0002 A024     		movs	r4, #160
 162 0004 E405     		lsls	r4, r4, #23
 163 0006 0022     		movs	r2, #0
 164 0008 4021     		movs	r1, #64
 165 000a 2000     		movs	r0, r4
 166              	.LVL12:
  57:Core/Src/fsm.c **** 
 167              		.loc 1 57 5 is_stmt 0 view .LVU23
 168 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 169              	.LVL13:
  60:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 170              		.loc 1 60 5 is_stmt 1 view .LVU24
 171 0010 1420     		movs	r0, #20
 172 0012 FFF7FEFF 		bl	HAL_Delay
 173              	.LVL14:
  61:Core/Src/fsm.c **** 
 174              		.loc 1 61 5 view .LVU25
 175 0016 0022     		movs	r2, #0
 176 0018 8021     		movs	r1, #128
 177 001a 2000     		movs	r0, r4
 178 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 6


 179              	.LVL15:
  67:Core/Src/fsm.c ****     // TODO Some i2c related method
 180              		.loc 1 67 5 view .LVU26
 181 0020 2E22     		movs	r2, #46
 182 0022 0349     		ldr	r1, .L5
 183 0024 0348     		ldr	r0, .L5+4
 184 0026 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 185              	.LVL16:
  69:Core/Src/fsm.c **** }
 186              		.loc 1 69 5 view .LVU27
  70:Core/Src/fsm.c **** 
 187              		.loc 1 70 1 is_stmt 0 view .LVU28
 188 002a 0520     		movs	r0, #5
 189              		@ sp needed
 190 002c 10BD     		pop	{r4, pc}
 191              	.L6:
 192 002e C046     		.align	2
 193              	.L5:
 194 0030 00000000 		.word	.LANCHOR0
 195 0034 00000000 		.word	huart2
 196              		.cfi_endproc
 197              	.LFE43:
 199              		.section	.text._alarmOpenValveHandler,"ax",%progbits
 200              		.align	1
 201              		.global	_alarmOpenValveHandler
 202              		.syntax unified
 203              		.code	16
 204              		.thumb_func
 206              	_alarmOpenValveHandler:
 207              	.LVL17:
 208              	.LFB46:
  91:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
 209              		.loc 1 91 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
  91:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
 213              		.loc 1 91 1 is_stmt 0 view .LVU30
 214 0000 10B5     		push	{r4, lr}
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
  92:Core/Src/fsm.c ****     return Valve_Open_State;
 219              		.loc 1 92 5 is_stmt 1 view .LVU31
 220 0002 0248     		ldr	r0, .L8
 221              	.LVL18:
  92:Core/Src/fsm.c ****     return Valve_Open_State;
 222              		.loc 1 92 5 is_stmt 0 view .LVU32
 223 0004 FFF7FEFF 		bl	PWM1_setPos
 224              	.LVL19:
  93:Core/Src/fsm.c **** }
 225              		.loc 1 93 5 is_stmt 1 view .LVU33
  94:Core/Src/fsm.c **** 
 226              		.loc 1 94 1 is_stmt 0 view .LVU34
 227 0008 0320     		movs	r0, #3
 228              		@ sp needed
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 7


 229 000a 10BD     		pop	{r4, pc}
 230              	.L9:
 231              		.align	2
 232              	.L8:
 233 000c 0000B442 		.word	1119092736
 234              		.cfi_endproc
 235              	.LFE46:
 237              		.section	.text._resetHandler,"ax",%progbits
 238              		.align	1
 239              		.global	_resetHandler
 240              		.syntax unified
 241              		.code	16
 242              		.thumb_func
 244              	_resetHandler:
 245              	.LVL20:
 246              	.LFB48:
 109:Core/Src/fsm.c **** 
 110:Core/Src/fsm.c **** // When in the aborted state it can be reset
 111:Core/Src/fsm.c **** eFsmState _resetHandler(eFsmPeripheriesData *sPeripheries)
 112:Core/Src/fsm.c **** {
 247              		.loc 1 112 1 is_stmt 1 view -0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		.loc 1 112 1 is_stmt 0 view .LVU36
 252 0000 10B5     		push	{r4, lr}
 253              	.LCFI5:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 14, -4
 113:Core/Src/fsm.c ****     // TODO move all vars needed to be in the idle state
 114:Core/Src/fsm.c **** 
 115:Core/Src/fsm.c ****     // Turn off IGN Control
 116:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
 257              		.loc 1 116 5 is_stmt 1 view .LVU37
 258 0002 A024     		movs	r4, #160
 259 0004 E405     		lsls	r4, r4, #23
 260 0006 0022     		movs	r2, #0
 261 0008 4021     		movs	r1, #64
 262 000a 2000     		movs	r0, r4
 263              	.LVL21:
 264              		.loc 1 116 5 is_stmt 0 view .LVU38
 265 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 266              	.LVL22:
 117:Core/Src/fsm.c **** 
 118:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
 119:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
 267              		.loc 1 119 5 is_stmt 1 view .LVU39
 268 0010 1420     		movs	r0, #20
 269 0012 FFF7FEFF 		bl	HAL_Delay
 270              	.LVL23:
 120:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 271              		.loc 1 120 5 view .LVU40
 272 0016 0022     		movs	r2, #0
 273 0018 8021     		movs	r1, #128
 274 001a 2000     		movs	r0, r4
 275 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 8


 276              	.LVL24:
 121:Core/Src/fsm.c **** 
 122:Core/Src/fsm.c ****     // Move valve to suitable position
 123:Core/Src/fsm.c ****     PWM1_setPos(SERVO_CLOSED_ANGLE);
 277              		.loc 1 123 5 view .LVU41
 278 0020 0020     		movs	r0, #0
 279 0022 FFF7FEFF 		bl	PWM1_setPos
 280              	.LVL25:
 124:Core/Src/fsm.c **** 
 125:Core/Src/fsm.c ****     // Anounce over usart and i2c to let everyone know
 126:Core/Src/fsm.c ****     HAL_UART_Transmit_DMA(&huart2, (uint8_t *)resetMsg, sizeof(resetMsg) / sizeof(char));
 281              		.loc 1 126 5 view .LVU42
 282 0026 1B22     		movs	r2, #27
 283 0028 0249     		ldr	r1, .L11
 284 002a 0348     		ldr	r0, .L11+4
 285 002c FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 286              	.LVL26:
 127:Core/Src/fsm.c **** 
 128:Core/Src/fsm.c ****     return Idle_State;
 287              		.loc 1 128 5 view .LVU43
 129:Core/Src/fsm.c **** }
 288              		.loc 1 129 1 is_stmt 0 view .LVU44
 289 0030 0020     		movs	r0, #0
 290              		@ sp needed
 291 0032 10BD     		pop	{r4, pc}
 292              	.L12:
 293              		.align	2
 294              	.L11:
 295 0034 00000000 		.word	.LANCHOR1
 296 0038 00000000 		.word	huart2
 297              		.cfi_endproc
 298              	.LFE48:
 300              		.section	.text.FSM_init,"ax",%progbits
 301              		.align	1
 302              		.global	FSM_init
 303              		.syntax unified
 304              		.code	16
 305              		.thumb_func
 307              	FSM_init:
 308              	.LFB49:
 130:Core/Src/fsm.c **** 
 131:Core/Src/fsm.c **** // Public function
 132:Core/Src/fsm.c **** //*****************************************
 133:Core/Src/fsm.c **** 
 134:Core/Src/fsm.c **** // Initialize finite state machine
 135:Core/Src/fsm.c **** void FSM_init()
 136:Core/Src/fsm.c **** {
 309              		.loc 1 136 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 137:Core/Src/fsm.c ****     eFsmCurrentState = Idle_State;
 314              		.loc 1 137 5 view .LVU46
 315              		.loc 1 137 22 is_stmt 0 view .LVU47
 316 0000 014B     		ldr	r3, .L14
 317 0002 0022     		movs	r2, #0
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 9


 318 0004 1A70     		strb	r2, [r3]
 138:Core/Src/fsm.c ****     return;
 319              		.loc 1 138 5 is_stmt 1 view .LVU48
 139:Core/Src/fsm.c **** }
 320              		.loc 1 139 1 is_stmt 0 view .LVU49
 321              		@ sp needed
 322 0006 7047     		bx	lr
 323              	.L15:
 324              		.align	2
 325              	.L14:
 326 0008 00000000 		.word	.LANCHOR2
 327              		.cfi_endproc
 328              	.LFE49:
 330              		.section	.text.FSM_state,"ax",%progbits
 331              		.align	1
 332              		.global	FSM_state
 333              		.syntax unified
 334              		.code	16
 335              		.thumb_func
 337              	FSM_state:
 338              	.LFB50:
 140:Core/Src/fsm.c **** 
 141:Core/Src/fsm.c **** // Get current state;
 142:Core/Src/fsm.c **** eFsmState FSM_state()
 143:Core/Src/fsm.c **** {
 339              		.loc 1 143 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 144:Core/Src/fsm.c ****     return eFsmCurrentState;
 344              		.loc 1 144 5 view .LVU51
 345              		.loc 1 144 12 is_stmt 0 view .LVU52
 346 0000 014B     		ldr	r3, .L17
 347 0002 1878     		ldrb	r0, [r3]
 145:Core/Src/fsm.c **** }
 348              		.loc 1 145 1 view .LVU53
 349              		@ sp needed
 350 0004 7047     		bx	lr
 351              	.L18:
 352 0006 C046     		.align	2
 353              	.L17:
 354 0008 00000000 		.word	.LANCHOR2
 355              		.cfi_endproc
 356              	.LFE50:
 358              		.section	.text.FSM_sendEvent,"ax",%progbits
 359              		.align	1
 360              		.global	FSM_sendEvent
 361              		.syntax unified
 362              		.code	16
 363              		.thumb_func
 365              	FSM_sendEvent:
 366              	.LVL27:
 367              	.LFB51:
 146:Core/Src/fsm.c **** 
 147:Core/Src/fsm.c **** // Get event
 148:Core/Src/fsm.c **** void FSM_sendEvent(eFsmEvent Event)
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 10


 149:Core/Src/fsm.c **** {
 368              		.loc 1 149 1 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 150:Core/Src/fsm.c ****     // TODO! validation ect;
 151:Core/Src/fsm.c ****     eFsmNewEvent = Event;
 373              		.loc 1 151 5 view .LVU55
 374              		.loc 1 151 18 is_stmt 0 view .LVU56
 375 0000 014B     		ldr	r3, .L20
 376 0002 1870     		strb	r0, [r3]
 152:Core/Src/fsm.c ****     return;
 377              		.loc 1 152 5 is_stmt 1 view .LVU57
 153:Core/Src/fsm.c **** }
 378              		.loc 1 153 1 is_stmt 0 view .LVU58
 379              		@ sp needed
 380 0004 7047     		bx	lr
 381              	.L21:
 382 0006 C046     		.align	2
 383              	.L20:
 384 0008 00000000 		.word	.LANCHOR3
 385              		.cfi_endproc
 386              	.LFE51:
 388              		.section	.rodata.sendStateMsg.str1.4,"aMS",%progbits,1
 389              		.align	2
 390              	.LC8:
 391 0000 53746174 		.ascii	"State: %s\012\000"
 391      653A2025 
 391      730A00
 392              		.section	.text.sendStateMsg,"ax",%progbits
 393              		.align	1
 394              		.global	sendStateMsg
 395              		.syntax unified
 396              		.code	16
 397              		.thumb_func
 399              	sendStateMsg:
 400              	.LVL28:
 401              	.LFB54:
 154:Core/Src/fsm.c **** 
 155:Core/Src/fsm.c **** // Step the finite state machines logic
 156:Core/Src/fsm.c **** void FSM_step(eFsmPeripheriesData *sPeripheries)
 157:Core/Src/fsm.c **** {
 158:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 159:Core/Src/fsm.c **** 
 160:Core/Src/fsm.c ****   // Setup linkages for the FSM               Might make a global if it is wasiting alot of loop re
 161:Core/Src/fsm.c ****   static afEventHandler FSM =
 162:Core/Src/fsm.c ****   {
 163:Core/Src/fsm.c ****       [Idle_State]        = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Arm_Ev
 164:Core/Src/fsm.c ****       [Standby_State]     = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Launch
 165:Core/Src/fsm.c ****       [Igniter_On_State]  = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Open_V
 166:Core/Src/fsm.c ****       [Valve_Open_State]  = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Stop_I
 167:Core/Src/fsm.c ****       [Igniter_Off_State] = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler         
 168:Core/Src/fsm.c ****       [Aborted_State]     = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler         
 169:Core/Src/fsm.c ****   };
 170:Core/Src/fsm.c **** 
 171:Core/Src/fsm.c ****   // Validate that both state and event are valid and that there is a event handler at the event fo
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 11


 172:Core/Src/fsm.c ****   if ((eFsmCurrentState < Last_State) && (eFsmNewEvent < Last_Event) && FSM[eFsmCurrentState][eFsmN
 173:Core/Src/fsm.c ****   {
 174:Core/Src/fsm.c ****       // Call the event handler at the end of the function pointer
 175:Core/Src/fsm.c ****       eFsmCurrentState = (*FSM[eFsmCurrentState][eFsmNewEvent])(sPeripheries);
 176:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 177:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 178:Core/Src/fsm.c ****   }
 179:Core/Src/fsm.c ****   else
 180:Core/Src/fsm.c ****   {
 181:Core/Src/fsm.c ****       //TODO Maybe this could also trigger and abort???
 182:Core/Src/fsm.c ****   }
 183:Core/Src/fsm.c **** 
 184:Core/Src/fsm.c **** 
 185:Core/Src/fsm.c ****   return;
 186:Core/Src/fsm.c **** }
 187:Core/Src/fsm.c **** 
 188:Core/Src/fsm.c **** void FSM_reciveCMD(UART_HandleTypeDef * uartHandle)
 189:Core/Src/fsm.c **** {
 190:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 191:Core/Src/fsm.c **** 
 192:Core/Src/fsm.c ****   HAL_UART_Receive(uartHandle, &strBuf, 1, RX_TIMEOUT);
 193:Core/Src/fsm.c **** 
 194:Core/Src/fsm.c ****   // Check what code was recived
 195:Core/Src/fsm.c ****   if (strBuf != 0 && strBuf != '\n')
 196:Core/Src/fsm.c ****   {
 197:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, &strBuf, 1, 50);
 198:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, "\n", 2, 50);
 199:Core/Src/fsm.c **** 
 200:Core/Src/fsm.c ****     if ( '0' <= strBuf && strBuf <= '6')
 201:Core/Src/fsm.c ****     {
 202:Core/Src/fsm.c ****       // Convert to int
 203:Core/Src/fsm.c ****       strBuf -= 48;
 204:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 205:Core/Src/fsm.c ****     }
 206:Core/Src/fsm.c ****     else if ( strBuf == '7' && eFsmCurrentState != Igniter_Off_State)
 207:Core/Src/fsm.c ****     {
 208:Core/Src/fsm.c ****       FSM_sendEvent(nextEventFromState(eFsmCurrentState));
 209:Core/Src/fsm.c ****     }
 210:Core/Src/fsm.c ****   }
 211:Core/Src/fsm.c **** 
 212:Core/Src/fsm.c ****   return;
 213:Core/Src/fsm.c **** }
 214:Core/Src/fsm.c **** 
 215:Core/Src/fsm.c **** // Private helper function implementations
 216:Core/Src/fsm.c **** //*****************************************
 217:Core/Src/fsm.c **** 
 218:Core/Src/fsm.c **** // Anounce on UART that it has moved to a state
 219:Core/Src/fsm.c **** void sendStateMsg(eFsmState state)
 220:Core/Src/fsm.c **** {
 402              		.loc 1 220 1 is_stmt 1 view -0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              		.loc 1 220 1 is_stmt 0 view .LVU60
 407 0000 10B5     		push	{r4, lr}
 408              	.LCFI6:
 409              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 12


 410              		.cfi_offset 4, -8
 411              		.cfi_offset 14, -4
 221:Core/Src/fsm.c ****     // Needs to be a static becuase the memory is deallocated when this function is removed from th
 222:Core/Src/fsm.c ****     static char msgBuff[MSGBUFF_SIZE];
 412              		.loc 1 222 5 is_stmt 1 view .LVU61
 223:Core/Src/fsm.c ****     int n = 0;
 413              		.loc 1 223 5 view .LVU62
 414              	.LVL29:
 224:Core/Src/fsm.c **** 
 225:Core/Src/fsm.c ****     //while (huart2.gState == HAL_UART_STATE_BUSY_TX);
 226:Core/Src/fsm.c **** 
 227:Core/Src/fsm.c ****     // TODO: make safe with snprintf
 228:Core/Src/fsm.c ****     n = sprintf(msgBuff, "State: %s\n", eFsmStateNames[state]);
 415              		.loc 1 228 5 view .LVU63
 416              		.loc 1 228 55 is_stmt 0 view .LVU64
 417 0002 4200     		lsls	r2, r0, #1
 418 0004 1218     		adds	r2, r2, r0
 419 0006 9200     		lsls	r2, r2, #2
 420 0008 094B     		ldr	r3, .L26
 421 000a 9A18     		adds	r2, r3, r2
 422              		.loc 1 228 9 view .LVU65
 423 000c 0949     		ldr	r1, .L26+4
 424 000e 0A48     		ldr	r0, .L26+8
 425              	.LVL30:
 426              		.loc 1 228 9 view .LVU66
 427 0010 FFF7FEFF 		bl	sprintf
 428              	.LVL31:
 429 0014 021E     		subs	r2, r0, #0
 430              	.LVL32:
 229:Core/Src/fsm.c ****     if (n <= 0)
 431              		.loc 1 229 5 is_stmt 1 view .LVU67
 432              		.loc 1 229 8 is_stmt 0 view .LVU68
 433 0016 00DC     		bgt	.L25
 434              	.LVL33:
 435              	.L22:
 230:Core/Src/fsm.c ****     {
 231:Core/Src/fsm.c ****         // Somthing went wrong BUT DONT CRASH
 232:Core/Src/fsm.c ****     }
 233:Core/Src/fsm.c ****     else
 234:Core/Src/fsm.c ****     {
 235:Core/Src/fsm.c ****       // Cursed code TODO: figure out why for reset and error event code get stuck on 33 (busy tx-i
 236:Core/Src/fsm.c ****       huart2.gState = HAL_UART_STATE_READY;
 237:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 238:Core/Src/fsm.c ****       {
 239:Core/Src/fsm.c ****         while(1);
 240:Core/Src/fsm.c ****       }
 241:Core/Src/fsm.c ****     }
 242:Core/Src/fsm.c **** 
 243:Core/Src/fsm.c ****     return;
 244:Core/Src/fsm.c **** }
 436              		.loc 1 244 1 view .LVU69
 437              		@ sp needed
 438 0018 10BD     		pop	{r4, pc}
 439              	.LVL34:
 440              	.L25:
 236:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 441              		.loc 1 236 7 is_stmt 1 view .LVU70
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 13


 236:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 442              		.loc 1 236 21 is_stmt 0 view .LVU71
 443 001a 0848     		ldr	r0, .L26+12
 444              	.LVL35:
 236:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 445              		.loc 1 236 21 view .LVU72
 446 001c 2023     		movs	r3, #32
 447 001e 8367     		str	r3, [r0, #120]
 237:Core/Src/fsm.c ****       {
 448              		.loc 1 237 7 is_stmt 1 view .LVU73
 237:Core/Src/fsm.c ****       {
 449              		.loc 1 237 11 is_stmt 0 view .LVU74
 450 0020 92B2     		uxth	r2, r2
 451              	.LVL36:
 237:Core/Src/fsm.c ****       {
 452              		.loc 1 237 11 view .LVU75
 453 0022 4433     		adds	r3, r3, #68
 454 0024 0449     		ldr	r1, .L26+8
 455 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 456              	.LVL37:
 237:Core/Src/fsm.c ****       {
 457              		.loc 1 237 10 view .LVU76
 458 002a 0028     		cmp	r0, #0
 459 002c F4D0     		beq	.L22
 460              	.L24:
 239:Core/Src/fsm.c ****       }
 461              		.loc 1 239 9 is_stmt 1 discriminator 2 view .LVU77
 239:Core/Src/fsm.c ****       }
 462              		.loc 1 239 17 discriminator 2 view .LVU78
 239:Core/Src/fsm.c ****       }
 463              		.loc 1 239 14 discriminator 2 view .LVU79
 464 002e FEE7     		b	.L24
 465              	.L27:
 466              		.align	2
 467              	.L26:
 468 0030 00000000 		.word	.LANCHOR4
 469 0034 00000000 		.word	.LC8
 470 0038 00000000 		.word	.LANCHOR5
 471 003c 00000000 		.word	huart2
 472              		.cfi_endproc
 473              	.LFE54:
 475              		.section	.text.FSM_step,"ax",%progbits
 476              		.align	1
 477              		.global	FSM_step
 478              		.syntax unified
 479              		.code	16
 480              		.thumb_func
 482              	FSM_step:
 483              	.LVL38:
 484              	.LFB52:
 157:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 485              		.loc 1 157 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 157:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 489              		.loc 1 157 1 is_stmt 0 view .LVU81
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 14


 490 0000 10B5     		push	{r4, lr}
 491              	.LCFI7:
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 4, -8
 494              		.cfi_offset 14, -4
 158:Core/Src/fsm.c **** 
 495              		.loc 1 158 3 is_stmt 1 view .LVU82
 161:Core/Src/fsm.c ****   {
 496              		.loc 1 161 3 view .LVU83
 172:Core/Src/fsm.c ****   {
 497              		.loc 1 172 3 view .LVU84
 172:Core/Src/fsm.c ****   {
 498              		.loc 1 172 25 is_stmt 0 view .LVU85
 499 0002 0F4B     		ldr	r3, .L30
 500 0004 1A78     		ldrb	r2, [r3]
 172:Core/Src/fsm.c ****   {
 501              		.loc 1 172 6 view .LVU86
 502 0006 052A     		cmp	r2, #5
 503 0008 19D8     		bhi	.L28
 172:Core/Src/fsm.c ****   {
 504              		.loc 1 172 56 discriminator 1 view .LVU87
 505 000a 0E4B     		ldr	r3, .L30+4
 506 000c 1978     		ldrb	r1, [r3]
 172:Core/Src/fsm.c ****   {
 507              		.loc 1 172 39 discriminator 1 view .LVU88
 508 000e 0529     		cmp	r1, #5
 509 0010 15D8     		bhi	.L28
 172:Core/Src/fsm.c ****   {
 510              		.loc 1 172 94 discriminator 2 view .LVU89
 511 0012 5300     		lsls	r3, r2, #1
 512 0014 9B18     		adds	r3, r3, r2
 513 0016 5B00     		lsls	r3, r3, #1
 514 0018 5B18     		adds	r3, r3, r1
 515 001a 9B00     		lsls	r3, r3, #2
 516 001c 0A4A     		ldr	r2, .L30+8
 517 001e 9B58     		ldr	r3, [r3, r2]
 172:Core/Src/fsm.c ****   {
 518              		.loc 1 172 70 discriminator 2 view .LVU90
 519 0020 002B     		cmp	r3, #0
 520 0022 0CD0     		beq	.L28
 172:Core/Src/fsm.c ****   {
 521              		.loc 1 172 133 discriminator 3 view .LVU91
 522 0024 094A     		ldr	r2, .L30+12
 523 0026 1278     		ldrb	r2, [r2]
 172:Core/Src/fsm.c ****   {
 524              		.loc 1 172 117 discriminator 3 view .LVU92
 525 0028 9142     		cmp	r1, r2
 526 002a 08D0     		beq	.L28
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 527              		.loc 1 175 7 is_stmt 1 view .LVU93
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 528              		.loc 1 175 27 is_stmt 0 view .LVU94
 529 002c 9847     		blx	r3
 530              	.LVL39:
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 531              		.loc 1 175 24 view .LVU95
 532 002e 044B     		ldr	r3, .L30
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 15


 533 0030 1870     		strb	r0, [r3]
 176:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 534              		.loc 1 176 7 is_stmt 1 view .LVU96
 176:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 535              		.loc 1 176 16 is_stmt 0 view .LVU97
 536 0032 044B     		ldr	r3, .L30+4
 537 0034 1A78     		ldrb	r2, [r3]
 538 0036 054B     		ldr	r3, .L30+12
 539 0038 1A70     		strb	r2, [r3]
 177:Core/Src/fsm.c ****   }
 540              		.loc 1 177 7 is_stmt 1 view .LVU98
 541 003a FFF7FEFF 		bl	sendStateMsg
 542              	.LVL40:
 182:Core/Src/fsm.c **** 
 543              		.loc 1 182 3 view .LVU99
 185:Core/Src/fsm.c **** }
 544              		.loc 1 185 3 view .LVU100
 545              	.L28:
 186:Core/Src/fsm.c **** 
 546              		.loc 1 186 1 is_stmt 0 view .LVU101
 547              		@ sp needed
 548 003e 10BD     		pop	{r4, pc}
 549              	.L31:
 550              		.align	2
 551              	.L30:
 552 0040 00000000 		.word	.LANCHOR2
 553 0044 00000000 		.word	.LANCHOR3
 554 0048 00000000 		.word	FSM.2
 555 004c 00000000 		.word	.LANCHOR6
 556              		.cfi_endproc
 557              	.LFE52:
 559              		.section	.text.nextEventFromState,"ax",%progbits
 560              		.align	1
 561              		.global	nextEventFromState
 562              		.syntax unified
 563              		.code	16
 564              		.thumb_func
 566              	nextEventFromState:
 567              	.LVL41:
 568              	.LFB55:
 245:Core/Src/fsm.c **** 
 246:Core/Src/fsm.c **** eFsmEvent nextEventFromState(eFsmState state)
 247:Core/Src/fsm.c **** {
 569              		.loc 1 247 1 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 248:Core/Src/fsm.c ****   // Next state
 249:Core/Src/fsm.c ****   switch (state)
 574              		.loc 1 249 3 view .LVU103
 575 0000 0628     		cmp	r0, #6
 576 0002 0FD8     		bhi	.L33
 577 0004 8000     		lsls	r0, r0, #2
 578              	.LVL42:
 579              		.loc 1 249 3 is_stmt 0 view .LVU104
 580 0006 094B     		ldr	r3, .L43
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 16


 581 0008 1B58     		ldr	r3, [r3, r0]
 582 000a 9F46     		mov	pc, r3
 583              		.section	.rodata.nextEventFromState,"a",%progbits
 584              		.align	2
 585              	.L35:
 586 0000 0C000000 		.word	.L41
 587 0004 28000000 		.word	.L42
 588 0008 10000000 		.word	.L39
 589 000c 14000000 		.word	.L38
 590 0010 18000000 		.word	.L37
 591 0014 1C000000 		.word	.L36
 592 0018 20000000 		.word	.L34
 593              		.section	.text.nextEventFromState
 594              	.L41:
 595 000c 0120     		movs	r0, #1
 596              	.L40:
 250:Core/Src/fsm.c ****   {
 251:Core/Src/fsm.c ****   case Idle_State:
 252:Core/Src/fsm.c ****     return Arm_Event;
 253:Core/Src/fsm.c ****     break;
 254:Core/Src/fsm.c **** 
 255:Core/Src/fsm.c ****   case Standby_State:
 256:Core/Src/fsm.c ****     return Launch_Event;
 257:Core/Src/fsm.c ****     break;
 258:Core/Src/fsm.c **** 
 259:Core/Src/fsm.c ****   case Igniter_On_State:
 260:Core/Src/fsm.c ****     return Open_Valve_Timer_Event;
 261:Core/Src/fsm.c ****     break;
 262:Core/Src/fsm.c **** 
 263:Core/Src/fsm.c ****   case Valve_Open_State:
 264:Core/Src/fsm.c ****     return Stop_Igniter_Timer_Event;
 265:Core/Src/fsm.c ****     break;
 266:Core/Src/fsm.c **** 
 267:Core/Src/fsm.c ****   case Igniter_Off_State:
 268:Core/Src/fsm.c ****     return Last_Event;
 269:Core/Src/fsm.c ****     break;
 270:Core/Src/fsm.c **** 
 271:Core/Src/fsm.c ****   case Aborted_State:
 272:Core/Src/fsm.c ****     return Last_Event;
 273:Core/Src/fsm.c ****     break;
 274:Core/Src/fsm.c **** 
 275:Core/Src/fsm.c ****   case Last_State:
 276:Core/Src/fsm.c ****     return Reset_Event;
 277:Core/Src/fsm.c ****     break;
 278:Core/Src/fsm.c **** 
 279:Core/Src/fsm.c ****   default:
 280:Core/Src/fsm.c ****     break;
 281:Core/Src/fsm.c ****   }
 282:Core/Src/fsm.c **** 
 283:Core/Src/fsm.c ****   return 6;
 284:Core/Src/fsm.c **** }
 597              		.loc 1 284 1 view .LVU105
 598              		@ sp needed
 599 000e 7047     		bx	lr
 600              	.L39:
 257:Core/Src/fsm.c **** 
 601              		.loc 1 257 5 is_stmt 1 view .LVU106
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 17


 260:Core/Src/fsm.c ****     break;
 602              		.loc 1 260 5 view .LVU107
 260:Core/Src/fsm.c ****     break;
 603              		.loc 1 260 12 is_stmt 0 view .LVU108
 604 0010 0320     		movs	r0, #3
 605 0012 FCE7     		b	.L40
 606              	.L38:
 261:Core/Src/fsm.c **** 
 607              		.loc 1 261 5 is_stmt 1 view .LVU109
 264:Core/Src/fsm.c ****     break;
 608              		.loc 1 264 5 view .LVU110
 264:Core/Src/fsm.c ****     break;
 609              		.loc 1 264 12 is_stmt 0 view .LVU111
 610 0014 0420     		movs	r0, #4
 611 0016 FAE7     		b	.L40
 612              	.L37:
 265:Core/Src/fsm.c **** 
 613              		.loc 1 265 5 is_stmt 1 view .LVU112
 268:Core/Src/fsm.c ****     break;
 614              		.loc 1 268 5 view .LVU113
 268:Core/Src/fsm.c ****     break;
 615              		.loc 1 268 12 is_stmt 0 view .LVU114
 616 0018 0620     		movs	r0, #6
 617 001a F8E7     		b	.L40
 618              	.L36:
 269:Core/Src/fsm.c **** 
 619              		.loc 1 269 5 is_stmt 1 view .LVU115
 272:Core/Src/fsm.c ****     break;
 620              		.loc 1 272 5 view .LVU116
 272:Core/Src/fsm.c ****     break;
 621              		.loc 1 272 12 is_stmt 0 view .LVU117
 622 001c 0620     		movs	r0, #6
 623 001e F6E7     		b	.L40
 624              	.L34:
 273:Core/Src/fsm.c **** 
 625              		.loc 1 273 5 is_stmt 1 view .LVU118
 276:Core/Src/fsm.c ****     break;
 626              		.loc 1 276 5 view .LVU119
 276:Core/Src/fsm.c ****     break;
 627              		.loc 1 276 12 is_stmt 0 view .LVU120
 628 0020 0520     		movs	r0, #5
 629 0022 F4E7     		b	.L40
 630              	.LVL43:
 631              	.L33:
 277:Core/Src/fsm.c **** 
 632              		.loc 1 277 5 is_stmt 1 view .LVU121
 280:Core/Src/fsm.c ****   }
 633              		.loc 1 280 5 view .LVU122
 283:Core/Src/fsm.c **** }
 634              		.loc 1 283 3 view .LVU123
 283:Core/Src/fsm.c **** }
 635              		.loc 1 283 10 is_stmt 0 view .LVU124
 636 0024 0620     		movs	r0, #6
 637              	.LVL44:
 283:Core/Src/fsm.c **** }
 638              		.loc 1 283 10 view .LVU125
 639 0026 F2E7     		b	.L40
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 18


 640              	.L42:
 256:Core/Src/fsm.c ****     break;
 641              		.loc 1 256 12 view .LVU126
 642 0028 0220     		movs	r0, #2
 643 002a F0E7     		b	.L40
 644              	.L44:
 645              		.align	2
 646              	.L43:
 647 002c 00000000 		.word	.L35
 648              		.cfi_endproc
 649              	.LFE55:
 651              		.section	.rodata.FSM_reciveCMD.str1.4,"aMS",%progbits,1
 652              		.align	2
 653              	.LC17:
 654 0000 0A00     		.ascii	"\012\000"
 655              		.section	.text.FSM_reciveCMD,"ax",%progbits
 656              		.align	1
 657              		.global	FSM_reciveCMD
 658              		.syntax unified
 659              		.code	16
 660              		.thumb_func
 662              	FSM_reciveCMD:
 663              	.LVL45:
 664              	.LFB53:
 189:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 665              		.loc 1 189 1 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 8
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 189:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 669              		.loc 1 189 1 is_stmt 0 view .LVU128
 670 0000 30B5     		push	{r4, r5, lr}
 671              	.LCFI8:
 672              		.cfi_def_cfa_offset 12
 673              		.cfi_offset 4, -12
 674              		.cfi_offset 5, -8
 675              		.cfi_offset 14, -4
 676 0002 83B0     		sub	sp, sp, #12
 677              	.LCFI9:
 678              		.cfi_def_cfa_offset 24
 679 0004 0400     		movs	r4, r0
 190:Core/Src/fsm.c **** 
 680              		.loc 1 190 3 is_stmt 1 view .LVU129
 190:Core/Src/fsm.c **** 
 681              		.loc 1 190 11 is_stmt 0 view .LVU130
 682 0006 0023     		movs	r3, #0
 683 0008 6A46     		mov	r2, sp
 684 000a D371     		strb	r3, [r2, #7]
 192:Core/Src/fsm.c **** 
 685              		.loc 1 192 3 is_stmt 1 view .LVU131
 686 000c 6433     		adds	r3, r3, #100
 687 000e 0122     		movs	r2, #1
 688 0010 6946     		mov	r1, sp
 689 0012 0731     		adds	r1, r1, #7
 690 0014 FFF7FEFF 		bl	HAL_UART_Receive
 691              	.LVL46:
 195:Core/Src/fsm.c ****   {
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 19


 692              		.loc 1 195 3 view .LVU132
 195:Core/Src/fsm.c ****   {
 693              		.loc 1 195 14 is_stmt 0 view .LVU133
 694 0018 6B46     		mov	r3, sp
 695 001a DB79     		ldrb	r3, [r3, #7]
 195:Core/Src/fsm.c ****   {
 696              		.loc 1 195 6 view .LVU134
 697 001c 002B     		cmp	r3, #0
 698 001e 01D0     		beq	.L45
 195:Core/Src/fsm.c ****   {
 699              		.loc 1 195 19 discriminator 1 view .LVU135
 700 0020 0A2B     		cmp	r3, #10
 701 0022 01D1     		bne	.L48
 702              	.L45:
 213:Core/Src/fsm.c **** 
 703              		.loc 1 213 1 view .LVU136
 704 0024 03B0     		add	sp, sp, #12
 705              		@ sp needed
 706              	.LVL47:
 213:Core/Src/fsm.c **** 
 707              		.loc 1 213 1 view .LVU137
 708 0026 30BD     		pop	{r4, r5, pc}
 709              	.LVL48:
 710              	.L48:
 197:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, "\n", 2, 50);
 711              		.loc 1 197 5 is_stmt 1 view .LVU138
 712 0028 6B46     		mov	r3, sp
 713 002a DD1D     		adds	r5, r3, #7
 714 002c 3223     		movs	r3, #50
 715 002e 0122     		movs	r2, #1
 716 0030 2900     		movs	r1, r5
 717 0032 2000     		movs	r0, r4
 718 0034 FFF7FEFF 		bl	HAL_UART_Transmit
 719              	.LVL49:
 198:Core/Src/fsm.c **** 
 720              		.loc 1 198 5 view .LVU139
 721 0038 3223     		movs	r3, #50
 722 003a 0222     		movs	r2, #2
 723 003c 0C49     		ldr	r1, .L50
 724 003e 2000     		movs	r0, r4
 725 0040 FFF7FEFF 		bl	HAL_UART_Transmit
 726              	.LVL50:
 200:Core/Src/fsm.c ****     {
 727              		.loc 1 200 5 view .LVU140
 200:Core/Src/fsm.c ****     {
 728              		.loc 1 200 24 is_stmt 0 view .LVU141
 729 0044 2B78     		ldrb	r3, [r5]
 730 0046 1800     		movs	r0, r3
 731 0048 3038     		subs	r0, r0, #48
 732 004a C0B2     		uxtb	r0, r0
 200:Core/Src/fsm.c ****     {
 733              		.loc 1 200 8 view .LVU142
 734 004c 0628     		cmp	r0, #6
 735 004e 0AD9     		bls	.L49
 206:Core/Src/fsm.c ****     {
 736              		.loc 1 206 10 is_stmt 1 view .LVU143
 206:Core/Src/fsm.c ****     {
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 20


 737              		.loc 1 206 13 is_stmt 0 view .LVU144
 738 0050 372B     		cmp	r3, #55
 739 0052 E7D1     		bne	.L45
 206:Core/Src/fsm.c ****     {
 740              		.loc 1 206 49 discriminator 1 view .LVU145
 741 0054 074B     		ldr	r3, .L50+4
 742 0056 1878     		ldrb	r0, [r3]
 206:Core/Src/fsm.c ****     {
 743              		.loc 1 206 29 discriminator 1 view .LVU146
 744 0058 0428     		cmp	r0, #4
 745 005a E3D0     		beq	.L45
 208:Core/Src/fsm.c ****     }
 746              		.loc 1 208 7 is_stmt 1 view .LVU147
 747 005c FFF7FEFF 		bl	nextEventFromState
 748              	.LVL51:
 749 0060 FFF7FEFF 		bl	FSM_sendEvent
 750              	.LVL52:
 212:Core/Src/fsm.c **** }
 751              		.loc 1 212 3 view .LVU148
 752 0064 DEE7     		b	.L45
 753              	.L49:
 203:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 754              		.loc 1 203 7 view .LVU149
 203:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 755              		.loc 1 203 14 is_stmt 0 view .LVU150
 756 0066 2870     		strb	r0, [r5]
 204:Core/Src/fsm.c ****     }
 757              		.loc 1 204 7 is_stmt 1 view .LVU151
 758 0068 FFF7FEFF 		bl	FSM_sendEvent
 759              	.LVL53:
 760 006c DAE7     		b	.L45
 761              	.L51:
 762 006e C046     		.align	2
 763              	.L50:
 764 0070 00000000 		.word	.LC17
 765 0074 00000000 		.word	.LANCHOR2
 766              		.cfi_endproc
 767              	.LFE53:
 769              		.section	.text.eventToQue,"ax",%progbits
 770              		.align	1
 771              		.global	eventToQue
 772              		.syntax unified
 773              		.code	16
 774              		.thumb_func
 776              	eventToQue:
 777              	.LVL54:
 778              	.LFB56:
 285:Core/Src/fsm.c **** 
 286:Core/Src/fsm.c **** void eventToQue(eFsmEvent Event)
 287:Core/Src/fsm.c **** {
 779              		.loc 1 287 1 view -0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 288:Core/Src/fsm.c ****     
 289:Core/Src/fsm.c **** }
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 21


 784              		.loc 1 289 1 view .LVU153
 785              		@ sp needed
 786 0000 7047     		bx	lr
 787              		.cfi_endproc
 788              	.LFE56:
 790              		.section	.bss.msgBuff.0,"aw",%nobits
 791              		.align	2
 792              		.set	.LANCHOR5,. + 0
 795              	msgBuff.0:
 796 0000 00000000 		.space	32
 796      00000000 
 796      00000000 
 796      00000000 
 796      00000000 
 797              		.section	.data.eFsmCurrentState,"aw"
 798              		.set	.LANCHOR2,. + 0
 801              	eFsmCurrentState:
 802 0000 06       		.byte	6
 803              		.section	.data.eFsmNewEvent,"aw"
 804              		.set	.LANCHOR3,. + 0
 807              	eFsmNewEvent:
 808 0000 06       		.byte	6
 809              		.section	.data.preEvent.1,"aw"
 810              		.set	.LANCHOR6,. + 0
 813              	preEvent.1:
 814 0000 06       		.byte	6
 815              		.section	.rodata.FSM.2,"a"
 816              		.align	2
 819              	FSM.2:
 820 0000 00000000 		.word	_errorHandler
 821 0004 00000000 		.word	_recivedArmHandler
 822 0008 00000000 		.space	12
 822      00000000 
 822      00000000 
 823 0014 00000000 		.word	_resetHandler
 824 0018 00000000 		.word	_errorHandler
 825 001c 00000000 		.space	4
 826 0020 00000000 		.word	_revicedLaunchHandler
 827 0024 00000000 		.space	8
 827      00000000 
 828 002c 00000000 		.word	_resetHandler
 829 0030 00000000 		.word	_errorHandler
 830 0034 00000000 		.space	8
 830      00000000 
 831 003c 00000000 		.word	_alarmOpenValveHandler
 832 0040 00000000 		.space	4
 833 0044 00000000 		.word	_resetHandler
 834 0048 00000000 		.word	_errorHandler
 835 004c 00000000 		.space	12
 835      00000000 
 835      00000000 
 836 0058 00000000 		.word	_alarmTurnOffIgniterHandler
 837 005c 00000000 		.word	_resetHandler
 838 0060 00000000 		.word	_errorHandler
 839 0064 00000000 		.space	16
 839      00000000 
 839      00000000 
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 22


 839      00000000 
 840 0074 00000000 		.word	_resetHandler
 841 0078 00000000 		.word	_errorHandler
 842 007c 00000000 		.space	16
 842      00000000 
 842      00000000 
 842      00000000 
 843 008c 00000000 		.word	_resetHandler
 844              		.section	.rodata.eFsmStateNames,"a"
 845              		.align	2
 846              		.set	.LANCHOR4,. + 0
 849              	eFsmStateNames:
 850 0000 49646C65 		.ascii	"Idle\000"
 850      00
 851 0005 00000000 		.space	7
 851      000000
 852 000c 5374616E 		.ascii	"Standby\000"
 852      64627900 
 853 0014 00000000 		.space	4
 854 0018 49676E69 		.ascii	"Igniter On\000"
 854      74657220 
 854      4F6E00
 855 0023 00       		.space	1
 856 0024 56616C76 		.ascii	"Valve Open\000"
 856      65204F70 
 856      656E00
 857 002f 00       		.space	1
 858 0030 49676E69 		.ascii	"Igniter Off\000"
 858      74657220 
 858      4F666600 
 859 003c 41626F72 		.ascii	"Aborted\000"
 859      74656400 
 860 0044 00000000 		.space	4
 861 0048 504C4143 		.ascii	"PLACEHOLDER\000"
 861      45484F4C 
 861      44455200 
 862              		.section	.rodata.errorMsg,"a"
 863              		.align	2
 864              		.set	.LANCHOR0,. + 0
 867              	errorMsg:
 868 0000 0D0A536F 		.ascii	"\015\012Somthing went wrong! MOVED TO ERROR STATE\015"
 868      6D746869 
 868      6E672077 
 868      656E7420 
 868      77726F6E 
 869 002c 0A00     		.ascii	"\012\000"
 870              		.section	.rodata.resetMsg,"a"
 871              		.align	2
 872              		.set	.LANCHOR1,. + 0
 875              	resetMsg:
 876 0000 0D0A5265 		.ascii	"\015\012Returned to idel state\015\012\000"
 876      7475726E 
 876      65642074 
 876      6F206964 
 876      656C2073 
 877              		.text
 878              	.Letext0:
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 23


 879              		.file 2 "f:\\toolchains\\gnu_arm\\10 2021.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 880              		.file 3 "f:\\toolchains\\gnu_arm\\10 2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 881              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l031xx.h"
 882              		.file 5 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 883              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 884              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 885              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 886              		.file 9 "Core/Inc/fsm.h"
 887              		.file 10 "f:\\toolchains\\gnu_arm\\10 2021.10\\arm-none-eabi\\include\\stdio.h"
 888              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 889              		.file 12 "Core/Inc/pwm.h"
 890              		.file 13 "Core/Inc/usart.h"
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 fsm.c
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:18     .text._recivedArmHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:24     .text._recivedArmHandler:00000000 _recivedArmHandler
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:56     .text._revicedLaunchHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:62     .text._revicedLaunchHandler:00000000 _revicedLaunchHandler
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:93     .text._alarmTurnOffIgniterHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:99     .text._alarmTurnOffIgniterHandler:00000000 _alarmTurnOffIgniterHandler
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:141    .text._errorHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:147    .text._errorHandler:00000000 _errorHandler
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:194    .text._errorHandler:00000030 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:200    .text._alarmOpenValveHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:206    .text._alarmOpenValveHandler:00000000 _alarmOpenValveHandler
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:233    .text._alarmOpenValveHandler:0000000c $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:238    .text._resetHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:244    .text._resetHandler:00000000 _resetHandler
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:295    .text._resetHandler:00000034 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:301    .text.FSM_init:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:307    .text.FSM_init:00000000 FSM_init
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:326    .text.FSM_init:00000008 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:331    .text.FSM_state:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:337    .text.FSM_state:00000000 FSM_state
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:354    .text.FSM_state:00000008 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:359    .text.FSM_sendEvent:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:365    .text.FSM_sendEvent:00000000 FSM_sendEvent
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:384    .text.FSM_sendEvent:00000008 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:389    .rodata.sendStateMsg.str1.4:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:393    .text.sendStateMsg:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:399    .text.sendStateMsg:00000000 sendStateMsg
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:468    .text.sendStateMsg:00000030 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:476    .text.FSM_step:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:482    .text.FSM_step:00000000 FSM_step
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:552    .text.FSM_step:00000040 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:819    .rodata.FSM.2:00000000 FSM.2
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:560    .text.nextEventFromState:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:566    .text.nextEventFromState:00000000 nextEventFromState
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:584    .rodata.nextEventFromState:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:647    .text.nextEventFromState:0000002c $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:652    .rodata.FSM_reciveCMD.str1.4:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:656    .text.FSM_reciveCMD:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:662    .text.FSM_reciveCMD:00000000 FSM_reciveCMD
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:764    .text.FSM_reciveCMD:00000070 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:770    .text.eventToQue:00000000 $t
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:776    .text.eventToQue:00000000 eventToQue
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:791    .bss.msgBuff.0:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:795    .bss.msgBuff.0:00000000 msgBuff.0
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:801    .data.eFsmCurrentState:00000000 eFsmCurrentState
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:807    .data.eFsmNewEvent:00000000 eFsmNewEvent
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:813    .data.preEvent.1:00000000 preEvent.1
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:816    .rodata.FSM.2:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:845    .rodata.eFsmStateNames:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:849    .rodata.eFsmStateNames:00000000 eFsmStateNames
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:863    .rodata.errorMsg:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:867    .rodata.errorMsg:00000000 errorMsg
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:871    .rodata.resetMsg:00000000 $d
C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s:875    .rodata.resetMsg:00000000 resetMsg

ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccN5S2zN.s 			page 25


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_Delay
HAL_UART_Transmit_DMA
huart2
PWM1_setPos
sprintf
HAL_UART_Transmit
HAL_UART_Receive
