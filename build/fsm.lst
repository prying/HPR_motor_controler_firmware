ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"fsm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._recivedArmHandler,"ax",%progbits
  18              		.align	1
  19              		.global	_recivedArmHandler
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	_recivedArmHandler:
  25              	.LVL0:
  26              	.LFB44:
  27              		.file 1 "Core/Src/fsm.c"
   1:Core/Src/fsm.c **** /*
   2:Core/Src/fsm.c ****  * fsm.c
   3:Core/Src/fsm.c ****  *
   4:Core/Src/fsm.c ****  *  Created on: Mar 30, 2021
   5:Core/Src/fsm.c ****  *      Author: flynn
   6:Core/Src/fsm.c ****  *  based off https://aticleworld.com/state-machine-using-c/
   7:Core/Src/fsm.c ****  */
   8:Core/Src/fsm.c **** 
   9:Core/Src/fsm.c **** #include <stddef.h>
  10:Core/Src/fsm.c **** #include <stdio.h>
  11:Core/Src/fsm.c **** #include "fsm.h"
  12:Core/Src/fsm.c **** #include "usart.h"
  13:Core/Src/fsm.c **** #include "gpio.h"
  14:Core/Src/fsm.c **** #include "pwm.h"
  15:Core/Src/fsm.c **** 
  16:Core/Src/fsm.c **** // Defines
  17:Core/Src/fsm.c **** #define MSGBUFF_SIZE             32
  18:Core/Src/fsm.c **** #define ERROR_MSG_SIZE           30
  19:Core/Src/fsm.c **** #define IGN_CONTROL_OFF_DELAY    20 //ms
  20:Core/Src/fsm.c **** #define SERVO_CLOSED_ANGLE       30  //degrees
  21:Core/Src/fsm.c **** #define SERVO_OPEN_ANGLE         90 //degrees
  22:Core/Src/fsm.c **** 
  23:Core/Src/fsm.c **** #define RX_TIMEOUT  100
  24:Core/Src/fsm.c **** 
  25:Core/Src/fsm.c **** // Nasty global vars
  26:Core/Src/fsm.c **** static eFsmState  eFsmCurrentState = Last_State;
  27:Core/Src/fsm.c **** static eFsmEvent  eFsmNewEvent     = Last_Event;
  28:Core/Src/fsm.c **** 
  29:Core/Src/fsm.c **** static const char errorMsg[] = "\r\nSomthing went wrong! MOVED TO ERROR STATE\r\n";
  30:Core/Src/fsm.c **** static const char resetMsg[] = "\r\nReturned to idel state\r\n";
  31:Core/Src/fsm.c **** 
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 2


  32:Core/Src/fsm.c **** // Event handler function pointer
  33:Core/Src/fsm.c **** typedef eFsmState (*pfEventHandler) (eFsmPeripheriesData *sPeripheries);
  34:Core/Src/fsm.c **** 
  35:Core/Src/fsm.c **** 
  36:Core/Src/fsm.c **** // 2d array of fsm linkages that will return a function pointer
  37:Core/Src/fsm.c **** typedef eFsmState (*const afEventHandler[Last_State][Last_Event])(eFsmPeripheriesData *sPeripheries
  38:Core/Src/fsm.c **** 
  39:Core/Src/fsm.c **** // Private helper functions
  40:Core/Src/fsm.c **** //**************************************
  41:Core/Src/fsm.c **** 
  42:Core/Src/fsm.c **** // Anounce on UART that it has moved to a state
  43:Core/Src/fsm.c **** void sendStateMsg(eFsmState state);
  44:Core/Src/fsm.c **** 
  45:Core/Src/fsm.c **** // Returns the next event from current state given no errors;
  46:Core/Src/fsm.c **** eFsmEvent nextEventFromState(eFsmState state);
  47:Core/Src/fsm.c **** 
  48:Core/Src/fsm.c **** // Event handles
  49:Core/Src/fsm.c **** //**************************************
  50:Core/Src/fsm.c **** 
  51:Core/Src/fsm.c **** // When an error is detected call Error_Event and go to the aborted state
  52:Core/Src/fsm.c **** eFsmState _errorHandler(eFsmPeripheriesData *sPeripheries)
  53:Core/Src/fsm.c **** {
  54:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
  55:Core/Src/fsm.c ****     // Turn off igniter and power to the ignition sorce
  56:Core/Src/fsm.c ****     // Turn off IGN Control
  57:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
  58:Core/Src/fsm.c **** 
  59:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
  60:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
  61:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
  62:Core/Src/fsm.c **** 
  63:Core/Src/fsm.c ****     // Move valve to suitable position
  64:Core/Src/fsm.c ****     // TODO pwm control
  65:Core/Src/fsm.c **** 
  66:Core/Src/fsm.c ****     // Anounce over usart and i2c to let everyone know
  67:Core/Src/fsm.c ****     HAL_UART_Transmit_DMA(&huart2, (uint8_t *)errorMsg, sizeof(errorMsg) / sizeof(char));
  68:Core/Src/fsm.c ****     // TODO Some i2c related method
  69:Core/Src/fsm.c ****     return Aborted_State;
  70:Core/Src/fsm.c **** }
  71:Core/Src/fsm.c **** 
  72:Core/Src/fsm.c **** // Go from idle to standby
  73:Core/Src/fsm.c **** eFsmState _recivedArmHandler(eFsmPeripheriesData *sPeripheries)
  74:Core/Src/fsm.c **** {
  28              		.loc 1 74 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 74 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  75:Core/Src/fsm.c ****     // TODO turn on pwr supply for igiter (i.e. turn on the buck converter)
  76:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
  77:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_SET);
  38              		.loc 1 77 5 is_stmt 1 view .LVU2
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 3


  39 0002 A020     		movs	r0, #160
  40              	.LVL1:
  41              		.loc 1 77 5 is_stmt 0 view .LVU3
  42 0004 0122     		movs	r2, #1
  43 0006 8021     		movs	r1, #128
  44 0008 C005     		lsls	r0, r0, #23
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL2:
  78:Core/Src/fsm.c ****     return Standby_State;
  47              		.loc 1 78 5 is_stmt 1 view .LVU4
  79:Core/Src/fsm.c **** }
  48              		.loc 1 79 1 is_stmt 0 view .LVU5
  49 000e 0120     		movs	r0, #1
  50              		@ sp needed
  51 0010 10BD     		pop	{r4, pc}
  52              		.cfi_endproc
  53              	.LFE44:
  55              		.section	.text._revicedLaunchHandler,"ax",%progbits
  56              		.align	1
  57              		.global	_revicedLaunchHandler
  58              		.syntax unified
  59              		.code	16
  60              		.thumb_func
  62              	_revicedLaunchHandler:
  63              	.LVL3:
  64              	.LFB45:
  80:Core/Src/fsm.c **** 
  81:Core/Src/fsm.c **** // Turn igniter on
  82:Core/Src/fsm.c **** eFsmState _revicedLaunchHandler(eFsmPeripheriesData *sPeripheries)
  83:Core/Src/fsm.c **** {
  65              		.loc 1 83 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		.loc 1 83 1 is_stmt 0 view .LVU7
  70 0000 10B5     		push	{r4, lr}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
  84:Core/Src/fsm.c ****     // TODO turn on mosfet to allow current to travel to the igiter
  85:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_SET);
  75              		.loc 1 85 5 is_stmt 1 view .LVU8
  76 0002 A020     		movs	r0, #160
  77              	.LVL4:
  78              		.loc 1 85 5 is_stmt 0 view .LVU9
  79 0004 0122     		movs	r2, #1
  80 0006 4021     		movs	r1, #64
  81 0008 C005     		lsls	r0, r0, #23
  82 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL5:
  86:Core/Src/fsm.c ****     return Igniter_On_State;
  84              		.loc 1 86 5 is_stmt 1 view .LVU10
  87:Core/Src/fsm.c **** }
  85              		.loc 1 87 1 is_stmt 0 view .LVU11
  86 000e 0220     		movs	r0, #2
  87              		@ sp needed
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 4


  88 0010 10BD     		pop	{r4, pc}
  89              		.cfi_endproc
  90              	.LFE45:
  92              		.section	.text._alarmTurnOffIgniterHandler,"ax",%progbits
  93              		.align	1
  94              		.global	_alarmTurnOffIgniterHandler
  95              		.syntax unified
  96              		.code	16
  97              		.thumb_func
  99              	_alarmTurnOffIgniterHandler:
 100              	.LVL6:
 101              	.LFB47:
  88:Core/Src/fsm.c **** 
  89:Core/Src/fsm.c **** // Timer finishes counting to open clock
  90:Core/Src/fsm.c **** eFsmState _alarmOpenValveHandler(eFsmPeripheriesData *sPeripheries)
  91:Core/Src/fsm.c **** {
  92:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
  93:Core/Src/fsm.c ****     return Valve_Open_State;
  94:Core/Src/fsm.c **** }
  95:Core/Src/fsm.c **** 
  96:Core/Src/fsm.c **** // Timer finishes counting to turn igniter off
  97:Core/Src/fsm.c **** eFsmState _alarmTurnOffIgniterHandler(eFsmPeripheriesData *sPeripheries)
  98:Core/Src/fsm.c **** {
 102              		.loc 1 98 1 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		.loc 1 98 1 is_stmt 0 view .LVU13
 107 0000 10B5     		push	{r4, lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 4, -8
 111              		.cfi_offset 14, -4
  99:Core/Src/fsm.c ****     // TODO turn off mosfet and turn off pwr supply for igniter
 100:Core/Src/fsm.c ****     // Turn off IGN Control
 101:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
 112              		.loc 1 101 5 is_stmt 1 view .LVU14
 113 0002 A024     		movs	r4, #160
 114 0004 E405     		lsls	r4, r4, #23
 115 0006 0022     		movs	r2, #0
 116 0008 4021     		movs	r1, #64
 117 000a 2000     		movs	r0, r4
 118              	.LVL7:
 119              		.loc 1 101 5 is_stmt 0 view .LVU15
 120 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL8:
 102:Core/Src/fsm.c **** 
 103:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
 104:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
 122              		.loc 1 104 5 is_stmt 1 view .LVU16
 123 0010 1420     		movs	r0, #20
 124 0012 FFF7FEFF 		bl	HAL_Delay
 125              	.LVL9:
 105:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 126              		.loc 1 105 5 view .LVU17
 127 0016 0022     		movs	r2, #0
 128 0018 8021     		movs	r1, #128
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 5


 129 001a 2000     		movs	r0, r4
 130 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 131              	.LVL10:
 106:Core/Src/fsm.c **** 
 107:Core/Src/fsm.c ****     return Igniter_Off_State;
 132              		.loc 1 107 5 view .LVU18
 108:Core/Src/fsm.c **** }
 133              		.loc 1 108 1 is_stmt 0 view .LVU19
 134 0020 0420     		movs	r0, #4
 135              		@ sp needed
 136 0022 10BD     		pop	{r4, pc}
 137              		.cfi_endproc
 138              	.LFE47:
 140              		.section	.text._errorHandler,"ax",%progbits
 141              		.align	1
 142              		.global	_errorHandler
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 147              	_errorHandler:
 148              	.LVL11:
 149              	.LFB43:
  53:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
 150              		.loc 1 53 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
  53:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
 154              		.loc 1 53 1 is_stmt 0 view .LVU21
 155 0000 10B5     		push	{r4, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
  57:Core/Src/fsm.c **** 
 160              		.loc 1 57 5 is_stmt 1 view .LVU22
 161 0002 A024     		movs	r4, #160
 162 0004 E405     		lsls	r4, r4, #23
 163 0006 0022     		movs	r2, #0
 164 0008 4021     		movs	r1, #64
 165 000a 2000     		movs	r0, r4
 166              	.LVL12:
  57:Core/Src/fsm.c **** 
 167              		.loc 1 57 5 is_stmt 0 view .LVU23
 168 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 169              	.LVL13:
  60:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 170              		.loc 1 60 5 is_stmt 1 view .LVU24
 171 0010 1420     		movs	r0, #20
 172 0012 FFF7FEFF 		bl	HAL_Delay
 173              	.LVL14:
  61:Core/Src/fsm.c **** 
 174              		.loc 1 61 5 view .LVU25
 175 0016 0022     		movs	r2, #0
 176 0018 8021     		movs	r1, #128
 177 001a 2000     		movs	r0, r4
 178 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 6


 179              	.LVL15:
  67:Core/Src/fsm.c ****     // TODO Some i2c related method
 180              		.loc 1 67 5 view .LVU26
 181 0020 2E22     		movs	r2, #46
 182 0022 0349     		ldr	r1, .L5
 183 0024 0348     		ldr	r0, .L5+4
 184 0026 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 185              	.LVL16:
  69:Core/Src/fsm.c **** }
 186              		.loc 1 69 5 view .LVU27
  70:Core/Src/fsm.c **** 
 187              		.loc 1 70 1 is_stmt 0 view .LVU28
 188 002a 0520     		movs	r0, #5
 189              		@ sp needed
 190 002c 10BD     		pop	{r4, pc}
 191              	.L6:
 192 002e C046     		.align	2
 193              	.L5:
 194 0030 00000000 		.word	.LANCHOR0
 195 0034 00000000 		.word	huart2
 196              		.cfi_endproc
 197              	.LFE43:
 199              		.section	.text._alarmOpenValveHandler,"ax",%progbits
 200              		.align	1
 201              		.global	_alarmOpenValveHandler
 202              		.syntax unified
 203              		.code	16
 204              		.thumb_func
 206              	_alarmOpenValveHandler:
 207              	.LVL17:
 208              	.LFB46:
  91:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
 209              		.loc 1 91 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
  91:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
 213              		.loc 1 91 1 is_stmt 0 view .LVU30
 214 0000 10B5     		push	{r4, lr}
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
  92:Core/Src/fsm.c ****     return Valve_Open_State;
 219              		.loc 1 92 5 is_stmt 1 view .LVU31
 220 0002 0248     		ldr	r0, .L8
 221              	.LVL18:
  92:Core/Src/fsm.c ****     return Valve_Open_State;
 222              		.loc 1 92 5 is_stmt 0 view .LVU32
 223 0004 FFF7FEFF 		bl	PWM1_setPos
 224              	.LVL19:
  93:Core/Src/fsm.c **** }
 225              		.loc 1 93 5 is_stmt 1 view .LVU33
  94:Core/Src/fsm.c **** 
 226              		.loc 1 94 1 is_stmt 0 view .LVU34
 227 0008 0320     		movs	r0, #3
 228              		@ sp needed
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 7


 229 000a 10BD     		pop	{r4, pc}
 230              	.L9:
 231              		.align	2
 232              	.L8:
 233 000c 0000B442 		.word	1119092736
 234              		.cfi_endproc
 235              	.LFE46:
 237              		.section	.text._resetHandler,"ax",%progbits
 238              		.align	1
 239              		.global	_resetHandler
 240              		.syntax unified
 241              		.code	16
 242              		.thumb_func
 244              	_resetHandler:
 245              	.LVL20:
 246              	.LFB48:
 109:Core/Src/fsm.c **** 
 110:Core/Src/fsm.c **** // When in the aborted state it can be reset
 111:Core/Src/fsm.c **** eFsmState _resetHandler(eFsmPeripheriesData *sPeripheries)
 112:Core/Src/fsm.c **** {
 247              		.loc 1 112 1 is_stmt 1 view -0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		.loc 1 112 1 is_stmt 0 view .LVU36
 252 0000 10B5     		push	{r4, lr}
 253              	.LCFI5:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 14, -4
 113:Core/Src/fsm.c ****     // TODO move all vars needed to be in the idle state
 114:Core/Src/fsm.c **** 
 115:Core/Src/fsm.c ****     // Turn off IGN Control
 116:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
 257              		.loc 1 116 5 is_stmt 1 view .LVU37
 258 0002 A024     		movs	r4, #160
 259 0004 E405     		lsls	r4, r4, #23
 260 0006 0022     		movs	r2, #0
 261 0008 4021     		movs	r1, #64
 262 000a 2000     		movs	r0, r4
 263              	.LVL21:
 264              		.loc 1 116 5 is_stmt 0 view .LVU38
 265 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 266              	.LVL22:
 117:Core/Src/fsm.c **** 
 118:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
 119:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
 267              		.loc 1 119 5 is_stmt 1 view .LVU39
 268 0010 1420     		movs	r0, #20
 269 0012 FFF7FEFF 		bl	HAL_Delay
 270              	.LVL23:
 120:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 271              		.loc 1 120 5 view .LVU40
 272 0016 0022     		movs	r2, #0
 273 0018 8021     		movs	r1, #128
 274 001a 2000     		movs	r0, r4
 275 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 8


 276              	.LVL24:
 121:Core/Src/fsm.c **** 
 122:Core/Src/fsm.c ****     // Move valve to suitable position
 123:Core/Src/fsm.c ****     PWM1_setPos(SERVO_CLOSED_ANGLE);
 277              		.loc 1 123 5 view .LVU41
 278 0020 0448     		ldr	r0, .L11
 279 0022 FFF7FEFF 		bl	PWM1_setPos
 280              	.LVL25:
 124:Core/Src/fsm.c **** 
 125:Core/Src/fsm.c ****     // Anounce over usart and i2c to let everyone know
 126:Core/Src/fsm.c ****     HAL_UART_Transmit_DMA(&huart2, (uint8_t *)resetMsg, sizeof(resetMsg) / sizeof(char));
 281              		.loc 1 126 5 view .LVU42
 282 0026 1B22     		movs	r2, #27
 283 0028 0349     		ldr	r1, .L11+4
 284 002a 0448     		ldr	r0, .L11+8
 285 002c FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 286              	.LVL26:
 127:Core/Src/fsm.c **** 
 128:Core/Src/fsm.c ****     return Idle_State;
 287              		.loc 1 128 5 view .LVU43
 129:Core/Src/fsm.c **** }
 288              		.loc 1 129 1 is_stmt 0 view .LVU44
 289 0030 0020     		movs	r0, #0
 290              		@ sp needed
 291 0032 10BD     		pop	{r4, pc}
 292              	.L12:
 293              		.align	2
 294              	.L11:
 295 0034 0000F041 		.word	1106247680
 296 0038 00000000 		.word	.LANCHOR1
 297 003c 00000000 		.word	huart2
 298              		.cfi_endproc
 299              	.LFE48:
 301              		.section	.text.FSM_init,"ax",%progbits
 302              		.align	1
 303              		.global	FSM_init
 304              		.syntax unified
 305              		.code	16
 306              		.thumb_func
 308              	FSM_init:
 309              	.LFB49:
 130:Core/Src/fsm.c **** 
 131:Core/Src/fsm.c **** // Public function
 132:Core/Src/fsm.c **** //*****************************************
 133:Core/Src/fsm.c **** 
 134:Core/Src/fsm.c **** // Initialize finite state machine
 135:Core/Src/fsm.c **** void FSM_init()
 136:Core/Src/fsm.c **** {
 310              		.loc 1 136 1 is_stmt 1 view -0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 137:Core/Src/fsm.c ****     eFsmCurrentState = Idle_State;
 315              		.loc 1 137 5 view .LVU46
 316              		.loc 1 137 22 is_stmt 0 view .LVU47
 317 0000 014B     		ldr	r3, .L14
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 9


 318 0002 0022     		movs	r2, #0
 319 0004 1A70     		strb	r2, [r3]
 138:Core/Src/fsm.c ****     return;
 320              		.loc 1 138 5 is_stmt 1 view .LVU48
 139:Core/Src/fsm.c **** }
 321              		.loc 1 139 1 is_stmt 0 view .LVU49
 322              		@ sp needed
 323 0006 7047     		bx	lr
 324              	.L15:
 325              		.align	2
 326              	.L14:
 327 0008 00000000 		.word	.LANCHOR2
 328              		.cfi_endproc
 329              	.LFE49:
 331              		.section	.text.FSM_state,"ax",%progbits
 332              		.align	1
 333              		.global	FSM_state
 334              		.syntax unified
 335              		.code	16
 336              		.thumb_func
 338              	FSM_state:
 339              	.LFB50:
 140:Core/Src/fsm.c **** 
 141:Core/Src/fsm.c **** // Get current state;
 142:Core/Src/fsm.c **** eFsmState FSM_state()
 143:Core/Src/fsm.c **** {
 340              		.loc 1 143 1 is_stmt 1 view -0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 144:Core/Src/fsm.c ****     return eFsmCurrentState;
 345              		.loc 1 144 5 view .LVU51
 346              		.loc 1 144 12 is_stmt 0 view .LVU52
 347 0000 014B     		ldr	r3, .L17
 348 0002 1878     		ldrb	r0, [r3]
 145:Core/Src/fsm.c **** }
 349              		.loc 1 145 1 view .LVU53
 350              		@ sp needed
 351 0004 7047     		bx	lr
 352              	.L18:
 353 0006 C046     		.align	2
 354              	.L17:
 355 0008 00000000 		.word	.LANCHOR2
 356              		.cfi_endproc
 357              	.LFE50:
 359              		.section	.text.FSM_sendEvent,"ax",%progbits
 360              		.align	1
 361              		.global	FSM_sendEvent
 362              		.syntax unified
 363              		.code	16
 364              		.thumb_func
 366              	FSM_sendEvent:
 367              	.LVL27:
 368              	.LFB51:
 146:Core/Src/fsm.c **** 
 147:Core/Src/fsm.c **** // Get event
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 10


 148:Core/Src/fsm.c **** void FSM_sendEvent(eFsmEvent Event)
 149:Core/Src/fsm.c **** {
 369              		.loc 1 149 1 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 150:Core/Src/fsm.c ****     // TODO! validation ect;
 151:Core/Src/fsm.c ****     eFsmNewEvent = Event;
 374              		.loc 1 151 5 view .LVU55
 375              		.loc 1 151 18 is_stmt 0 view .LVU56
 376 0000 014B     		ldr	r3, .L20
 377 0002 1870     		strb	r0, [r3]
 152:Core/Src/fsm.c ****     return;
 378              		.loc 1 152 5 is_stmt 1 view .LVU57
 153:Core/Src/fsm.c **** }
 379              		.loc 1 153 1 is_stmt 0 view .LVU58
 380              		@ sp needed
 381 0004 7047     		bx	lr
 382              	.L21:
 383 0006 C046     		.align	2
 384              	.L20:
 385 0008 00000000 		.word	.LANCHOR3
 386              		.cfi_endproc
 387              	.LFE51:
 389              		.section	.rodata.sendStateMsg.str1.4,"aMS",%progbits,1
 390              		.align	2
 391              	.LC8:
 392 0000 53746174 		.ascii	"State: %s\012\000"
 392      653A2025 
 392      730A00
 393              		.section	.text.sendStateMsg,"ax",%progbits
 394              		.align	1
 395              		.global	sendStateMsg
 396              		.syntax unified
 397              		.code	16
 398              		.thumb_func
 400              	sendStateMsg:
 401              	.LVL28:
 402              	.LFB54:
 154:Core/Src/fsm.c **** 
 155:Core/Src/fsm.c **** // Step the finite state machines logic
 156:Core/Src/fsm.c **** void FSM_step(eFsmPeripheriesData *sPeripheries)
 157:Core/Src/fsm.c **** {
 158:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 159:Core/Src/fsm.c **** 
 160:Core/Src/fsm.c ****   // Setup linkages for the FSM               Might make a global if it is wasiting alot of loop re
 161:Core/Src/fsm.c ****   static afEventHandler FSM =
 162:Core/Src/fsm.c ****   {
 163:Core/Src/fsm.c ****       [Idle_State]        = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Arm_Ev
 164:Core/Src/fsm.c ****       [Standby_State]     = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Launch
 165:Core/Src/fsm.c ****       [Igniter_On_State]  = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Open_V
 166:Core/Src/fsm.c ****       [Valve_Open_State]  = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Stop_I
 167:Core/Src/fsm.c ****       [Igniter_Off_State] = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler         
 168:Core/Src/fsm.c ****       [Aborted_State]     = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler         
 169:Core/Src/fsm.c ****   };
 170:Core/Src/fsm.c **** 
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 11


 171:Core/Src/fsm.c ****   // Validate that both state and event are valid and that there is a event handler at the event fo
 172:Core/Src/fsm.c ****   if ((eFsmCurrentState < Last_State) && (eFsmNewEvent < Last_Event) && FSM[eFsmCurrentState][eFsmN
 173:Core/Src/fsm.c ****   {
 174:Core/Src/fsm.c ****       // Call the event handler at the end of the function pointer
 175:Core/Src/fsm.c ****       eFsmCurrentState = (*FSM[eFsmCurrentState][eFsmNewEvent])(sPeripheries);
 176:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 177:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 178:Core/Src/fsm.c ****   }
 179:Core/Src/fsm.c ****   else
 180:Core/Src/fsm.c ****   {
 181:Core/Src/fsm.c ****       //TODO Maybe this could also trigger and abort???
 182:Core/Src/fsm.c ****   }
 183:Core/Src/fsm.c **** 
 184:Core/Src/fsm.c **** 
 185:Core/Src/fsm.c ****   return;
 186:Core/Src/fsm.c **** }
 187:Core/Src/fsm.c **** 
 188:Core/Src/fsm.c **** void FSM_reciveCMD(UART_HandleTypeDef * uartHandle)
 189:Core/Src/fsm.c **** {
 190:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 191:Core/Src/fsm.c **** 
 192:Core/Src/fsm.c ****   HAL_UART_Receive(uartHandle, &strBuf, 1, RX_TIMEOUT);
 193:Core/Src/fsm.c **** 
 194:Core/Src/fsm.c ****   // Check what code was recived
 195:Core/Src/fsm.c ****   if (strBuf != 0 && strBuf != '\n')
 196:Core/Src/fsm.c ****   {
 197:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, &strBuf, 1, 50);
 198:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, "\n", 2, 50);
 199:Core/Src/fsm.c **** 
 200:Core/Src/fsm.c ****     if ( '0' <= strBuf && strBuf <= '6')
 201:Core/Src/fsm.c ****     {
 202:Core/Src/fsm.c ****       // Convert to int
 203:Core/Src/fsm.c ****       strBuf -= 48;
 204:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 205:Core/Src/fsm.c ****     }
 206:Core/Src/fsm.c ****     else if ( strBuf == '7' && eFsmCurrentState != Igniter_Off_State)
 207:Core/Src/fsm.c ****     {
 208:Core/Src/fsm.c ****       FSM_sendEvent(nextEventFromState(eFsmCurrentState));
 209:Core/Src/fsm.c ****     }
 210:Core/Src/fsm.c ****   }
 211:Core/Src/fsm.c **** 
 212:Core/Src/fsm.c ****   return;
 213:Core/Src/fsm.c **** }
 214:Core/Src/fsm.c **** 
 215:Core/Src/fsm.c **** // Private helper function implementations
 216:Core/Src/fsm.c **** //*****************************************
 217:Core/Src/fsm.c **** 
 218:Core/Src/fsm.c **** // Anounce on UART that it has moved to a state
 219:Core/Src/fsm.c **** void sendStateMsg(eFsmState state)
 220:Core/Src/fsm.c **** {
 403              		.loc 1 220 1 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		.loc 1 220 1 is_stmt 0 view .LVU60
 408 0000 10B5     		push	{r4, lr}
 409              	.LCFI6:
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 12


 410              		.cfi_def_cfa_offset 8
 411              		.cfi_offset 4, -8
 412              		.cfi_offset 14, -4
 221:Core/Src/fsm.c ****     // Needs to be a static becuase the memory is deallocated when this function is removed from th
 222:Core/Src/fsm.c ****     static char msgBuff[MSGBUFF_SIZE];
 413              		.loc 1 222 5 is_stmt 1 view .LVU61
 223:Core/Src/fsm.c ****     int n = 0;
 414              		.loc 1 223 5 view .LVU62
 415              	.LVL29:
 224:Core/Src/fsm.c **** 
 225:Core/Src/fsm.c ****     // TODO: make safe with snprintf
 226:Core/Src/fsm.c ****     n = sprintf(msgBuff, "State: %s\n", eFsmStateNames[state]);
 416              		.loc 1 226 5 view .LVU63
 417              		.loc 1 226 55 is_stmt 0 view .LVU64
 418 0002 4200     		lsls	r2, r0, #1
 419 0004 1218     		adds	r2, r2, r0
 420 0006 9200     		lsls	r2, r2, #2
 421 0008 0848     		ldr	r0, .L25
 422              	.LVL30:
 423              		.loc 1 226 55 view .LVU65
 424 000a 8218     		adds	r2, r0, r2
 425              		.loc 1 226 9 view .LVU66
 426 000c 0849     		ldr	r1, .L25+4
 427 000e 0948     		ldr	r0, .L25+8
 428 0010 FFF7FEFF 		bl	sprintf
 429              	.LVL31:
 430 0014 021E     		subs	r2, r0, #0
 431              	.LVL32:
 227:Core/Src/fsm.c ****     if (n <= 0)
 432              		.loc 1 227 5 is_stmt 1 view .LVU67
 433              		.loc 1 227 8 is_stmt 0 view .LVU68
 434 0016 00DC     		bgt	.L24
 435              	.LVL33:
 436              	.L22:
 228:Core/Src/fsm.c ****     {
 229:Core/Src/fsm.c ****         // Somthing went wrong BUT DONT CRASH
 230:Core/Src/fsm.c ****     }
 231:Core/Src/fsm.c ****     else
 232:Core/Src/fsm.c ****     {
 233:Core/Src/fsm.c ****       // Cursed code TODO: figure out why for reset and error event code get stuck on 33 (busy tx-i
 234:Core/Src/fsm.c ****       huart2.gState = HAL_UART_STATE_READY;
 235:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 236:Core/Src/fsm.c ****       {
 237:Core/Src/fsm.c **** 
 238:Core/Src/fsm.c ****       }
 239:Core/Src/fsm.c ****     }
 240:Core/Src/fsm.c **** 
 241:Core/Src/fsm.c ****     return;
 242:Core/Src/fsm.c **** }
 437              		.loc 1 242 1 view .LVU69
 438              		@ sp needed
 439 0018 10BD     		pop	{r4, pc}
 440              	.LVL34:
 441              	.L24:
 234:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 442              		.loc 1 234 7 is_stmt 1 view .LVU70
 234:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 13


 443              		.loc 1 234 21 is_stmt 0 view .LVU71
 444 001a 0748     		ldr	r0, .L25+12
 445              	.LVL35:
 234:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 446              		.loc 1 234 21 view .LVU72
 447 001c 2023     		movs	r3, #32
 448 001e 8367     		str	r3, [r0, #120]
 235:Core/Src/fsm.c ****       {
 449              		.loc 1 235 7 is_stmt 1 view .LVU73
 235:Core/Src/fsm.c ****       {
 450              		.loc 1 235 11 is_stmt 0 view .LVU74
 451 0020 92B2     		uxth	r2, r2
 452              	.LVL36:
 235:Core/Src/fsm.c ****       {
 453              		.loc 1 235 11 view .LVU75
 454 0022 4433     		adds	r3, r3, #68
 455 0024 0349     		ldr	r1, .L25+8
 456 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 457              	.LVL37:
 238:Core/Src/fsm.c ****     }
 458              		.loc 1 238 7 is_stmt 1 view .LVU76
 241:Core/Src/fsm.c **** }
 459              		.loc 1 241 5 view .LVU77
 460 002a F5E7     		b	.L22
 461              	.L26:
 462              		.align	2
 463              	.L25:
 464 002c 00000000 		.word	.LANCHOR4
 465 0030 00000000 		.word	.LC8
 466 0034 00000000 		.word	.LANCHOR5
 467 0038 00000000 		.word	huart2
 468              		.cfi_endproc
 469              	.LFE54:
 471              		.section	.text.FSM_step,"ax",%progbits
 472              		.align	1
 473              		.global	FSM_step
 474              		.syntax unified
 475              		.code	16
 476              		.thumb_func
 478              	FSM_step:
 479              	.LVL38:
 480              	.LFB52:
 157:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 481              		.loc 1 157 1 view -0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 157:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 485              		.loc 1 157 1 is_stmt 0 view .LVU79
 486 0000 10B5     		push	{r4, lr}
 487              	.LCFI7:
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 4, -8
 490              		.cfi_offset 14, -4
 158:Core/Src/fsm.c **** 
 491              		.loc 1 158 3 is_stmt 1 view .LVU80
 161:Core/Src/fsm.c ****   {
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 14


 492              		.loc 1 161 3 view .LVU81
 172:Core/Src/fsm.c ****   {
 493              		.loc 1 172 3 view .LVU82
 172:Core/Src/fsm.c ****   {
 494              		.loc 1 172 25 is_stmt 0 view .LVU83
 495 0002 0F4B     		ldr	r3, .L29
 496 0004 1A78     		ldrb	r2, [r3]
 172:Core/Src/fsm.c ****   {
 497              		.loc 1 172 6 view .LVU84
 498 0006 052A     		cmp	r2, #5
 499 0008 19D8     		bhi	.L27
 172:Core/Src/fsm.c ****   {
 500              		.loc 1 172 56 discriminator 1 view .LVU85
 501 000a 0E4B     		ldr	r3, .L29+4
 502 000c 1978     		ldrb	r1, [r3]
 172:Core/Src/fsm.c ****   {
 503              		.loc 1 172 39 discriminator 1 view .LVU86
 504 000e 0529     		cmp	r1, #5
 505 0010 15D8     		bhi	.L27
 172:Core/Src/fsm.c ****   {
 506              		.loc 1 172 94 discriminator 2 view .LVU87
 507 0012 5300     		lsls	r3, r2, #1
 508 0014 9B18     		adds	r3, r3, r2
 509 0016 5B00     		lsls	r3, r3, #1
 510 0018 5B18     		adds	r3, r3, r1
 511 001a 9B00     		lsls	r3, r3, #2
 512 001c 0A4A     		ldr	r2, .L29+8
 513 001e 9B58     		ldr	r3, [r3, r2]
 172:Core/Src/fsm.c ****   {
 514              		.loc 1 172 70 discriminator 2 view .LVU88
 515 0020 002B     		cmp	r3, #0
 516 0022 0CD0     		beq	.L27
 172:Core/Src/fsm.c ****   {
 517              		.loc 1 172 133 discriminator 3 view .LVU89
 518 0024 094A     		ldr	r2, .L29+12
 519 0026 1278     		ldrb	r2, [r2]
 172:Core/Src/fsm.c ****   {
 520              		.loc 1 172 117 discriminator 3 view .LVU90
 521 0028 9142     		cmp	r1, r2
 522 002a 08D0     		beq	.L27
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 523              		.loc 1 175 7 is_stmt 1 view .LVU91
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 524              		.loc 1 175 27 is_stmt 0 view .LVU92
 525 002c 9847     		blx	r3
 526              	.LVL39:
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 527              		.loc 1 175 24 view .LVU93
 528 002e 044B     		ldr	r3, .L29
 529 0030 1870     		strb	r0, [r3]
 176:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 530              		.loc 1 176 7 is_stmt 1 view .LVU94
 176:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 531              		.loc 1 176 16 is_stmt 0 view .LVU95
 532 0032 044B     		ldr	r3, .L29+4
 533 0034 1A78     		ldrb	r2, [r3]
 534 0036 054B     		ldr	r3, .L29+12
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 15


 535 0038 1A70     		strb	r2, [r3]
 177:Core/Src/fsm.c ****   }
 536              		.loc 1 177 7 is_stmt 1 view .LVU96
 537 003a FFF7FEFF 		bl	sendStateMsg
 538              	.LVL40:
 182:Core/Src/fsm.c **** 
 539              		.loc 1 182 3 view .LVU97
 185:Core/Src/fsm.c **** }
 540              		.loc 1 185 3 view .LVU98
 541              	.L27:
 186:Core/Src/fsm.c **** 
 542              		.loc 1 186 1 is_stmt 0 view .LVU99
 543              		@ sp needed
 544 003e 10BD     		pop	{r4, pc}
 545              	.L30:
 546              		.align	2
 547              	.L29:
 548 0040 00000000 		.word	.LANCHOR2
 549 0044 00000000 		.word	.LANCHOR3
 550 0048 00000000 		.word	FSM.2
 551 004c 00000000 		.word	.LANCHOR6
 552              		.cfi_endproc
 553              	.LFE52:
 555              		.section	.text.nextEventFromState,"ax",%progbits
 556              		.align	1
 557              		.global	nextEventFromState
 558              		.syntax unified
 559              		.code	16
 560              		.thumb_func
 562              	nextEventFromState:
 563              	.LVL41:
 564              	.LFB55:
 243:Core/Src/fsm.c **** 
 244:Core/Src/fsm.c **** eFsmEvent nextEventFromState(eFsmState state)
 245:Core/Src/fsm.c **** {
 565              		.loc 1 245 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		@ link register save eliminated.
 246:Core/Src/fsm.c ****   // Next state
 247:Core/Src/fsm.c ****   switch (state)
 570              		.loc 1 247 3 view .LVU101
 571 0000 0628     		cmp	r0, #6
 572 0002 0FD8     		bhi	.L32
 573 0004 8000     		lsls	r0, r0, #2
 574              	.LVL42:
 575              		.loc 1 247 3 is_stmt 0 view .LVU102
 576 0006 094B     		ldr	r3, .L42
 577 0008 1B58     		ldr	r3, [r3, r0]
 578 000a 9F46     		mov	pc, r3
 579              		.section	.rodata.nextEventFromState,"a",%progbits
 580              		.align	2
 581              	.L34:
 582 0000 0C000000 		.word	.L40
 583 0004 28000000 		.word	.L41
 584 0008 10000000 		.word	.L38
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 16


 585 000c 14000000 		.word	.L37
 586 0010 18000000 		.word	.L36
 587 0014 1C000000 		.word	.L35
 588 0018 20000000 		.word	.L33
 589              		.section	.text.nextEventFromState
 590              	.L40:
 591 000c 0120     		movs	r0, #1
 592              	.L39:
 248:Core/Src/fsm.c ****   {
 249:Core/Src/fsm.c ****   case Idle_State:
 250:Core/Src/fsm.c ****     return Arm_Event;
 251:Core/Src/fsm.c ****     break;
 252:Core/Src/fsm.c **** 
 253:Core/Src/fsm.c ****   case Standby_State:
 254:Core/Src/fsm.c ****     return Launch_Event;
 255:Core/Src/fsm.c ****     break;
 256:Core/Src/fsm.c **** 
 257:Core/Src/fsm.c ****   case Igniter_On_State:
 258:Core/Src/fsm.c ****     return Open_Valve_Timer_Event;
 259:Core/Src/fsm.c ****     break;
 260:Core/Src/fsm.c **** 
 261:Core/Src/fsm.c ****   case Valve_Open_State:
 262:Core/Src/fsm.c ****     return Stop_Igniter_Timer_Event;
 263:Core/Src/fsm.c ****     break;
 264:Core/Src/fsm.c **** 
 265:Core/Src/fsm.c ****   case Igniter_Off_State:
 266:Core/Src/fsm.c ****     return Last_Event;
 267:Core/Src/fsm.c ****     break;
 268:Core/Src/fsm.c **** 
 269:Core/Src/fsm.c ****   case Aborted_State:
 270:Core/Src/fsm.c ****     return Last_Event;
 271:Core/Src/fsm.c ****     break;
 272:Core/Src/fsm.c **** 
 273:Core/Src/fsm.c ****   case Last_State:
 274:Core/Src/fsm.c ****     return Reset_Event;
 275:Core/Src/fsm.c ****     break;
 276:Core/Src/fsm.c **** 
 277:Core/Src/fsm.c ****   default:
 278:Core/Src/fsm.c ****     break;
 279:Core/Src/fsm.c ****   }
 280:Core/Src/fsm.c **** 
 281:Core/Src/fsm.c ****   return 6;
 282:Core/Src/fsm.c **** }
 593              		.loc 1 282 1 view .LVU103
 594              		@ sp needed
 595 000e 7047     		bx	lr
 596              	.L38:
 255:Core/Src/fsm.c **** 
 597              		.loc 1 255 5 is_stmt 1 view .LVU104
 258:Core/Src/fsm.c ****     break;
 598              		.loc 1 258 5 view .LVU105
 258:Core/Src/fsm.c ****     break;
 599              		.loc 1 258 12 is_stmt 0 view .LVU106
 600 0010 0320     		movs	r0, #3
 601 0012 FCE7     		b	.L39
 602              	.L37:
 259:Core/Src/fsm.c **** 
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 17


 603              		.loc 1 259 5 is_stmt 1 view .LVU107
 262:Core/Src/fsm.c ****     break;
 604              		.loc 1 262 5 view .LVU108
 262:Core/Src/fsm.c ****     break;
 605              		.loc 1 262 12 is_stmt 0 view .LVU109
 606 0014 0420     		movs	r0, #4
 607 0016 FAE7     		b	.L39
 608              	.L36:
 263:Core/Src/fsm.c **** 
 609              		.loc 1 263 5 is_stmt 1 view .LVU110
 266:Core/Src/fsm.c ****     break;
 610              		.loc 1 266 5 view .LVU111
 266:Core/Src/fsm.c ****     break;
 611              		.loc 1 266 12 is_stmt 0 view .LVU112
 612 0018 0620     		movs	r0, #6
 613 001a F8E7     		b	.L39
 614              	.L35:
 267:Core/Src/fsm.c **** 
 615              		.loc 1 267 5 is_stmt 1 view .LVU113
 270:Core/Src/fsm.c ****     break;
 616              		.loc 1 270 5 view .LVU114
 270:Core/Src/fsm.c ****     break;
 617              		.loc 1 270 12 is_stmt 0 view .LVU115
 618 001c 0620     		movs	r0, #6
 619 001e F6E7     		b	.L39
 620              	.L33:
 271:Core/Src/fsm.c **** 
 621              		.loc 1 271 5 is_stmt 1 view .LVU116
 274:Core/Src/fsm.c ****     break;
 622              		.loc 1 274 5 view .LVU117
 274:Core/Src/fsm.c ****     break;
 623              		.loc 1 274 12 is_stmt 0 view .LVU118
 624 0020 0520     		movs	r0, #5
 625 0022 F4E7     		b	.L39
 626              	.LVL43:
 627              	.L32:
 275:Core/Src/fsm.c **** 
 628              		.loc 1 275 5 is_stmt 1 view .LVU119
 278:Core/Src/fsm.c ****   }
 629              		.loc 1 278 5 view .LVU120
 281:Core/Src/fsm.c **** }
 630              		.loc 1 281 3 view .LVU121
 281:Core/Src/fsm.c **** }
 631              		.loc 1 281 10 is_stmt 0 view .LVU122
 632 0024 0620     		movs	r0, #6
 633              	.LVL44:
 281:Core/Src/fsm.c **** }
 634              		.loc 1 281 10 view .LVU123
 635 0026 F2E7     		b	.L39
 636              	.L41:
 254:Core/Src/fsm.c ****     break;
 637              		.loc 1 254 12 view .LVU124
 638 0028 0220     		movs	r0, #2
 639 002a F0E7     		b	.L39
 640              	.L43:
 641              		.align	2
 642              	.L42:
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 18


 643 002c 00000000 		.word	.L34
 644              		.cfi_endproc
 645              	.LFE55:
 647              		.section	.rodata.FSM_reciveCMD.str1.4,"aMS",%progbits,1
 648              		.align	2
 649              	.LC17:
 650 0000 0A00     		.ascii	"\012\000"
 651              		.section	.text.FSM_reciveCMD,"ax",%progbits
 652              		.align	1
 653              		.global	FSM_reciveCMD
 654              		.syntax unified
 655              		.code	16
 656              		.thumb_func
 658              	FSM_reciveCMD:
 659              	.LVL45:
 660              	.LFB53:
 189:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 661              		.loc 1 189 1 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 8
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 189:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 665              		.loc 1 189 1 is_stmt 0 view .LVU126
 666 0000 30B5     		push	{r4, r5, lr}
 667              	.LCFI8:
 668              		.cfi_def_cfa_offset 12
 669              		.cfi_offset 4, -12
 670              		.cfi_offset 5, -8
 671              		.cfi_offset 14, -4
 672 0002 83B0     		sub	sp, sp, #12
 673              	.LCFI9:
 674              		.cfi_def_cfa_offset 24
 675 0004 0400     		movs	r4, r0
 190:Core/Src/fsm.c **** 
 676              		.loc 1 190 3 is_stmt 1 view .LVU127
 190:Core/Src/fsm.c **** 
 677              		.loc 1 190 11 is_stmt 0 view .LVU128
 678 0006 0023     		movs	r3, #0
 679 0008 6A46     		mov	r2, sp
 680 000a D371     		strb	r3, [r2, #7]
 192:Core/Src/fsm.c **** 
 681              		.loc 1 192 3 is_stmt 1 view .LVU129
 682 000c 6433     		adds	r3, r3, #100
 683 000e 0122     		movs	r2, #1
 684 0010 6946     		mov	r1, sp
 685 0012 0731     		adds	r1, r1, #7
 686 0014 FFF7FEFF 		bl	HAL_UART_Receive
 687              	.LVL46:
 195:Core/Src/fsm.c ****   {
 688              		.loc 1 195 3 view .LVU130
 195:Core/Src/fsm.c ****   {
 689              		.loc 1 195 14 is_stmt 0 view .LVU131
 690 0018 6B46     		mov	r3, sp
 691 001a DB79     		ldrb	r3, [r3, #7]
 195:Core/Src/fsm.c ****   {
 692              		.loc 1 195 6 view .LVU132
 693 001c 002B     		cmp	r3, #0
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 19


 694 001e 01D0     		beq	.L44
 195:Core/Src/fsm.c ****   {
 695              		.loc 1 195 19 discriminator 1 view .LVU133
 696 0020 0A2B     		cmp	r3, #10
 697 0022 01D1     		bne	.L47
 698              	.L44:
 213:Core/Src/fsm.c **** 
 699              		.loc 1 213 1 view .LVU134
 700 0024 03B0     		add	sp, sp, #12
 701              		@ sp needed
 702              	.LVL47:
 213:Core/Src/fsm.c **** 
 703              		.loc 1 213 1 view .LVU135
 704 0026 30BD     		pop	{r4, r5, pc}
 705              	.LVL48:
 706              	.L47:
 197:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, "\n", 2, 50);
 707              		.loc 1 197 5 is_stmt 1 view .LVU136
 708 0028 6B46     		mov	r3, sp
 709 002a DD1D     		adds	r5, r3, #7
 710 002c 3223     		movs	r3, #50
 711 002e 0122     		movs	r2, #1
 712 0030 2900     		movs	r1, r5
 713 0032 2000     		movs	r0, r4
 714 0034 FFF7FEFF 		bl	HAL_UART_Transmit
 715              	.LVL49:
 198:Core/Src/fsm.c **** 
 716              		.loc 1 198 5 view .LVU137
 717 0038 3223     		movs	r3, #50
 718 003a 0222     		movs	r2, #2
 719 003c 0C49     		ldr	r1, .L49
 720 003e 2000     		movs	r0, r4
 721 0040 FFF7FEFF 		bl	HAL_UART_Transmit
 722              	.LVL50:
 200:Core/Src/fsm.c ****     {
 723              		.loc 1 200 5 view .LVU138
 200:Core/Src/fsm.c ****     {
 724              		.loc 1 200 24 is_stmt 0 view .LVU139
 725 0044 2B78     		ldrb	r3, [r5]
 726 0046 1800     		movs	r0, r3
 727 0048 3038     		subs	r0, r0, #48
 728 004a C0B2     		uxtb	r0, r0
 200:Core/Src/fsm.c ****     {
 729              		.loc 1 200 8 view .LVU140
 730 004c 0628     		cmp	r0, #6
 731 004e 0AD9     		bls	.L48
 206:Core/Src/fsm.c ****     {
 732              		.loc 1 206 10 is_stmt 1 view .LVU141
 206:Core/Src/fsm.c ****     {
 733              		.loc 1 206 13 is_stmt 0 view .LVU142
 734 0050 372B     		cmp	r3, #55
 735 0052 E7D1     		bne	.L44
 206:Core/Src/fsm.c ****     {
 736              		.loc 1 206 49 discriminator 1 view .LVU143
 737 0054 074B     		ldr	r3, .L49+4
 738 0056 1878     		ldrb	r0, [r3]
 206:Core/Src/fsm.c ****     {
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 20


 739              		.loc 1 206 29 discriminator 1 view .LVU144
 740 0058 0428     		cmp	r0, #4
 741 005a E3D0     		beq	.L44
 208:Core/Src/fsm.c ****     }
 742              		.loc 1 208 7 is_stmt 1 view .LVU145
 743 005c FFF7FEFF 		bl	nextEventFromState
 744              	.LVL51:
 745 0060 FFF7FEFF 		bl	FSM_sendEvent
 746              	.LVL52:
 212:Core/Src/fsm.c **** }
 747              		.loc 1 212 3 view .LVU146
 748 0064 DEE7     		b	.L44
 749              	.L48:
 203:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 750              		.loc 1 203 7 view .LVU147
 203:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 751              		.loc 1 203 14 is_stmt 0 view .LVU148
 752 0066 2870     		strb	r0, [r5]
 204:Core/Src/fsm.c ****     }
 753              		.loc 1 204 7 is_stmt 1 view .LVU149
 754 0068 FFF7FEFF 		bl	FSM_sendEvent
 755              	.LVL53:
 756 006c DAE7     		b	.L44
 757              	.L50:
 758 006e C046     		.align	2
 759              	.L49:
 760 0070 00000000 		.word	.LC17
 761 0074 00000000 		.word	.LANCHOR2
 762              		.cfi_endproc
 763              	.LFE53:
 765              		.section	.text.eventToQue,"ax",%progbits
 766              		.align	1
 767              		.global	eventToQue
 768              		.syntax unified
 769              		.code	16
 770              		.thumb_func
 772              	eventToQue:
 773              	.LVL54:
 774              	.LFB56:
 283:Core/Src/fsm.c **** 
 284:Core/Src/fsm.c **** void eventToQue(eFsmEvent Event)
 285:Core/Src/fsm.c **** {
 775              		.loc 1 285 1 view -0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 286:Core/Src/fsm.c ****     
 287:Core/Src/fsm.c **** }
 780              		.loc 1 287 1 view .LVU151
 781              		@ sp needed
 782 0000 7047     		bx	lr
 783              		.cfi_endproc
 784              	.LFE56:
 786              		.section	.bss.msgBuff.0,"aw",%nobits
 787              		.align	2
 788              		.set	.LANCHOR5,. + 0
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 21


 791              	msgBuff.0:
 792 0000 00000000 		.space	32
 792      00000000 
 792      00000000 
 792      00000000 
 792      00000000 
 793              		.section	.data.eFsmCurrentState,"aw"
 794              		.set	.LANCHOR2,. + 0
 797              	eFsmCurrentState:
 798 0000 06       		.byte	6
 799              		.section	.data.eFsmNewEvent,"aw"
 800              		.set	.LANCHOR3,. + 0
 803              	eFsmNewEvent:
 804 0000 06       		.byte	6
 805              		.section	.data.preEvent.1,"aw"
 806              		.set	.LANCHOR6,. + 0
 809              	preEvent.1:
 810 0000 06       		.byte	6
 811              		.section	.rodata.FSM.2,"a"
 812              		.align	2
 815              	FSM.2:
 816 0000 00000000 		.word	_errorHandler
 817 0004 00000000 		.word	_recivedArmHandler
 818 0008 00000000 		.space	12
 818      00000000 
 818      00000000 
 819 0014 00000000 		.word	_resetHandler
 820 0018 00000000 		.word	_errorHandler
 821 001c 00000000 		.space	4
 822 0020 00000000 		.word	_revicedLaunchHandler
 823 0024 00000000 		.space	8
 823      00000000 
 824 002c 00000000 		.word	_resetHandler
 825 0030 00000000 		.word	_errorHandler
 826 0034 00000000 		.space	8
 826      00000000 
 827 003c 00000000 		.word	_alarmOpenValveHandler
 828 0040 00000000 		.space	4
 829 0044 00000000 		.word	_resetHandler
 830 0048 00000000 		.word	_errorHandler
 831 004c 00000000 		.space	12
 831      00000000 
 831      00000000 
 832 0058 00000000 		.word	_alarmTurnOffIgniterHandler
 833 005c 00000000 		.word	_resetHandler
 834 0060 00000000 		.word	_errorHandler
 835 0064 00000000 		.space	16
 835      00000000 
 835      00000000 
 835      00000000 
 836 0074 00000000 		.word	_resetHandler
 837 0078 00000000 		.word	_errorHandler
 838 007c 00000000 		.space	16
 838      00000000 
 838      00000000 
 838      00000000 
 839 008c 00000000 		.word	_resetHandler
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 22


 840              		.section	.rodata.eFsmStateNames,"a"
 841              		.align	2
 842              		.set	.LANCHOR4,. + 0
 845              	eFsmStateNames:
 846 0000 49646C65 		.ascii	"Idle\000"
 846      00
 847 0005 00000000 		.space	7
 847      000000
 848 000c 5374616E 		.ascii	"Standby\000"
 848      64627900 
 849 0014 00000000 		.space	4
 850 0018 49676E69 		.ascii	"Igniter On\000"
 850      74657220 
 850      4F6E00
 851 0023 00       		.space	1
 852 0024 56616C76 		.ascii	"Valve Open\000"
 852      65204F70 
 852      656E00
 853 002f 00       		.space	1
 854 0030 49676E69 		.ascii	"Igniter Off\000"
 854      74657220 
 854      4F666600 
 855 003c 41626F72 		.ascii	"Aborted\000"
 855      74656400 
 856 0044 00000000 		.space	4
 857 0048 504C4143 		.ascii	"PLACEHOLDER\000"
 857      45484F4C 
 857      44455200 
 858              		.section	.rodata.errorMsg,"a"
 859              		.align	2
 860              		.set	.LANCHOR0,. + 0
 863              	errorMsg:
 864 0000 0D0A536F 		.ascii	"\015\012Somthing went wrong! MOVED TO ERROR STATE\015"
 864      6D746869 
 864      6E672077 
 864      656E7420 
 864      77726F6E 
 865 002c 0A00     		.ascii	"\012\000"
 866              		.section	.rodata.resetMsg,"a"
 867              		.align	2
 868              		.set	.LANCHOR1,. + 0
 871              	resetMsg:
 872 0000 0D0A5265 		.ascii	"\015\012Returned to idel state\015\012\000"
 872      7475726E 
 872      65642074 
 872      6F206964 
 872      656C2073 
 873              		.text
 874              	.Letext0:
 875              		.file 2 "c:\\users\\flynn\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xpa
 876              		.file 3 "c:\\users\\flynn\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xpa
 877              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l031xx.h"
 878              		.file 5 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 879              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 880              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 881              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 882              		.file 9 "Core/Inc/fsm.h"
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 23


 883              		.file 10 "c:\\users\\flynn\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xp
 884              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 885              		.file 12 "Core/Inc/pwm.h"
 886              		.file 13 "Core/Inc/usart.h"
ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsm.c
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:18     .text._recivedArmHandler:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:24     .text._recivedArmHandler:0000000000000000 _recivedArmHandler
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:56     .text._revicedLaunchHandler:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:62     .text._revicedLaunchHandler:0000000000000000 _revicedLaunchHandler
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:93     .text._alarmTurnOffIgniterHandler:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:99     .text._alarmTurnOffIgniterHandler:0000000000000000 _alarmTurnOffIgniterHandler
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:141    .text._errorHandler:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:147    .text._errorHandler:0000000000000000 _errorHandler
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:194    .text._errorHandler:0000000000000030 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:200    .text._alarmOpenValveHandler:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:206    .text._alarmOpenValveHandler:0000000000000000 _alarmOpenValveHandler
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:233    .text._alarmOpenValveHandler:000000000000000c $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:238    .text._resetHandler:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:244    .text._resetHandler:0000000000000000 _resetHandler
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:295    .text._resetHandler:0000000000000034 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:302    .text.FSM_init:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:308    .text.FSM_init:0000000000000000 FSM_init
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:327    .text.FSM_init:0000000000000008 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:332    .text.FSM_state:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:338    .text.FSM_state:0000000000000000 FSM_state
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:355    .text.FSM_state:0000000000000008 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:360    .text.FSM_sendEvent:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:366    .text.FSM_sendEvent:0000000000000000 FSM_sendEvent
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:385    .text.FSM_sendEvent:0000000000000008 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:390    .rodata.sendStateMsg.str1.4:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:394    .text.sendStateMsg:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:400    .text.sendStateMsg:0000000000000000 sendStateMsg
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:464    .text.sendStateMsg:000000000000002c $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:472    .text.FSM_step:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:478    .text.FSM_step:0000000000000000 FSM_step
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:548    .text.FSM_step:0000000000000040 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:815    .rodata.FSM.2:0000000000000000 FSM.2
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:556    .text.nextEventFromState:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:562    .text.nextEventFromState:0000000000000000 nextEventFromState
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:580    .rodata.nextEventFromState:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:643    .text.nextEventFromState:000000000000002c $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:648    .rodata.FSM_reciveCMD.str1.4:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:652    .text.FSM_reciveCMD:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:658    .text.FSM_reciveCMD:0000000000000000 FSM_reciveCMD
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:760    .text.FSM_reciveCMD:0000000000000070 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:766    .text.eventToQue:0000000000000000 $t
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:772    .text.eventToQue:0000000000000000 eventToQue
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:787    .bss.msgBuff.0:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:791    .bss.msgBuff.0:0000000000000000 msgBuff.0
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:797    .data.eFsmCurrentState:0000000000000000 eFsmCurrentState
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:803    .data.eFsmNewEvent:0000000000000000 eFsmNewEvent
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:809    .data.preEvent.1:0000000000000000 preEvent.1
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:812    .rodata.FSM.2:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:841    .rodata.eFsmStateNames:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:845    .rodata.eFsmStateNames:0000000000000000 eFsmStateNames
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:859    .rodata.errorMsg:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:863    .rodata.errorMsg:0000000000000000 errorMsg
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:867    .rodata.resetMsg:0000000000000000 $d
C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s:871    .rodata.resetMsg:0000000000000000 resetMsg

ARM GAS  C:\Users\flynn\AppData\Local\Temp\ccXMe5aj.s 			page 25


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_Delay
HAL_UART_Transmit_DMA
huart2
PWM1_setPos
sprintf
HAL_UART_Transmit
HAL_UART_Receive
