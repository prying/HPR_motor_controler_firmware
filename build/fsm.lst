ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"fsm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._recivedArmHandler,"ax",%progbits
  18              		.align	1
  19              		.global	_recivedArmHandler
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	_recivedArmHandler:
  25              	.LVL0:
  26              	.LFB44:
  27              		.file 1 "Core/Src/fsm.c"
   1:Core/Src/fsm.c **** /*
   2:Core/Src/fsm.c ****  * fsm.c
   3:Core/Src/fsm.c ****  *
   4:Core/Src/fsm.c ****  *  Created on: Mar 30, 2021
   5:Core/Src/fsm.c ****  *      Author: flynn
   6:Core/Src/fsm.c ****  *  based off https://aticleworld.com/state-machine-using-c/
   7:Core/Src/fsm.c ****  */
   8:Core/Src/fsm.c **** 
   9:Core/Src/fsm.c **** #include <stddef.h>
  10:Core/Src/fsm.c **** #include <stdio.h>
  11:Core/Src/fsm.c **** #include "fsm.h"
  12:Core/Src/fsm.c **** #include "usart.h"
  13:Core/Src/fsm.c **** #include "gpio.h"
  14:Core/Src/fsm.c **** #include "pwm.h"
  15:Core/Src/fsm.c **** 
  16:Core/Src/fsm.c **** // Defines
  17:Core/Src/fsm.c **** #define MSGBUFF_SIZE             32
  18:Core/Src/fsm.c **** #define ERROR_MSG_SIZE           30
  19:Core/Src/fsm.c **** #define IGN_CONTROL_OFF_DELAY    20 //ms
  20:Core/Src/fsm.c **** #define SERVO_CLOSED_ANGLE       0  //degrees
  21:Core/Src/fsm.c **** #define SERVO_OPEN_ANGLE         90 //degrees
  22:Core/Src/fsm.c **** 
  23:Core/Src/fsm.c **** #define RX_TIMEOUT  100
  24:Core/Src/fsm.c **** 
  25:Core/Src/fsm.c **** // Nasty global vars
  26:Core/Src/fsm.c **** static eFsmState  eFsmCurrentState = Last_State;
  27:Core/Src/fsm.c **** static eFsmEvent  eFsmNewEvent     = Last_Event;
  28:Core/Src/fsm.c **** 
  29:Core/Src/fsm.c **** static const char errorMsg[] = "\r\nSomthing went wrong! MOVED TO ERROR STATE\r\n";
  30:Core/Src/fsm.c **** static const char resetMsg[] = "\r\nReturned to idel state\r\n";
  31:Core/Src/fsm.c **** 
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 2


  32:Core/Src/fsm.c **** // Event handler function pointer
  33:Core/Src/fsm.c **** typedef eFsmState (*pfEventHandler) (eFsmPeripheriesData *sPeripheries);
  34:Core/Src/fsm.c **** 
  35:Core/Src/fsm.c **** 
  36:Core/Src/fsm.c **** // 2d array of fsm linkages that will return a function pointer
  37:Core/Src/fsm.c **** typedef eFsmState (*const afEventHandler[Last_State][Last_Event])(eFsmPeripheriesData *sPeripheries
  38:Core/Src/fsm.c **** 
  39:Core/Src/fsm.c **** // Private helper functions
  40:Core/Src/fsm.c **** //**************************************
  41:Core/Src/fsm.c **** 
  42:Core/Src/fsm.c **** // Anounce on UART that it has moved to a state
  43:Core/Src/fsm.c **** void sendStateMsg(eFsmState state);
  44:Core/Src/fsm.c **** 
  45:Core/Src/fsm.c **** // Returns the next event from current state given no errors;
  46:Core/Src/fsm.c **** eFsmEvent nextEventFromState(eFsmState state);
  47:Core/Src/fsm.c **** 
  48:Core/Src/fsm.c **** // Event handles
  49:Core/Src/fsm.c **** //**************************************
  50:Core/Src/fsm.c **** 
  51:Core/Src/fsm.c **** // When an error is detected call Error_Event and go to the aborted state
  52:Core/Src/fsm.c **** eFsmState _errorHandler(eFsmPeripheriesData *sPeripheries)
  53:Core/Src/fsm.c **** {
  54:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
  55:Core/Src/fsm.c ****     // Turn off igniter and power to the ignition sorce
  56:Core/Src/fsm.c ****     // Turn off IGN Control
  57:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
  58:Core/Src/fsm.c **** 
  59:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
  60:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
  61:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
  62:Core/Src/fsm.c **** 
  63:Core/Src/fsm.c ****     // Move valve to suitable position
  64:Core/Src/fsm.c ****     // TODO pwm control
  65:Core/Src/fsm.c **** 
  66:Core/Src/fsm.c ****     // Anounce over usart and i2c to let everyone know
  67:Core/Src/fsm.c ****     HAL_UART_Transmit_DMA(&huart2, (uint8_t *)errorMsg, sizeof(errorMsg) / sizeof(char));
  68:Core/Src/fsm.c ****     // TODO Some i2c related method
  69:Core/Src/fsm.c ****     return Aborted_State;
  70:Core/Src/fsm.c **** }
  71:Core/Src/fsm.c **** 
  72:Core/Src/fsm.c **** // Go from idle to standby
  73:Core/Src/fsm.c **** eFsmState _recivedArmHandler(eFsmPeripheriesData *sPeripheries)
  74:Core/Src/fsm.c **** {
  28              		.loc 1 74 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 74 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  75:Core/Src/fsm.c ****     // TODO turn on pwr supply for igiter (i.e. turn on the buck converter)
  76:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
  77:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_SET);
  38              		.loc 1 77 5 is_stmt 1 view .LVU2
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 3


  39 0002 A020     		movs	r0, #160
  40              	.LVL1:
  41              		.loc 1 77 5 is_stmt 0 view .LVU3
  42 0004 0122     		movs	r2, #1
  43 0006 8021     		movs	r1, #128
  44 0008 C005     		lsls	r0, r0, #23
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL2:
  78:Core/Src/fsm.c ****     return Standby_State;
  47              		.loc 1 78 5 is_stmt 1 view .LVU4
  79:Core/Src/fsm.c **** }
  48              		.loc 1 79 1 is_stmt 0 view .LVU5
  49 000e 0120     		movs	r0, #1
  50              		@ sp needed
  51 0010 10BD     		pop	{r4, pc}
  52              		.cfi_endproc
  53              	.LFE44:
  55              		.section	.text._revicedLaunchHandler,"ax",%progbits
  56              		.align	1
  57              		.global	_revicedLaunchHandler
  58              		.syntax unified
  59              		.code	16
  60              		.thumb_func
  62              	_revicedLaunchHandler:
  63              	.LVL3:
  64              	.LFB45:
  80:Core/Src/fsm.c **** 
  81:Core/Src/fsm.c **** // Turn igniter on
  82:Core/Src/fsm.c **** eFsmState _revicedLaunchHandler(eFsmPeripheriesData *sPeripheries)
  83:Core/Src/fsm.c **** {
  65              		.loc 1 83 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		.loc 1 83 1 is_stmt 0 view .LVU7
  70 0000 10B5     		push	{r4, lr}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
  84:Core/Src/fsm.c ****     // TODO turn on mosfet to allow current to travel to the igiter
  85:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_SET);
  75              		.loc 1 85 5 is_stmt 1 view .LVU8
  76 0002 A020     		movs	r0, #160
  77              	.LVL4:
  78              		.loc 1 85 5 is_stmt 0 view .LVU9
  79 0004 0122     		movs	r2, #1
  80 0006 4021     		movs	r1, #64
  81 0008 C005     		lsls	r0, r0, #23
  82 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL5:
  86:Core/Src/fsm.c ****     return Igniter_On_State;
  84              		.loc 1 86 5 is_stmt 1 view .LVU10
  87:Core/Src/fsm.c **** }
  85              		.loc 1 87 1 is_stmt 0 view .LVU11
  86 000e 0220     		movs	r0, #2
  87              		@ sp needed
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 4


  88 0010 10BD     		pop	{r4, pc}
  89              		.cfi_endproc
  90              	.LFE45:
  92              		.section	.text._alarmTurnOffIgniterHandler,"ax",%progbits
  93              		.align	1
  94              		.global	_alarmTurnOffIgniterHandler
  95              		.syntax unified
  96              		.code	16
  97              		.thumb_func
  99              	_alarmTurnOffIgniterHandler:
 100              	.LVL6:
 101              	.LFB47:
  88:Core/Src/fsm.c **** 
  89:Core/Src/fsm.c **** // Timer finishes counting to open clock
  90:Core/Src/fsm.c **** eFsmState _alarmOpenValveHandler(eFsmPeripheriesData *sPeripheries)
  91:Core/Src/fsm.c **** {
  92:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
  93:Core/Src/fsm.c ****     return Valve_Open_State;
  94:Core/Src/fsm.c **** }
  95:Core/Src/fsm.c **** 
  96:Core/Src/fsm.c **** // Timer finishes counting to turn igniter off
  97:Core/Src/fsm.c **** eFsmState _alarmTurnOffIgniterHandler(eFsmPeripheriesData *sPeripheries)
  98:Core/Src/fsm.c **** {
 102              		.loc 1 98 1 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		.loc 1 98 1 is_stmt 0 view .LVU13
 107 0000 10B5     		push	{r4, lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 4, -8
 111              		.cfi_offset 14, -4
  99:Core/Src/fsm.c ****     // TODO turn off mosfet and turn off pwr supply for igniter
 100:Core/Src/fsm.c ****     // Turn off IGN Control
 101:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
 112              		.loc 1 101 5 is_stmt 1 view .LVU14
 113 0002 A024     		movs	r4, #160
 114 0004 E405     		lsls	r4, r4, #23
 115 0006 0022     		movs	r2, #0
 116 0008 4021     		movs	r1, #64
 117 000a 2000     		movs	r0, r4
 118              	.LVL7:
 119              		.loc 1 101 5 is_stmt 0 view .LVU15
 120 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL8:
 102:Core/Src/fsm.c **** 
 103:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
 104:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
 122              		.loc 1 104 5 is_stmt 1 view .LVU16
 123 0010 1420     		movs	r0, #20
 124 0012 FFF7FEFF 		bl	HAL_Delay
 125              	.LVL9:
 105:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 126              		.loc 1 105 5 view .LVU17
 127 0016 0022     		movs	r2, #0
 128 0018 8021     		movs	r1, #128
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 5


 129 001a 2000     		movs	r0, r4
 130 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 131              	.LVL10:
 106:Core/Src/fsm.c **** 
 107:Core/Src/fsm.c ****     return Igniter_Off_State;
 132              		.loc 1 107 5 view .LVU18
 108:Core/Src/fsm.c **** }
 133              		.loc 1 108 1 is_stmt 0 view .LVU19
 134 0020 0420     		movs	r0, #4
 135              		@ sp needed
 136 0022 10BD     		pop	{r4, pc}
 137              		.cfi_endproc
 138              	.LFE47:
 140              		.section	.text._errorHandler,"ax",%progbits
 141              		.align	1
 142              		.global	_errorHandler
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 147              	_errorHandler:
 148              	.LVL11:
 149              	.LFB43:
  53:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
 150              		.loc 1 53 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
  53:Core/Src/fsm.c ****     // TODO turn everything off and to the safe position
 154              		.loc 1 53 1 is_stmt 0 view .LVU21
 155 0000 10B5     		push	{r4, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
  57:Core/Src/fsm.c **** 
 160              		.loc 1 57 5 is_stmt 1 view .LVU22
 161 0002 A024     		movs	r4, #160
 162 0004 E405     		lsls	r4, r4, #23
 163 0006 0022     		movs	r2, #0
 164 0008 4021     		movs	r1, #64
 165 000a 2000     		movs	r0, r4
 166              	.LVL12:
  57:Core/Src/fsm.c **** 
 167              		.loc 1 57 5 is_stmt 0 view .LVU23
 168 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 169              	.LVL13:
  60:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 170              		.loc 1 60 5 is_stmt 1 view .LVU24
 171 0010 1420     		movs	r0, #20
 172 0012 FFF7FEFF 		bl	HAL_Delay
 173              	.LVL14:
  61:Core/Src/fsm.c **** 
 174              		.loc 1 61 5 view .LVU25
 175 0016 0022     		movs	r2, #0
 176 0018 8021     		movs	r1, #128
 177 001a 2000     		movs	r0, r4
 178 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 6


 179              	.LVL15:
  67:Core/Src/fsm.c ****     // TODO Some i2c related method
 180              		.loc 1 67 5 view .LVU26
 181 0020 2E22     		movs	r2, #46
 182 0022 0349     		ldr	r1, .L5
 183 0024 0348     		ldr	r0, .L5+4
 184 0026 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 185              	.LVL16:
  69:Core/Src/fsm.c **** }
 186              		.loc 1 69 5 view .LVU27
  70:Core/Src/fsm.c **** 
 187              		.loc 1 70 1 is_stmt 0 view .LVU28
 188 002a 0520     		movs	r0, #5
 189              		@ sp needed
 190 002c 10BD     		pop	{r4, pc}
 191              	.L6:
 192 002e C046     		.align	2
 193              	.L5:
 194 0030 00000000 		.word	.LANCHOR0
 195 0034 00000000 		.word	huart2
 196              		.cfi_endproc
 197              	.LFE43:
 199              		.section	.text._alarmOpenValveHandler,"ax",%progbits
 200              		.align	1
 201              		.global	_alarmOpenValveHandler
 202              		.syntax unified
 203              		.code	16
 204              		.thumb_func
 206              	_alarmOpenValveHandler:
 207              	.LVL17:
 208              	.LFB46:
  91:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
 209              		.loc 1 91 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
  91:Core/Src/fsm.c ****     PWM1_setPos(SERVO_OPEN_ANGLE);
 213              		.loc 1 91 1 is_stmt 0 view .LVU30
 214 0000 10B5     		push	{r4, lr}
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
  92:Core/Src/fsm.c ****     return Valve_Open_State;
 219              		.loc 1 92 5 is_stmt 1 view .LVU31
 220 0002 0248     		ldr	r0, .L8
 221              	.LVL18:
  92:Core/Src/fsm.c ****     return Valve_Open_State;
 222              		.loc 1 92 5 is_stmt 0 view .LVU32
 223 0004 FFF7FEFF 		bl	PWM1_setPos
 224              	.LVL19:
  93:Core/Src/fsm.c **** }
 225              		.loc 1 93 5 is_stmt 1 view .LVU33
  94:Core/Src/fsm.c **** 
 226              		.loc 1 94 1 is_stmt 0 view .LVU34
 227 0008 0320     		movs	r0, #3
 228              		@ sp needed
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 7


 229 000a 10BD     		pop	{r4, pc}
 230              	.L9:
 231              		.align	2
 232              	.L8:
 233 000c 0000B442 		.word	1119092736
 234              		.cfi_endproc
 235              	.LFE46:
 237              		.section	.text._resetHandler,"ax",%progbits
 238              		.align	1
 239              		.global	_resetHandler
 240              		.syntax unified
 241              		.code	16
 242              		.thumb_func
 244              	_resetHandler:
 245              	.LVL20:
 246              	.LFB48:
 109:Core/Src/fsm.c **** 
 110:Core/Src/fsm.c **** // When in the aborted state it can be reset
 111:Core/Src/fsm.c **** eFsmState _resetHandler(eFsmPeripheriesData *sPeripheries)
 112:Core/Src/fsm.c **** {
 247              		.loc 1 112 1 is_stmt 1 view -0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		.loc 1 112 1 is_stmt 0 view .LVU36
 252 0000 10B5     		push	{r4, lr}
 253              	.LCFI5:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 14, -4
 113:Core/Src/fsm.c ****     // TODO move all vars needed to be in the idle state
 114:Core/Src/fsm.c **** 
 115:Core/Src/fsm.c ****     // Turn off IGN Control
 116:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_CONTROL_GPIO_Port, IGN_CONTROL_Pin, GPIO_PIN_RESET);
 257              		.loc 1 116 5 is_stmt 1 view .LVU37
 258 0002 A024     		movs	r4, #160
 259 0004 E405     		lsls	r4, r4, #23
 260 0006 0022     		movs	r2, #0
 261 0008 4021     		movs	r1, #64
 262 000a 2000     		movs	r0, r4
 263              	.LVL21:
 264              		.loc 1 116 5 is_stmt 0 view .LVU38
 265 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 266              	.LVL22:
 117:Core/Src/fsm.c **** 
 118:Core/Src/fsm.c ****     // Turn on the buck converter for the igniter
 119:Core/Src/fsm.c ****     HAL_Delay(IGN_CONTROL_OFF_DELAY);
 267              		.loc 1 119 5 is_stmt 1 view .LVU39
 268 0010 1420     		movs	r0, #20
 269 0012 FFF7FEFF 		bl	HAL_Delay
 270              	.LVL23:
 120:Core/Src/fsm.c ****     HAL_GPIO_WritePin(IGN_PWR_GPIO_Port, IGN_PWR_Pin, GPIO_PIN_RESET);
 271              		.loc 1 120 5 view .LVU40
 272 0016 0022     		movs	r2, #0
 273 0018 8021     		movs	r1, #128
 274 001a 2000     		movs	r0, r4
 275 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 8


 276              	.LVL24:
 121:Core/Src/fsm.c **** 
 122:Core/Src/fsm.c ****     // Move valve to suitable position
 123:Core/Src/fsm.c ****     PWM1_setPos(SERVO_CLOSED_ANGLE);
 277              		.loc 1 123 5 view .LVU41
 278 0020 0020     		movs	r0, #0
 279 0022 FFF7FEFF 		bl	PWM1_setPos
 280              	.LVL25:
 124:Core/Src/fsm.c **** 
 125:Core/Src/fsm.c ****     // Anounce over usart and i2c to let everyone know
 126:Core/Src/fsm.c ****     HAL_UART_Transmit_DMA(&huart2, (uint8_t *)resetMsg, sizeof(resetMsg) / sizeof(char));
 281              		.loc 1 126 5 view .LVU42
 282 0026 1B22     		movs	r2, #27
 283 0028 0249     		ldr	r1, .L11
 284 002a 0348     		ldr	r0, .L11+4
 285 002c FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 286              	.LVL26:
 127:Core/Src/fsm.c **** 
 128:Core/Src/fsm.c ****     return Idle_State;
 287              		.loc 1 128 5 view .LVU43
 129:Core/Src/fsm.c **** }
 288              		.loc 1 129 1 is_stmt 0 view .LVU44
 289 0030 0020     		movs	r0, #0
 290              		@ sp needed
 291 0032 10BD     		pop	{r4, pc}
 292              	.L12:
 293              		.align	2
 294              	.L11:
 295 0034 00000000 		.word	.LANCHOR1
 296 0038 00000000 		.word	huart2
 297              		.cfi_endproc
 298              	.LFE48:
 300              		.section	.text.FSM_init,"ax",%progbits
 301              		.align	1
 302              		.global	FSM_init
 303              		.syntax unified
 304              		.code	16
 305              		.thumb_func
 307              	FSM_init:
 308              	.LFB49:
 130:Core/Src/fsm.c **** 
 131:Core/Src/fsm.c **** // Public function
 132:Core/Src/fsm.c **** //*****************************************
 133:Core/Src/fsm.c **** 
 134:Core/Src/fsm.c **** // Initialize finite state machine
 135:Core/Src/fsm.c **** void FSM_init()
 136:Core/Src/fsm.c **** {
 309              		.loc 1 136 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 137:Core/Src/fsm.c ****     eFsmCurrentState = Idle_State;
 314              		.loc 1 137 5 view .LVU46
 315              		.loc 1 137 22 is_stmt 0 view .LVU47
 316 0000 014B     		ldr	r3, .L14
 317 0002 0022     		movs	r2, #0
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 9


 318 0004 1A70     		strb	r2, [r3]
 138:Core/Src/fsm.c ****     return;
 319              		.loc 1 138 5 is_stmt 1 view .LVU48
 139:Core/Src/fsm.c **** }
 320              		.loc 1 139 1 is_stmt 0 view .LVU49
 321              		@ sp needed
 322 0006 7047     		bx	lr
 323              	.L15:
 324              		.align	2
 325              	.L14:
 326 0008 00000000 		.word	.LANCHOR2
 327              		.cfi_endproc
 328              	.LFE49:
 330              		.section	.text.FSM_state,"ax",%progbits
 331              		.align	1
 332              		.global	FSM_state
 333              		.syntax unified
 334              		.code	16
 335              		.thumb_func
 337              	FSM_state:
 338              	.LFB50:
 140:Core/Src/fsm.c **** 
 141:Core/Src/fsm.c **** // Get current state;
 142:Core/Src/fsm.c **** eFsmState FSM_state()
 143:Core/Src/fsm.c **** {
 339              		.loc 1 143 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 144:Core/Src/fsm.c ****     return eFsmCurrentState;
 344              		.loc 1 144 5 view .LVU51
 345              		.loc 1 144 12 is_stmt 0 view .LVU52
 346 0000 014B     		ldr	r3, .L17
 347 0002 1878     		ldrb	r0, [r3]
 145:Core/Src/fsm.c **** }
 348              		.loc 1 145 1 view .LVU53
 349              		@ sp needed
 350 0004 7047     		bx	lr
 351              	.L18:
 352 0006 C046     		.align	2
 353              	.L17:
 354 0008 00000000 		.word	.LANCHOR2
 355              		.cfi_endproc
 356              	.LFE50:
 358              		.section	.text.FSM_sendEvent,"ax",%progbits
 359              		.align	1
 360              		.global	FSM_sendEvent
 361              		.syntax unified
 362              		.code	16
 363              		.thumb_func
 365              	FSM_sendEvent:
 366              	.LVL27:
 367              	.LFB51:
 146:Core/Src/fsm.c **** 
 147:Core/Src/fsm.c **** // Get event
 148:Core/Src/fsm.c **** void FSM_sendEvent(eFsmEvent Event)
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 10


 149:Core/Src/fsm.c **** {
 368              		.loc 1 149 1 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 150:Core/Src/fsm.c ****     // TODO! validation ect;
 151:Core/Src/fsm.c ****     eFsmNewEvent = Event;
 373              		.loc 1 151 5 view .LVU55
 374              		.loc 1 151 18 is_stmt 0 view .LVU56
 375 0000 014B     		ldr	r3, .L20
 376 0002 1870     		strb	r0, [r3]
 152:Core/Src/fsm.c ****     return;
 377              		.loc 1 152 5 is_stmt 1 view .LVU57
 153:Core/Src/fsm.c **** }
 378              		.loc 1 153 1 is_stmt 0 view .LVU58
 379              		@ sp needed
 380 0004 7047     		bx	lr
 381              	.L21:
 382 0006 C046     		.align	2
 383              	.L20:
 384 0008 00000000 		.word	.LANCHOR3
 385              		.cfi_endproc
 386              	.LFE51:
 388              		.section	.rodata.sendStateMsg.str1.4,"aMS",%progbits,1
 389              		.align	2
 390              	.LC8:
 391 0000 53746174 		.ascii	"State: %s\012\000"
 391      653A2025 
 391      730A00
 392              		.section	.text.sendStateMsg,"ax",%progbits
 393              		.align	1
 394              		.global	sendStateMsg
 395              		.syntax unified
 396              		.code	16
 397              		.thumb_func
 399              	sendStateMsg:
 400              	.LVL28:
 401              	.LFB54:
 154:Core/Src/fsm.c **** 
 155:Core/Src/fsm.c **** // Step the finite state machines logic
 156:Core/Src/fsm.c **** void FSM_step(eFsmPeripheriesData *sPeripheries)
 157:Core/Src/fsm.c **** {
 158:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 159:Core/Src/fsm.c **** 
 160:Core/Src/fsm.c ****   // Setup linkages for the FSM               Might make a global if it is wasiting alot of loop re
 161:Core/Src/fsm.c ****   static afEventHandler FSM =
 162:Core/Src/fsm.c ****   {
 163:Core/Src/fsm.c ****       [Idle_State]        = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Arm_Ev
 164:Core/Src/fsm.c ****       [Standby_State]     = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Launch
 165:Core/Src/fsm.c ****       [Igniter_On_State]  = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Open_V
 166:Core/Src/fsm.c ****       [Valve_Open_State]  = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler, [Stop_I
 167:Core/Src/fsm.c ****       [Igniter_Off_State] = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler         
 168:Core/Src/fsm.c ****       [Aborted_State]     = {[Error_Event] = _errorHandler, [Reset_Event]  = _resetHandler         
 169:Core/Src/fsm.c ****   };
 170:Core/Src/fsm.c **** 
 171:Core/Src/fsm.c ****   // Validate that both state and event are valid and that there is a event handler at the event fo
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 11


 172:Core/Src/fsm.c ****   if ((eFsmCurrentState < Last_State) && (eFsmNewEvent < Last_Event) && FSM[eFsmCurrentState][eFsmN
 173:Core/Src/fsm.c ****   {
 174:Core/Src/fsm.c ****       // Call the event handler at the end of the function pointer
 175:Core/Src/fsm.c ****       eFsmCurrentState = (*FSM[eFsmCurrentState][eFsmNewEvent])(sPeripheries);
 176:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 177:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 178:Core/Src/fsm.c ****   }
 179:Core/Src/fsm.c ****   else
 180:Core/Src/fsm.c ****   {
 181:Core/Src/fsm.c ****       //TODO Maybe this could also trigger and abort???
 182:Core/Src/fsm.c ****   }
 183:Core/Src/fsm.c **** 
 184:Core/Src/fsm.c **** 
 185:Core/Src/fsm.c ****   return;
 186:Core/Src/fsm.c **** }
 187:Core/Src/fsm.c **** 
 188:Core/Src/fsm.c **** void FSM_reciveCMD(UART_HandleTypeDef * uartHandle)
 189:Core/Src/fsm.c **** {
 190:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 191:Core/Src/fsm.c **** 
 192:Core/Src/fsm.c ****   HAL_UART_Receive(uartHandle, &strBuf, 1, RX_TIMEOUT);
 193:Core/Src/fsm.c **** 
 194:Core/Src/fsm.c ****   // Check what code was recived
 195:Core/Src/fsm.c ****   if (strBuf != 0 && strBuf != '\n')
 196:Core/Src/fsm.c ****   {
 197:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, &strBuf, 1, 50);
 198:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, "\n", 2, 50);
 199:Core/Src/fsm.c **** 
 200:Core/Src/fsm.c ****     if ( '0' <= strBuf && strBuf <= '6')
 201:Core/Src/fsm.c ****     {
 202:Core/Src/fsm.c ****       // Convert to int
 203:Core/Src/fsm.c ****       strBuf -= 48;
 204:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 205:Core/Src/fsm.c ****     }
 206:Core/Src/fsm.c ****     else if ( strBuf == '7' && eFsmCurrentState != Igniter_Off_State)
 207:Core/Src/fsm.c ****     {
 208:Core/Src/fsm.c ****       FSM_sendEvent(nextEventFromState(eFsmCurrentState));
 209:Core/Src/fsm.c ****     }
 210:Core/Src/fsm.c ****   }
 211:Core/Src/fsm.c **** 
 212:Core/Src/fsm.c ****   return;
 213:Core/Src/fsm.c **** }
 214:Core/Src/fsm.c **** 
 215:Core/Src/fsm.c **** // Private helper function implementations
 216:Core/Src/fsm.c **** //*****************************************
 217:Core/Src/fsm.c **** 
 218:Core/Src/fsm.c **** // Anounce on UART that it has moved to a state
 219:Core/Src/fsm.c **** void sendStateMsg(eFsmState state)
 220:Core/Src/fsm.c **** {
 402              		.loc 1 220 1 is_stmt 1 view -0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              		.loc 1 220 1 is_stmt 0 view .LVU60
 407 0000 10B5     		push	{r4, lr}
 408              	.LCFI6:
 409              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 12


 410              		.cfi_offset 4, -8
 411              		.cfi_offset 14, -4
 221:Core/Src/fsm.c ****     // Needs to be a static becuase the memory is deallocated when this function is removed from th
 222:Core/Src/fsm.c ****     static char msgBuff[MSGBUFF_SIZE];
 412              		.loc 1 222 5 is_stmt 1 view .LVU61
 223:Core/Src/fsm.c ****     int n = 0;
 413              		.loc 1 223 5 view .LVU62
 414              	.LVL29:
 224:Core/Src/fsm.c **** 
 225:Core/Src/fsm.c ****     // TODO: make safe with snprintf
 226:Core/Src/fsm.c ****     n = sprintf(msgBuff, "State: %s\n", eFsmStateNames[state]);
 415              		.loc 1 226 5 view .LVU63
 416              		.loc 1 226 55 is_stmt 0 view .LVU64
 417 0002 4200     		lsls	r2, r0, #1
 418 0004 1218     		adds	r2, r2, r0
 419 0006 9200     		lsls	r2, r2, #2
 420 0008 0848     		ldr	r0, .L25
 421              	.LVL30:
 422              		.loc 1 226 55 view .LVU65
 423 000a 8218     		adds	r2, r0, r2
 424              		.loc 1 226 9 view .LVU66
 425 000c 0849     		ldr	r1, .L25+4
 426 000e 0948     		ldr	r0, .L25+8
 427 0010 FFF7FEFF 		bl	sprintf
 428              	.LVL31:
 429 0014 021E     		subs	r2, r0, #0
 430              	.LVL32:
 227:Core/Src/fsm.c ****     if (n <= 0)
 431              		.loc 1 227 5 is_stmt 1 view .LVU67
 432              		.loc 1 227 8 is_stmt 0 view .LVU68
 433 0016 00DC     		bgt	.L24
 434              	.LVL33:
 435              	.L22:
 228:Core/Src/fsm.c ****     {
 229:Core/Src/fsm.c ****         // Somthing went wrong BUT DONT CRASH
 230:Core/Src/fsm.c ****     }
 231:Core/Src/fsm.c ****     else
 232:Core/Src/fsm.c ****     {
 233:Core/Src/fsm.c ****       // Cursed code TODO: figure out why for reset and error event code get stuck on 33 (busy tx-i
 234:Core/Src/fsm.c ****       huart2.gState = HAL_UART_STATE_READY;
 235:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 236:Core/Src/fsm.c ****       {
 237:Core/Src/fsm.c **** 
 238:Core/Src/fsm.c ****       }
 239:Core/Src/fsm.c ****     }
 240:Core/Src/fsm.c **** 
 241:Core/Src/fsm.c ****     return;
 242:Core/Src/fsm.c **** }
 436              		.loc 1 242 1 view .LVU69
 437              		@ sp needed
 438 0018 10BD     		pop	{r4, pc}
 439              	.LVL34:
 440              	.L24:
 234:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 441              		.loc 1 234 7 is_stmt 1 view .LVU70
 234:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 442              		.loc 1 234 21 is_stmt 0 view .LVU71
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 13


 443 001a 0748     		ldr	r0, .L25+12
 444              	.LVL35:
 234:Core/Src/fsm.c ****       if (HAL_UART_Transmit(&huart2, (uint8_t *)msgBuff, n, 100) != HAL_OK)
 445              		.loc 1 234 21 view .LVU72
 446 001c 2023     		movs	r3, #32
 447 001e 8367     		str	r3, [r0, #120]
 235:Core/Src/fsm.c ****       {
 448              		.loc 1 235 7 is_stmt 1 view .LVU73
 235:Core/Src/fsm.c ****       {
 449              		.loc 1 235 11 is_stmt 0 view .LVU74
 450 0020 92B2     		uxth	r2, r2
 451              	.LVL36:
 235:Core/Src/fsm.c ****       {
 452              		.loc 1 235 11 view .LVU75
 453 0022 4433     		adds	r3, r3, #68
 454 0024 0349     		ldr	r1, .L25+8
 455 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 456              	.LVL37:
 238:Core/Src/fsm.c ****     }
 457              		.loc 1 238 7 is_stmt 1 view .LVU76
 241:Core/Src/fsm.c **** }
 458              		.loc 1 241 5 view .LVU77
 459 002a F5E7     		b	.L22
 460              	.L26:
 461              		.align	2
 462              	.L25:
 463 002c 00000000 		.word	.LANCHOR4
 464 0030 00000000 		.word	.LC8
 465 0034 00000000 		.word	.LANCHOR5
 466 0038 00000000 		.word	huart2
 467              		.cfi_endproc
 468              	.LFE54:
 470              		.section	.text.FSM_step,"ax",%progbits
 471              		.align	1
 472              		.global	FSM_step
 473              		.syntax unified
 474              		.code	16
 475              		.thumb_func
 477              	FSM_step:
 478              	.LVL38:
 479              	.LFB52:
 157:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 480              		.loc 1 157 1 view -0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 157:Core/Src/fsm.c ****   static eFsmEvent preEvent = Last_Event;
 484              		.loc 1 157 1 is_stmt 0 view .LVU79
 485 0000 10B5     		push	{r4, lr}
 486              	.LCFI7:
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 4, -8
 489              		.cfi_offset 14, -4
 158:Core/Src/fsm.c **** 
 490              		.loc 1 158 3 is_stmt 1 view .LVU80
 161:Core/Src/fsm.c ****   {
 491              		.loc 1 161 3 view .LVU81
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 14


 172:Core/Src/fsm.c ****   {
 492              		.loc 1 172 3 view .LVU82
 172:Core/Src/fsm.c ****   {
 493              		.loc 1 172 25 is_stmt 0 view .LVU83
 494 0002 0F4B     		ldr	r3, .L29
 495 0004 1A78     		ldrb	r2, [r3]
 172:Core/Src/fsm.c ****   {
 496              		.loc 1 172 6 view .LVU84
 497 0006 052A     		cmp	r2, #5
 498 0008 19D8     		bhi	.L27
 172:Core/Src/fsm.c ****   {
 499              		.loc 1 172 56 discriminator 1 view .LVU85
 500 000a 0E4B     		ldr	r3, .L29+4
 501 000c 1978     		ldrb	r1, [r3]
 172:Core/Src/fsm.c ****   {
 502              		.loc 1 172 39 discriminator 1 view .LVU86
 503 000e 0529     		cmp	r1, #5
 504 0010 15D8     		bhi	.L27
 172:Core/Src/fsm.c ****   {
 505              		.loc 1 172 94 discriminator 2 view .LVU87
 506 0012 5300     		lsls	r3, r2, #1
 507 0014 9B18     		adds	r3, r3, r2
 508 0016 5B00     		lsls	r3, r3, #1
 509 0018 5B18     		adds	r3, r3, r1
 510 001a 9B00     		lsls	r3, r3, #2
 511 001c 0A4A     		ldr	r2, .L29+8
 512 001e 9B58     		ldr	r3, [r3, r2]
 172:Core/Src/fsm.c ****   {
 513              		.loc 1 172 70 discriminator 2 view .LVU88
 514 0020 002B     		cmp	r3, #0
 515 0022 0CD0     		beq	.L27
 172:Core/Src/fsm.c ****   {
 516              		.loc 1 172 133 discriminator 3 view .LVU89
 517 0024 094A     		ldr	r2, .L29+12
 518 0026 1278     		ldrb	r2, [r2]
 172:Core/Src/fsm.c ****   {
 519              		.loc 1 172 117 discriminator 3 view .LVU90
 520 0028 9142     		cmp	r1, r2
 521 002a 08D0     		beq	.L27
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 522              		.loc 1 175 7 is_stmt 1 view .LVU91
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 523              		.loc 1 175 27 is_stmt 0 view .LVU92
 524 002c 9847     		blx	r3
 525              	.LVL39:
 175:Core/Src/fsm.c ****       preEvent = eFsmNewEvent;
 526              		.loc 1 175 24 view .LVU93
 527 002e 044B     		ldr	r3, .L29
 528 0030 1870     		strb	r0, [r3]
 176:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 529              		.loc 1 176 7 is_stmt 1 view .LVU94
 176:Core/Src/fsm.c ****       sendStateMsg(eFsmCurrentState);
 530              		.loc 1 176 16 is_stmt 0 view .LVU95
 531 0032 044B     		ldr	r3, .L29+4
 532 0034 1A78     		ldrb	r2, [r3]
 533 0036 054B     		ldr	r3, .L29+12
 534 0038 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 15


 177:Core/Src/fsm.c ****   }
 535              		.loc 1 177 7 is_stmt 1 view .LVU96
 536 003a FFF7FEFF 		bl	sendStateMsg
 537              	.LVL40:
 182:Core/Src/fsm.c **** 
 538              		.loc 1 182 3 view .LVU97
 185:Core/Src/fsm.c **** }
 539              		.loc 1 185 3 view .LVU98
 540              	.L27:
 186:Core/Src/fsm.c **** 
 541              		.loc 1 186 1 is_stmt 0 view .LVU99
 542              		@ sp needed
 543 003e 10BD     		pop	{r4, pc}
 544              	.L30:
 545              		.align	2
 546              	.L29:
 547 0040 00000000 		.word	.LANCHOR2
 548 0044 00000000 		.word	.LANCHOR3
 549 0048 00000000 		.word	FSM.2
 550 004c 00000000 		.word	.LANCHOR6
 551              		.cfi_endproc
 552              	.LFE52:
 554              		.section	.text.nextEventFromState,"ax",%progbits
 555              		.align	1
 556              		.global	nextEventFromState
 557              		.syntax unified
 558              		.code	16
 559              		.thumb_func
 561              	nextEventFromState:
 562              	.LVL41:
 563              	.LFB55:
 243:Core/Src/fsm.c **** 
 244:Core/Src/fsm.c **** eFsmEvent nextEventFromState(eFsmState state)
 245:Core/Src/fsm.c **** {
 564              		.loc 1 245 1 is_stmt 1 view -0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 246:Core/Src/fsm.c ****   // Next state
 247:Core/Src/fsm.c ****   switch (state)
 569              		.loc 1 247 3 view .LVU101
 570 0000 0628     		cmp	r0, #6
 571 0002 0FD8     		bhi	.L32
 572 0004 8000     		lsls	r0, r0, #2
 573              	.LVL42:
 574              		.loc 1 247 3 is_stmt 0 view .LVU102
 575 0006 094B     		ldr	r3, .L42
 576 0008 1B58     		ldr	r3, [r3, r0]
 577 000a 9F46     		mov	pc, r3
 578              		.section	.rodata.nextEventFromState,"a",%progbits
 579              		.align	2
 580              	.L34:
 581 0000 0C000000 		.word	.L40
 582 0004 28000000 		.word	.L41
 583 0008 10000000 		.word	.L38
 584 000c 14000000 		.word	.L37
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 16


 585 0010 18000000 		.word	.L36
 586 0014 1C000000 		.word	.L35
 587 0018 20000000 		.word	.L33
 588              		.section	.text.nextEventFromState
 589              	.L40:
 590 000c 0120     		movs	r0, #1
 591              	.L39:
 248:Core/Src/fsm.c ****   {
 249:Core/Src/fsm.c ****   case Idle_State:
 250:Core/Src/fsm.c ****     return Arm_Event;
 251:Core/Src/fsm.c ****     break;
 252:Core/Src/fsm.c **** 
 253:Core/Src/fsm.c ****   case Standby_State:
 254:Core/Src/fsm.c ****     return Launch_Event;
 255:Core/Src/fsm.c ****     break;
 256:Core/Src/fsm.c **** 
 257:Core/Src/fsm.c ****   case Igniter_On_State:
 258:Core/Src/fsm.c ****     return Open_Valve_Timer_Event;
 259:Core/Src/fsm.c ****     break;
 260:Core/Src/fsm.c **** 
 261:Core/Src/fsm.c ****   case Valve_Open_State:
 262:Core/Src/fsm.c ****     return Stop_Igniter_Timer_Event;
 263:Core/Src/fsm.c ****     break;
 264:Core/Src/fsm.c **** 
 265:Core/Src/fsm.c ****   case Igniter_Off_State:
 266:Core/Src/fsm.c ****     return Last_Event;
 267:Core/Src/fsm.c ****     break;
 268:Core/Src/fsm.c **** 
 269:Core/Src/fsm.c ****   case Aborted_State:
 270:Core/Src/fsm.c ****     return Last_Event;
 271:Core/Src/fsm.c ****     break;
 272:Core/Src/fsm.c **** 
 273:Core/Src/fsm.c ****   case Last_State:
 274:Core/Src/fsm.c ****     return Reset_Event;
 275:Core/Src/fsm.c ****     break;
 276:Core/Src/fsm.c **** 
 277:Core/Src/fsm.c ****   default:
 278:Core/Src/fsm.c ****     break;
 279:Core/Src/fsm.c ****   }
 280:Core/Src/fsm.c **** 
 281:Core/Src/fsm.c ****   return 6;
 282:Core/Src/fsm.c **** }
 592              		.loc 1 282 1 view .LVU103
 593              		@ sp needed
 594 000e 7047     		bx	lr
 595              	.L38:
 255:Core/Src/fsm.c **** 
 596              		.loc 1 255 5 is_stmt 1 view .LVU104
 258:Core/Src/fsm.c ****     break;
 597              		.loc 1 258 5 view .LVU105
 258:Core/Src/fsm.c ****     break;
 598              		.loc 1 258 12 is_stmt 0 view .LVU106
 599 0010 0320     		movs	r0, #3
 600 0012 FCE7     		b	.L39
 601              	.L37:
 259:Core/Src/fsm.c **** 
 602              		.loc 1 259 5 is_stmt 1 view .LVU107
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 17


 262:Core/Src/fsm.c ****     break;
 603              		.loc 1 262 5 view .LVU108
 262:Core/Src/fsm.c ****     break;
 604              		.loc 1 262 12 is_stmt 0 view .LVU109
 605 0014 0420     		movs	r0, #4
 606 0016 FAE7     		b	.L39
 607              	.L36:
 263:Core/Src/fsm.c **** 
 608              		.loc 1 263 5 is_stmt 1 view .LVU110
 266:Core/Src/fsm.c ****     break;
 609              		.loc 1 266 5 view .LVU111
 266:Core/Src/fsm.c ****     break;
 610              		.loc 1 266 12 is_stmt 0 view .LVU112
 611 0018 0620     		movs	r0, #6
 612 001a F8E7     		b	.L39
 613              	.L35:
 267:Core/Src/fsm.c **** 
 614              		.loc 1 267 5 is_stmt 1 view .LVU113
 270:Core/Src/fsm.c ****     break;
 615              		.loc 1 270 5 view .LVU114
 270:Core/Src/fsm.c ****     break;
 616              		.loc 1 270 12 is_stmt 0 view .LVU115
 617 001c 0620     		movs	r0, #6
 618 001e F6E7     		b	.L39
 619              	.L33:
 271:Core/Src/fsm.c **** 
 620              		.loc 1 271 5 is_stmt 1 view .LVU116
 274:Core/Src/fsm.c ****     break;
 621              		.loc 1 274 5 view .LVU117
 274:Core/Src/fsm.c ****     break;
 622              		.loc 1 274 12 is_stmt 0 view .LVU118
 623 0020 0520     		movs	r0, #5
 624 0022 F4E7     		b	.L39
 625              	.LVL43:
 626              	.L32:
 275:Core/Src/fsm.c **** 
 627              		.loc 1 275 5 is_stmt 1 view .LVU119
 278:Core/Src/fsm.c ****   }
 628              		.loc 1 278 5 view .LVU120
 281:Core/Src/fsm.c **** }
 629              		.loc 1 281 3 view .LVU121
 281:Core/Src/fsm.c **** }
 630              		.loc 1 281 10 is_stmt 0 view .LVU122
 631 0024 0620     		movs	r0, #6
 632              	.LVL44:
 281:Core/Src/fsm.c **** }
 633              		.loc 1 281 10 view .LVU123
 634 0026 F2E7     		b	.L39
 635              	.L41:
 254:Core/Src/fsm.c ****     break;
 636              		.loc 1 254 12 view .LVU124
 637 0028 0220     		movs	r0, #2
 638 002a F0E7     		b	.L39
 639              	.L43:
 640              		.align	2
 641              	.L42:
 642 002c 00000000 		.word	.L34
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 18


 643              		.cfi_endproc
 644              	.LFE55:
 646              		.section	.rodata.FSM_reciveCMD.str1.4,"aMS",%progbits,1
 647              		.align	2
 648              	.LC17:
 649 0000 0A00     		.ascii	"\012\000"
 650              		.section	.text.FSM_reciveCMD,"ax",%progbits
 651              		.align	1
 652              		.global	FSM_reciveCMD
 653              		.syntax unified
 654              		.code	16
 655              		.thumb_func
 657              	FSM_reciveCMD:
 658              	.LVL45:
 659              	.LFB53:
 189:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 660              		.loc 1 189 1 is_stmt 1 view -0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 8
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 189:Core/Src/fsm.c ****   uint8_t strBuf = 0;
 664              		.loc 1 189 1 is_stmt 0 view .LVU126
 665 0000 30B5     		push	{r4, r5, lr}
 666              	.LCFI8:
 667              		.cfi_def_cfa_offset 12
 668              		.cfi_offset 4, -12
 669              		.cfi_offset 5, -8
 670              		.cfi_offset 14, -4
 671 0002 83B0     		sub	sp, sp, #12
 672              	.LCFI9:
 673              		.cfi_def_cfa_offset 24
 674 0004 0400     		movs	r4, r0
 190:Core/Src/fsm.c **** 
 675              		.loc 1 190 3 is_stmt 1 view .LVU127
 190:Core/Src/fsm.c **** 
 676              		.loc 1 190 11 is_stmt 0 view .LVU128
 677 0006 0023     		movs	r3, #0
 678 0008 6A46     		mov	r2, sp
 679 000a D371     		strb	r3, [r2, #7]
 192:Core/Src/fsm.c **** 
 680              		.loc 1 192 3 is_stmt 1 view .LVU129
 681 000c 6433     		adds	r3, r3, #100
 682 000e 0122     		movs	r2, #1
 683 0010 6946     		mov	r1, sp
 684 0012 0731     		adds	r1, r1, #7
 685 0014 FFF7FEFF 		bl	HAL_UART_Receive
 686              	.LVL46:
 195:Core/Src/fsm.c ****   {
 687              		.loc 1 195 3 view .LVU130
 195:Core/Src/fsm.c ****   {
 688              		.loc 1 195 14 is_stmt 0 view .LVU131
 689 0018 6B46     		mov	r3, sp
 690 001a DB79     		ldrb	r3, [r3, #7]
 195:Core/Src/fsm.c ****   {
 691              		.loc 1 195 6 view .LVU132
 692 001c 002B     		cmp	r3, #0
 693 001e 01D0     		beq	.L44
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 19


 195:Core/Src/fsm.c ****   {
 694              		.loc 1 195 19 discriminator 1 view .LVU133
 695 0020 0A2B     		cmp	r3, #10
 696 0022 01D1     		bne	.L47
 697              	.L44:
 213:Core/Src/fsm.c **** 
 698              		.loc 1 213 1 view .LVU134
 699 0024 03B0     		add	sp, sp, #12
 700              		@ sp needed
 701              	.LVL47:
 213:Core/Src/fsm.c **** 
 702              		.loc 1 213 1 view .LVU135
 703 0026 30BD     		pop	{r4, r5, pc}
 704              	.LVL48:
 705              	.L47:
 197:Core/Src/fsm.c ****     HAL_UART_Transmit(uartHandle, "\n", 2, 50);
 706              		.loc 1 197 5 is_stmt 1 view .LVU136
 707 0028 6B46     		mov	r3, sp
 708 002a DD1D     		adds	r5, r3, #7
 709 002c 3223     		movs	r3, #50
 710 002e 0122     		movs	r2, #1
 711 0030 2900     		movs	r1, r5
 712 0032 2000     		movs	r0, r4
 713 0034 FFF7FEFF 		bl	HAL_UART_Transmit
 714              	.LVL49:
 198:Core/Src/fsm.c **** 
 715              		.loc 1 198 5 view .LVU137
 716 0038 3223     		movs	r3, #50
 717 003a 0222     		movs	r2, #2
 718 003c 0C49     		ldr	r1, .L49
 719 003e 2000     		movs	r0, r4
 720 0040 FFF7FEFF 		bl	HAL_UART_Transmit
 721              	.LVL50:
 200:Core/Src/fsm.c ****     {
 722              		.loc 1 200 5 view .LVU138
 200:Core/Src/fsm.c ****     {
 723              		.loc 1 200 24 is_stmt 0 view .LVU139
 724 0044 2B78     		ldrb	r3, [r5]
 725 0046 1800     		movs	r0, r3
 726 0048 3038     		subs	r0, r0, #48
 727 004a C0B2     		uxtb	r0, r0
 200:Core/Src/fsm.c ****     {
 728              		.loc 1 200 8 view .LVU140
 729 004c 0628     		cmp	r0, #6
 730 004e 0AD9     		bls	.L48
 206:Core/Src/fsm.c ****     {
 731              		.loc 1 206 10 is_stmt 1 view .LVU141
 206:Core/Src/fsm.c ****     {
 732              		.loc 1 206 13 is_stmt 0 view .LVU142
 733 0050 372B     		cmp	r3, #55
 734 0052 E7D1     		bne	.L44
 206:Core/Src/fsm.c ****     {
 735              		.loc 1 206 49 discriminator 1 view .LVU143
 736 0054 074B     		ldr	r3, .L49+4
 737 0056 1878     		ldrb	r0, [r3]
 206:Core/Src/fsm.c ****     {
 738              		.loc 1 206 29 discriminator 1 view .LVU144
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 20


 739 0058 0428     		cmp	r0, #4
 740 005a E3D0     		beq	.L44
 208:Core/Src/fsm.c ****     }
 741              		.loc 1 208 7 is_stmt 1 view .LVU145
 742 005c FFF7FEFF 		bl	nextEventFromState
 743              	.LVL51:
 744 0060 FFF7FEFF 		bl	FSM_sendEvent
 745              	.LVL52:
 212:Core/Src/fsm.c **** }
 746              		.loc 1 212 3 view .LVU146
 747 0064 DEE7     		b	.L44
 748              	.L48:
 203:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 749              		.loc 1 203 7 view .LVU147
 203:Core/Src/fsm.c ****       FSM_sendEvent((eFsmEvent)strBuf);
 750              		.loc 1 203 14 is_stmt 0 view .LVU148
 751 0066 2870     		strb	r0, [r5]
 204:Core/Src/fsm.c ****     }
 752              		.loc 1 204 7 is_stmt 1 view .LVU149
 753 0068 FFF7FEFF 		bl	FSM_sendEvent
 754              	.LVL53:
 755 006c DAE7     		b	.L44
 756              	.L50:
 757 006e C046     		.align	2
 758              	.L49:
 759 0070 00000000 		.word	.LC17
 760 0074 00000000 		.word	.LANCHOR2
 761              		.cfi_endproc
 762              	.LFE53:
 764              		.section	.text.eventToQue,"ax",%progbits
 765              		.align	1
 766              		.global	eventToQue
 767              		.syntax unified
 768              		.code	16
 769              		.thumb_func
 771              	eventToQue:
 772              	.LVL54:
 773              	.LFB56:
 283:Core/Src/fsm.c **** 
 284:Core/Src/fsm.c **** void eventToQue(eFsmEvent Event)
 285:Core/Src/fsm.c **** {
 774              		.loc 1 285 1 view -0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 286:Core/Src/fsm.c ****     
 287:Core/Src/fsm.c **** }
 779              		.loc 1 287 1 view .LVU151
 780              		@ sp needed
 781 0000 7047     		bx	lr
 782              		.cfi_endproc
 783              	.LFE56:
 785              		.section	.bss.msgBuff.0,"aw",%nobits
 786              		.align	2
 787              		.set	.LANCHOR5,. + 0
 790              	msgBuff.0:
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 21


 791 0000 00000000 		.space	32
 791      00000000 
 791      00000000 
 791      00000000 
 791      00000000 
 792              		.section	.data.eFsmCurrentState,"aw"
 793              		.set	.LANCHOR2,. + 0
 796              	eFsmCurrentState:
 797 0000 06       		.byte	6
 798              		.section	.data.eFsmNewEvent,"aw"
 799              		.set	.LANCHOR3,. + 0
 802              	eFsmNewEvent:
 803 0000 06       		.byte	6
 804              		.section	.data.preEvent.1,"aw"
 805              		.set	.LANCHOR6,. + 0
 808              	preEvent.1:
 809 0000 06       		.byte	6
 810              		.section	.rodata.FSM.2,"a"
 811              		.align	2
 814              	FSM.2:
 815 0000 00000000 		.word	_errorHandler
 816 0004 00000000 		.word	_recivedArmHandler
 817 0008 00000000 		.space	12
 817      00000000 
 817      00000000 
 818 0014 00000000 		.word	_resetHandler
 819 0018 00000000 		.word	_errorHandler
 820 001c 00000000 		.space	4
 821 0020 00000000 		.word	_revicedLaunchHandler
 822 0024 00000000 		.space	8
 822      00000000 
 823 002c 00000000 		.word	_resetHandler
 824 0030 00000000 		.word	_errorHandler
 825 0034 00000000 		.space	8
 825      00000000 
 826 003c 00000000 		.word	_alarmOpenValveHandler
 827 0040 00000000 		.space	4
 828 0044 00000000 		.word	_resetHandler
 829 0048 00000000 		.word	_errorHandler
 830 004c 00000000 		.space	12
 830      00000000 
 830      00000000 
 831 0058 00000000 		.word	_alarmTurnOffIgniterHandler
 832 005c 00000000 		.word	_resetHandler
 833 0060 00000000 		.word	_errorHandler
 834 0064 00000000 		.space	16
 834      00000000 
 834      00000000 
 834      00000000 
 835 0074 00000000 		.word	_resetHandler
 836 0078 00000000 		.word	_errorHandler
 837 007c 00000000 		.space	16
 837      00000000 
 837      00000000 
 837      00000000 
 838 008c 00000000 		.word	_resetHandler
 839              		.section	.rodata.eFsmStateNames,"a"
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 22


 840              		.align	2
 841              		.set	.LANCHOR4,. + 0
 844              	eFsmStateNames:
 845 0000 49646C65 		.ascii	"Idle\000"
 845      00
 846 0005 00000000 		.space	7
 846      000000
 847 000c 5374616E 		.ascii	"Standby\000"
 847      64627900 
 848 0014 00000000 		.space	4
 849 0018 49676E69 		.ascii	"Igniter On\000"
 849      74657220 
 849      4F6E00
 850 0023 00       		.space	1
 851 0024 56616C76 		.ascii	"Valve Open\000"
 851      65204F70 
 851      656E00
 852 002f 00       		.space	1
 853 0030 49676E69 		.ascii	"Igniter Off\000"
 853      74657220 
 853      4F666600 
 854 003c 41626F72 		.ascii	"Aborted\000"
 854      74656400 
 855 0044 00000000 		.space	4
 856 0048 504C4143 		.ascii	"PLACEHOLDER\000"
 856      45484F4C 
 856      44455200 
 857              		.section	.rodata.errorMsg,"a"
 858              		.align	2
 859              		.set	.LANCHOR0,. + 0
 862              	errorMsg:
 863 0000 0D0A536F 		.ascii	"\015\012Somthing went wrong! MOVED TO ERROR STATE\015"
 863      6D746869 
 863      6E672077 
 863      656E7420 
 863      77726F6E 
 864 002c 0A00     		.ascii	"\012\000"
 865              		.section	.rodata.resetMsg,"a"
 866              		.align	2
 867              		.set	.LANCHOR1,. + 0
 870              	resetMsg:
 871 0000 0D0A5265 		.ascii	"\015\012Returned to idel state\015\012\000"
 871      7475726E 
 871      65642074 
 871      6F206964 
 871      656C2073 
 872              		.text
 873              	.Letext0:
 874              		.file 2 "f:\\toolchains\\gnu_arm\\10 2021.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 875              		.file 3 "f:\\toolchains\\gnu_arm\\10 2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 876              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l031xx.h"
 877              		.file 5 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 878              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 879              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 880              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 881              		.file 9 "Core/Inc/fsm.h"
 882              		.file 10 "f:\\toolchains\\gnu_arm\\10 2021.10\\arm-none-eabi\\include\\stdio.h"
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 23


 883              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 884              		.file 12 "Core/Inc/pwm.h"
 885              		.file 13 "Core/Inc/usart.h"
ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 fsm.c
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:18     .text._recivedArmHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:24     .text._recivedArmHandler:00000000 _recivedArmHandler
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:56     .text._revicedLaunchHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:62     .text._revicedLaunchHandler:00000000 _revicedLaunchHandler
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:93     .text._alarmTurnOffIgniterHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:99     .text._alarmTurnOffIgniterHandler:00000000 _alarmTurnOffIgniterHandler
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:141    .text._errorHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:147    .text._errorHandler:00000000 _errorHandler
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:194    .text._errorHandler:00000030 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:200    .text._alarmOpenValveHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:206    .text._alarmOpenValveHandler:00000000 _alarmOpenValveHandler
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:233    .text._alarmOpenValveHandler:0000000c $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:238    .text._resetHandler:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:244    .text._resetHandler:00000000 _resetHandler
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:295    .text._resetHandler:00000034 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:301    .text.FSM_init:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:307    .text.FSM_init:00000000 FSM_init
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:326    .text.FSM_init:00000008 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:331    .text.FSM_state:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:337    .text.FSM_state:00000000 FSM_state
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:354    .text.FSM_state:00000008 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:359    .text.FSM_sendEvent:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:365    .text.FSM_sendEvent:00000000 FSM_sendEvent
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:384    .text.FSM_sendEvent:00000008 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:389    .rodata.sendStateMsg.str1.4:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:393    .text.sendStateMsg:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:399    .text.sendStateMsg:00000000 sendStateMsg
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:463    .text.sendStateMsg:0000002c $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:471    .text.FSM_step:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:477    .text.FSM_step:00000000 FSM_step
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:547    .text.FSM_step:00000040 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:814    .rodata.FSM.2:00000000 FSM.2
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:555    .text.nextEventFromState:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:561    .text.nextEventFromState:00000000 nextEventFromState
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:579    .rodata.nextEventFromState:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:642    .text.nextEventFromState:0000002c $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:647    .rodata.FSM_reciveCMD.str1.4:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:651    .text.FSM_reciveCMD:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:657    .text.FSM_reciveCMD:00000000 FSM_reciveCMD
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:759    .text.FSM_reciveCMD:00000070 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:765    .text.eventToQue:00000000 $t
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:771    .text.eventToQue:00000000 eventToQue
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:786    .bss.msgBuff.0:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:790    .bss.msgBuff.0:00000000 msgBuff.0
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:796    .data.eFsmCurrentState:00000000 eFsmCurrentState
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:802    .data.eFsmNewEvent:00000000 eFsmNewEvent
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:808    .data.preEvent.1:00000000 preEvent.1
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:811    .rodata.FSM.2:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:840    .rodata.eFsmStateNames:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:844    .rodata.eFsmStateNames:00000000 eFsmStateNames
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:858    .rodata.errorMsg:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:862    .rodata.errorMsg:00000000 errorMsg
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:866    .rodata.resetMsg:00000000 $d
C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s:870    .rodata.resetMsg:00000000 resetMsg

ARM GAS  C:\Users\flynn\AppData\Local\Temp\cckRFN7h.s 			page 25


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_Delay
HAL_UART_Transmit_DMA
huart2
PWM1_setPos
sprintf
HAL_UART_Transmit
HAL_UART_Receive
