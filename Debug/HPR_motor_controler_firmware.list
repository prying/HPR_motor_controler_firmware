
HPR_motor_controler_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003184  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003340  08003340  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003348  08003348  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000010  08003360  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003360  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bddd  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b95  00000000  00000000  0002be15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  0002e748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000110aa  00000000  00000000  0002f418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad6c  00000000  00000000  000404c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a6cb  00000000  00000000  0004b22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b58f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003168  00000000  00000000  000b5974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800322c 	.word	0x0800322c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800322c 	.word	0x0800322c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <ErrorHandler>:
// Event handles
//**************************************

// When an error is detected call Error_Event and go to the aborted state
eFsmState ErrorHandler(eFsmPeripheriesData *sPeripheries)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	// TODO turn everything off and to the safe position
	return Aborted_State;
 8000494:	2305      	movs	r3, #5
}
 8000496:	0018      	movs	r0, r3
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}

0800049e <RecivedArmHandler>:

// Go from idle to standby
eFsmState RecivedArmHandler(eFsmPeripheriesData *sPeripheries)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
	// TODO turn on pwr supply for igiter (i.e. turn on the buck converter)
	return Standby_State;
 80004a6:	2301      	movs	r3, #1
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <RevicedLaunchHandler>:

// Turn igniter on
eFsmState RevicedLaunchHandler(eFsmPeripheriesData *sPeripheries)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	// TODO turn on mosfet to allow current to travel to the igiter
	return Igniter_On_State;
 80004b8:	2302      	movs	r3, #2
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <AlarmOpenValveHandler>:

// Timer finishes counting to open clock
eFsmState AlarmOpenValveHandler(eFsmPeripheriesData *sPeripheries)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b082      	sub	sp, #8
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
	// TODO Open servo
	return Valve_Open_State;
 80004ca:	2303      	movs	r3, #3
}
 80004cc:	0018      	movs	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <AlarmTurnOffIgniterHandler>:

// Timer finishes counting to turn igniter off
eFsmState AlarmTurnOffIgniterHandler(eFsmPeripheriesData *sPeripheries)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	// TODO turn off mosfet and turn off pwr supply for igniter
	return Igniter_Off_State;
 80004dc:	2304      	movs	r3, #4
}
 80004de:	0018      	movs	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <ResetHandler>:

// When in the aborted state it can be reset
eFsmState ResetHandler(eFsmPeripheriesData *sPeripheries)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
	// TODO move all vars needed to be in the idle state
	return Idle_State;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <Fsm_Init>:
// Public function
//*****************************************

// Initialize finite state machine
void Fsm_Init()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	eFsmNextState = Idle_State;
 80004fc:	4b02      	ldr	r3, [pc, #8]	; (8000508 <Fsm_Init+0x10>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
	return;
 8000502:	46c0      	nop			; (mov r8, r8)
}
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000000 	.word	0x20000000

0800050c <Fsm_sendEvent>:
	return eFsmNextState;
}

// Get event
void Fsm_sendEvent(eFsmEvent Event)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	0002      	movs	r2, r0
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	701a      	strb	r2, [r3, #0]
	// TODO! validation ect;
	eFsmNewEvent = Event;
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <Fsm_sendEvent+0x1c>)
 800051a:	1dfa      	adds	r2, r7, #7
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	701a      	strb	r2, [r3, #0]
	return;
 8000520:	46c0      	nop			; (mov r8, r8)
}
 8000522:	46bd      	mov	sp, r7
 8000524:	b002      	add	sp, #8
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000001 	.word	0x20000001

0800052c <Fsm_Step>:

// Step the finite state machines logic
void Fsm_Step(eFsmPeripheriesData *sPeripheries)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
			[Igniter_Off_State] = {[Error_Event] = ErrorHandler, [Reset_Event] = ResetHandler},
			[Aborted_State]		= {[Error_Event] = ErrorHandler, [Reset_Event] = ResetHandler}
	};

	// Validate that both state and event are valid and that there is a event handler at the event for this state
	if ((eFsmNextState < Last_State) && (eFsmNewEvent < Last_Event) && FSM[eFsmNextState][eFsmNewEvent] != NULL)
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <Fsm_Step+0x6c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b05      	cmp	r3, #5
 800053a:	d829      	bhi.n	8000590 <Fsm_Step+0x64>
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <Fsm_Step+0x70>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b05      	cmp	r3, #5
 8000542:	d825      	bhi.n	8000590 <Fsm_Step+0x64>
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <Fsm_Step+0x6c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	0019      	movs	r1, r3
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <Fsm_Step+0x70>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	0018      	movs	r0, r3
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <Fsm_Step+0x74>)
 8000552:	000b      	movs	r3, r1
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	185b      	adds	r3, r3, r1
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	181b      	adds	r3, r3, r0
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	589b      	ldr	r3, [r3, r2]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d015      	beq.n	8000590 <Fsm_Step+0x64>
	{
		// Call the event handler at the end of the function pointer
		eFsmNextState = (*FSM[eFsmNextState][eFsmNewEvent])(sPeripheries);
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <Fsm_Step+0x6c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	0019      	movs	r1, r3
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <Fsm_Step+0x70>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	0018      	movs	r0, r3
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <Fsm_Step+0x74>)
 8000572:	000b      	movs	r3, r1
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	185b      	adds	r3, r3, r1
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	181b      	adds	r3, r3, r0
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	589b      	ldr	r3, [r3, r2]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	0010      	movs	r0, r2
 8000584:	4798      	blx	r3
 8000586:	0003      	movs	r3, r0
 8000588:	001a      	movs	r2, r3
 800058a:	4b03      	ldr	r3, [pc, #12]	; (8000598 <Fsm_Step+0x6c>)
 800058c:	701a      	strb	r2, [r3, #0]
	}

	return;
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46c0      	nop			; (mov r8, r8)
}
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000000 	.word	0x20000000
 800059c:	20000001 	.word	0x20000001
 80005a0:	08003244 	.word	0x08003244

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fafb 	bl	8000ba4 <HAL_Init>

  /* USER CODE BEGIN Init */
  Fsm_Init();
 80005ae:	f7ff ffa3 	bl	80004f8 <Fsm_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f811 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f977 	bl	80008a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ba:	f000 f87b 	bl	80006b4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80005be:	f000 f8b9 	bl	8000734 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80005c2:	f000 f8e7 	bl	8000794 <MX_TIM2_Init>
  /* Infinite loop */
  while (1)
  {
	  /* USER CODE BEGIN 3 */
	  // Update FSM TODO
	  Fsm_sendEvent(Last_Event);
 80005c6:	2006      	movs	r0, #6
 80005c8:	f7ff ffa0 	bl	800050c <Fsm_sendEvent>
	  // Run FSM logic
	  Fsm_Step(&periData);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ffac 	bl	800052c <Fsm_Step>
	  Fsm_sendEvent(Last_Event);
 80005d4:	e7f7      	b.n	80005c6 <main+0x22>
	...

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b099      	sub	sp, #100	; 0x64
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	242c      	movs	r4, #44	; 0x2c
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	0018      	movs	r0, r3
 80005e4:	2334      	movs	r3, #52	; 0x34
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f002 fe17 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ee:	2318      	movs	r3, #24
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	2314      	movs	r3, #20
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f002 fe0f 	bl	800321c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fe:	003b      	movs	r3, r7
 8000600:	0018      	movs	r0, r3
 8000602:	2318      	movs	r3, #24
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f002 fe08 	bl	800321c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xd8>)
 8000612:	401a      	ands	r2, r3
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xd4>)
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	0109      	lsls	r1, r1, #4
 800061a:	430a      	orrs	r2, r1
 800061c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061e:	0021      	movs	r1, r4
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2210      	movs	r2, #16
 8000624:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2201      	movs	r2, #1
 800062a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	22a0      	movs	r2, #160	; 0xa0
 8000636:	0212      	lsls	r2, r2, #8
 8000638:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	187b      	adds	r3, r7, r1
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fe8c 	bl	8001360 <HAL_RCC_OscConfig>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800064c:	f000 f972 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	2118      	movs	r1, #24
 8000652:	187b      	adds	r3, r7, r1
 8000654:	220f      	movs	r2, #15
 8000656:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2100      	movs	r1, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f001 f9f3 	bl	8001a60 <HAL_RCC_ClockConfig>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800067e:	f000 f959 	bl	8000934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8000682:	003b      	movs	r3, r7
 8000684:	220c      	movs	r2, #12
 8000686:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000688:	003b      	movs	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800068e:	003b      	movs	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000694:	003b      	movs	r3, r7
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fc02 	bl	8001ea0 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006a0:	f000 f948 	bl	8000934 <Error_Handler>
  }
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b019      	add	sp, #100	; 0x64
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	40007000 	.word	0x40007000
 80006b0:	ffffe7ff 	.word	0xffffe7ff

080006b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_I2C1_Init+0x78>)
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_I2C1_Init+0x7c>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_I2C1_Init+0x78>)
 80006c0:	22e1      	movs	r2, #225	; 0xe1
 80006c2:	00d2      	lsls	r2, r2, #3
 80006c4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_I2C1_Init+0x78>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_I2C1_Init+0x78>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_I2C1_Init+0x78>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_I2C1_Init+0x78>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_I2C1_Init+0x78>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x78>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_I2C1_Init+0x78>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x78>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fd06 	bl	8001104 <HAL_I2C_Init>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f91a 	bl	8000934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x78>)
 8000702:	2100      	movs	r1, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fd93 	bl	8001230 <HAL_I2CEx_ConfigAnalogFilter>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800070e:	f000 f911 	bl	8000934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x78>)
 8000714:	2100      	movs	r1, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fdd6 	bl	80012c8 <HAL_I2CEx_ConfigDigitalFilter>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 f908 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	2000002c 	.word	0x2000002c
 8000730:	40005400 	.word	0x40005400

08000734 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <MX_LPUART1_UART_Init+0x58>)
 800073c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_LPUART1_UART_Init+0x5c>)
 8000742:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	0552      	lsls	r2, r2, #21
 800074a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <MX_LPUART1_UART_Init+0x54>)
 8000772:	0018      	movs	r0, r3
 8000774:	f002 f8fc 	bl	8002970 <HAL_UART_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 f8da 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000078 	.word	0x20000078
 800078c:	40004800 	.word	0x40004800
 8000790:	00033324 	.word	0x00033324

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	2318      	movs	r3, #24
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	2310      	movs	r3, #16
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f002 fd39 	bl	800321c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007aa:	2310      	movs	r3, #16
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	0018      	movs	r0, r3
 80007b0:	2308      	movs	r3, #8
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f002 fd31 	bl	800321c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ba:	003b      	movs	r3, r7
 80007bc:	0018      	movs	r0, r3
 80007be:	2310      	movs	r3, #16
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f002 fd2a 	bl	800321c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_TIM2_Init+0x10c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	05d2      	lsls	r2, r2, #23
 80007ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d0:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_TIM2_Init+0x10c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_TIM2_Init+0x10c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007dc:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_TIM2_Init+0x10c>)
 80007de:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <MX_TIM2_Init+0x110>)
 80007e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_TIM2_Init+0x10c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_TIM2_Init+0x10c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_TIM2_Init+0x10c>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fc7d 	bl	80020f0 <HAL_TIM_Base_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 f89b 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fe:	2118      	movs	r1, #24
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	0152      	lsls	r2, r2, #5
 8000806:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000808:	187a      	adds	r2, r7, r1
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_TIM2_Init+0x10c>)
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f001 fda6 	bl	8002360 <HAL_TIM_ConfigClockSource>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000818:	f000 f88c 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_TIM2_Init+0x10c>)
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fca6 	bl	8002170 <HAL_TIM_PWM_Init>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000828:	f000 f884 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2110      	movs	r1, #16
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083a:	187a      	adds	r2, r7, r1
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM2_Init+0x10c>)
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f002 f83d 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800084a:	f000 f873 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084e:	003b      	movs	r3, r7
 8000850:	2260      	movs	r2, #96	; 0x60
 8000852:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000854:	003b      	movs	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	003b      	movs	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000860:	003b      	movs	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	0039      	movs	r1, r7
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_TIM2_Init+0x10c>)
 800086a:	2200      	movs	r2, #0
 800086c:	0018      	movs	r0, r3
 800086e:	f001 fcc7 	bl	8002200 <HAL_TIM_PWM_ConfigChannel>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000876:	f000 f85d 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800087a:	0039      	movs	r1, r7
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_TIM2_Init+0x10c>)
 800087e:	2204      	movs	r2, #4
 8000880:	0018      	movs	r0, r3
 8000882:	f001 fcbd 	bl	8002200 <HAL_TIM_PWM_ConfigChannel>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800088a:	f000 f853 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <MX_TIM2_Init+0x10c>)
 8000890:	0018      	movs	r0, r3
 8000892:	f000 f905 	bl	8000aa0 <HAL_TIM_MspPostInit>

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b00a      	add	sp, #40	; 0x28
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	200000fc 	.word	0x200000fc
 80008a4:	0000ffff 	.word	0x0000ffff

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f002 fcb0 	bl	800321c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_GPIO_Init+0x88>)
 80008be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_GPIO_Init+0x88>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_GPIO_Init+0x88>)
 80008ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008cc:	2201      	movs	r2, #1
 80008ce:	4013      	ands	r3, r2
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IGN_CONTROL_Pin|IGN_PWR_Pin, GPIO_PIN_RESET);
 80008d4:	23a0      	movs	r3, #160	; 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	2200      	movs	r2, #0
 80008da:	21c0      	movs	r1, #192	; 0xc0
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fbf3 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FB1_Pin FB2_Pin */
  GPIO_InitStruct.Pin = FB1_Pin|FB2_Pin;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2230      	movs	r2, #48	; 0x30
 80008e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	1d3a      	adds	r2, r7, #4
 80008f6:	23a0      	movs	r3, #160	; 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fa75 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : IGN_CONTROL_Pin IGN_PWR_Pin */
  GPIO_InitStruct.Pin = IGN_CONTROL_Pin|IGN_PWR_Pin;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	22c0      	movs	r2, #192	; 0xc0
 8000906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2201      	movs	r2, #1
 800090c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	1d3a      	adds	r2, r7, #4
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fa62 	bl	8000dec <HAL_GPIO_Init>

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b006      	add	sp, #24
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093a:	e7fe      	b.n	800093a <Error_Handler+0x6>

0800093c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_MspInit+0x24>)
 8000942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x24>)
 8000946:	2101      	movs	r1, #1
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <HAL_MspInit+0x24>)
 800094e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_MspInit+0x24>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	0549      	lsls	r1, r1, #21
 8000956:	430a      	orrs	r2, r1
 8000958:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	230c      	movs	r3, #12
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	0018      	movs	r0, r3
 8000972:	2314      	movs	r3, #20
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f002 fc50 	bl	800321c <memset>
  if(hi2c->Instance==I2C1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <HAL_I2C_MspInit+0x80>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12a      	bne.n	80009dc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_I2C_MspInit+0x84>)
 8000988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_I2C_MspInit+0x84>)
 800098c:	2101      	movs	r1, #1
 800098e:	430a      	orrs	r2, r1
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_I2C_MspInit+0x84>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	2201      	movs	r2, #1
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800099e:	210c      	movs	r1, #12
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	22c0      	movs	r2, #192	; 0xc0
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2212      	movs	r2, #18
 80009ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2201      	movs	r2, #1
 80009b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2203      	movs	r2, #3
 80009b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2201      	movs	r2, #1
 80009be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	187a      	adds	r2, r7, r1
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fa0f 	bl	8000dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_I2C_MspInit+0x84>)
 80009d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_I2C_MspInit+0x84>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0389      	lsls	r1, r1, #14
 80009d8:	430a      	orrs	r2, r1
 80009da:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b008      	add	sp, #32
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40005400 	.word	0x40005400
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	230c      	movs	r3, #12
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	0018      	movs	r0, r3
 80009fa:	2314      	movs	r3, #20
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f002 fc0c 	bl	800321c <memset>
  if(huart->Instance==LPUART1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d129      	bne.n	8000a62 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	02c9      	lsls	r1, r1, #11
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	430a      	orrs	r2, r1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a34:	210c      	movs	r1, #12
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	220c      	movs	r2, #12
 8000a3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2202      	movs	r2, #2
 8000a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2206      	movs	r2, #6
 8000a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 f9c5 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b008      	add	sp, #32
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40004800 	.word	0x40004800
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d105      	bne.n	8000a94 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <HAL_TIM_Base_MspInit+0x28>)
 8000a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_TIM_Base_MspInit+0x28>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	430a      	orrs	r2, r1
 8000a92:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f002 fbb2 	bl	800321c <memset>
  if(htim->Instance==TIM2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d122      	bne.n	8000b0a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_TIM_MspPostInit+0x74>)
 8000ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_TIM_MspPostInit+0x74>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	430a      	orrs	r2, r1
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_TIM_MspPostInit+0x74>)
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000adc:	210c      	movs	r1, #12
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f971 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b008      	add	sp, #32
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3c:	f000 f886 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b7a:	f7ff ffe4 	bl	8000b46 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f002 fb29 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd0f 	bl	80005a4 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
   ldr   r0, =_estack
 8000b88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	08003350 	.word	0x08003350
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20000140 	.word	0x20000140

08000ba0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_COMP_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x3c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_Init+0x3c>)
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f811 	bl	8000be4 <HAL_InitTick>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e001      	b.n	8000bd2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bce:	f7ff feb5 	bl	800093c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x5c>)
 8000bee:	681c      	ldr	r4, [r3, #0]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x60>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	23fa      	movs	r3, #250	; 0xfa
 8000bf8:	0098      	lsls	r0, r3, #2
 8000bfa:	f7ff fa85 	bl	8000108 <__udivsi3>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	0019      	movs	r1, r3
 8000c02:	0020      	movs	r0, r4
 8000c04:	f7ff fa80 	bl	8000108 <__udivsi3>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 f8e1 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e00f      	b.n	8000c38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d80b      	bhi.n	8000c36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	425b      	negs	r3, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f8be 	bl	8000da8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_InitTick+0x64>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b003      	add	sp, #12
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	20000004 	.word	0x20000004
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	2000013c 	.word	0x2000013c

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	2000013c 	.word	0x2000013c

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b7f      	cmp	r3, #127	; 0x7f
 8000c98:	d828      	bhi.n	8000cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <__NVIC_SetPriority+0xd4>)
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	33c0      	adds	r3, #192	; 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	589b      	ldr	r3, [r3, r2]
 8000caa:	1dfa      	adds	r2, r7, #7
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	0011      	movs	r1, r2
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	00d2      	lsls	r2, r2, #3
 8000cb6:	21ff      	movs	r1, #255	; 0xff
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	22ff      	movs	r2, #255	; 0xff
 8000cc8:	401a      	ands	r2, r3
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	4003      	ands	r3, r0
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	481f      	ldr	r0, [pc, #124]	; (8000d58 <__NVIC_SetPriority+0xd4>)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	33c0      	adds	r3, #192	; 0xc0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cea:	e031      	b.n	8000d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3306      	adds	r3, #6
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	3304      	adds	r3, #4
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	400a      	ands	r2, r1
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	21ff      	movs	r1, #255	; 0xff
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	43d2      	mvns	r2, r2
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	22ff      	movs	r2, #255	; 0xff
 8000d24:	401a      	ands	r2, r3
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	4003      	ands	r3, r0
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <__NVIC_SetPriority+0xd8>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	4023      	ands	r3, r4
 8000d40:	3b08      	subs	r3, #8
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	430a      	orrs	r2, r1
 8000d46:	3306      	adds	r3, #6
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	18c3      	adds	r3, r0, r3
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b003      	add	sp, #12
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <SysTick_Config+0x40>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d901      	bls.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e010      	b.n	8000d98 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <SysTick_Config+0x44>)
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	425b      	negs	r3, r3
 8000d82:	2103      	movs	r1, #3
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ff7d 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SysTick_Config+0x44>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x44>)
 8000d92:	2207      	movs	r2, #7
 8000d94:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	00ffffff 	.word	0x00ffffff
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	210f      	movs	r1, #15
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	1c02      	adds	r2, r0, #0
 8000db8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff ffbf 	bl	8000d60 <SysTick_Config>
 8000de2:	0003      	movs	r3, r0
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e02:	e149      	b.n	8001098 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	000a      	movs	r2, r1
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d100      	bne.n	8000e1c <HAL_GPIO_Init+0x30>
 8000e1a:	e13a      	b.n	8001092 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00b      	beq.n	8000e3c <HAL_GPIO_Init+0x50>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	2b11      	cmp	r3, #17
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	2201      	movs	r2, #1
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0xf2>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b12      	cmp	r3, #18
 8000edc:	d123      	bne.n	8000f26 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	58d3      	ldr	r3, [r2, r3]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2207      	movs	r2, #7
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2107      	movs	r1, #7
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	6939      	ldr	r1, [r7, #16]
 8000f24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	43da      	mvns	r2, r3
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	401a      	ands	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	055b      	lsls	r3, r3, #21
 8000f62:	4013      	ands	r3, r2
 8000f64:	d100      	bne.n	8000f68 <HAL_GPIO_Init+0x17c>
 8000f66:	e094      	b.n	8001092 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f68:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <HAL_GPIO_Init+0x2c4>)
 8000f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <HAL_GPIO_Init+0x2c4>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	430a      	orrs	r2, r1
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f74:	4a4f      	ldr	r2, [pc, #316]	; (80010b4 <HAL_GPIO_Init+0x2c8>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	589b      	ldr	r3, [r3, r2]
 8000f80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2203      	movs	r2, #3
 8000f86:	4013      	ands	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	23a0      	movs	r3, #160	; 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1de>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <HAL_GPIO_Init+0x2cc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1da>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a43      	ldr	r2, [pc, #268]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1d6>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <HAL_GPIO_Init+0x2d4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1d2>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x1e0>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x1e0>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x1e0>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x1e0>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	2103      	movs	r1, #3
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fdc:	4935      	ldr	r1, [pc, #212]	; (80010b4 <HAL_GPIO_Init+0x2c8>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	025b      	lsls	r3, r3, #9
 8001002:	4013      	ands	r3, r2
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	029b      	lsls	r3, r3, #10
 800102c:	4013      	ands	r3, r2
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	035b      	lsls	r3, r3, #13
 8001056:	4013      	ands	r3, r2
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	039b      	lsls	r3, r3, #14
 8001080:	4013      	ands	r3, r2
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	40da      	lsrs	r2, r3
 80010a0:	1e13      	subs	r3, r2, #0
 80010a2:	d000      	beq.n	80010a6 <HAL_GPIO_Init+0x2ba>
 80010a4:	e6ae      	b.n	8000e04 <HAL_GPIO_Init+0x18>
  }
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b006      	add	sp, #24
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	50000400 	.word	0x50000400
 80010bc:	50000800 	.word	0x50000800
 80010c0:	50001c00 	.word	0x50001c00
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	0008      	movs	r0, r1
 80010d2:	0011      	movs	r1, r2
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	1c02      	adds	r2, r0, #0
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	1c7b      	adds	r3, r7, #1
 80010dc:	1c0a      	adds	r2, r1, #0
 80010de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e0:	1c7b      	adds	r3, r7, #1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	881a      	ldrh	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010f2:	1cbb      	adds	r3, r7, #2
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e082      	b.n	800121c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2241      	movs	r2, #65	; 0x41
 800111a:	5c9b      	ldrb	r3, [r3, r2]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d107      	bne.n	8001132 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fc19 	bl	8000964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2241      	movs	r2, #65	; 0x41
 8001136:	2124      	movs	r1, #36	; 0x24
 8001138:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	438a      	bics	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4934      	ldr	r1, [pc, #208]	; (8001224 <HAL_I2C_Init+0x120>)
 8001154:	400a      	ands	r2, r1
 8001156:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4931      	ldr	r1, [pc, #196]	; (8001228 <HAL_I2C_Init+0x124>)
 8001164:	400a      	ands	r2, r1
 8001166:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d108      	bne.n	8001182 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	0209      	lsls	r1, r1, #8
 800117c:	430a      	orrs	r2, r1
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	e007      	b.n	8001192 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2184      	movs	r1, #132	; 0x84
 800118c:	0209      	lsls	r1, r1, #8
 800118e:	430a      	orrs	r2, r1
 8001190:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d104      	bne.n	80011a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	491f      	ldr	r1, [pc, #124]	; (800122c <HAL_I2C_Init+0x128>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <HAL_I2C_Init+0x124>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	0011      	movs	r1, r2
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	021a      	lsls	r2, r3, #8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69d9      	ldr	r1, [r3, #28]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1a      	ldr	r2, [r3, #32]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2241      	movs	r2, #65	; 0x41
 8001208:	2120      	movs	r1, #32
 800120a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2242      	movs	r2, #66	; 0x42
 8001216:	2100      	movs	r1, #0
 8001218:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	f0ffffff 	.word	0xf0ffffff
 8001228:	ffff7fff 	.word	0xffff7fff
 800122c:	02008000 	.word	0x02008000

08001230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2241      	movs	r2, #65	; 0x41
 800123e:	5c9b      	ldrb	r3, [r3, r2]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b20      	cmp	r3, #32
 8001244:	d138      	bne.n	80012b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2240      	movs	r2, #64	; 0x40
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001250:	2302      	movs	r3, #2
 8001252:	e032      	b.n	80012ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	2101      	movs	r1, #1
 800125a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2241      	movs	r2, #65	; 0x41
 8001260:	2124      	movs	r1, #36	; 0x24
 8001262:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2101      	movs	r1, #1
 8001270:	438a      	bics	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4911      	ldr	r1, [pc, #68]	; (80012c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001280:	400a      	ands	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2241      	movs	r2, #65	; 0x41
 80012a8:	2120      	movs	r1, #32
 80012aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2240      	movs	r2, #64	; 0x40
 80012b0:	2100      	movs	r1, #0
 80012b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e000      	b.n	80012ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012b8:	2302      	movs	r3, #2
  }
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	ffffefff 	.word	0xffffefff

080012c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2241      	movs	r2, #65	; 0x41
 80012d6:	5c9b      	ldrb	r3, [r3, r2]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d139      	bne.n	8001352 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	5c9b      	ldrb	r3, [r3, r2]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e033      	b.n	8001354 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	2101      	movs	r1, #1
 80012f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2241      	movs	r2, #65	; 0x41
 80012f8:	2124      	movs	r1, #36	; 0x24
 80012fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	438a      	bics	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2241      	movs	r2, #65	; 0x41
 8001342:	2120      	movs	r1, #32
 8001344:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	2100      	movs	r1, #0
 800134c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001352:	2302      	movs	r3, #2
  }
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b004      	add	sp, #16
 800135a:	bd80      	pop	{r7, pc}
 800135c:	fffff0ff 	.word	0xfffff0ff

08001360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	f000 fb70 	bl	8001a54 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001374:	4bc9      	ldr	r3, [pc, #804]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	220c      	movs	r2, #12
 800137a:	4013      	ands	r3, r2
 800137c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800137e:	4bc7      	ldr	r3, [pc, #796]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	025b      	lsls	r3, r3, #9
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x36>
 8001394:	e07d      	b.n	8001492 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d007      	beq.n	80013ac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d112      	bne.n	80013c8 <HAL_RCC_OscConfig+0x68>
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	025b      	lsls	r3, r3, #9
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10d      	bne.n	80013c8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4bbb      	ldr	r3, [pc, #748]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	029b      	lsls	r3, r3, #10
 80013b4:	4013      	ands	r3, r2
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_OscConfig+0x5a>
 80013b8:	e06a      	b.n	8001490 <HAL_RCC_OscConfig+0x130>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d166      	bne.n	8001490 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f000 fb46 	bl	8001a54 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x84>
 80013d4:	4bb1      	ldr	r3, [pc, #708]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4bb0      	ldr	r3, [pc, #704]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0249      	lsls	r1, r1, #9
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e027      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	02db      	lsls	r3, r3, #11
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d10e      	bne.n	800140e <HAL_RCC_OscConfig+0xae>
 80013f0:	4baa      	ldr	r3, [pc, #680]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4ba9      	ldr	r3, [pc, #676]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	02c9      	lsls	r1, r1, #11
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	4ba7      	ldr	r3, [pc, #668]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4ba6      	ldr	r3, [pc, #664]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0249      	lsls	r1, r1, #9
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e012      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 800140e:	4ba3      	ldr	r3, [pc, #652]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4ba2      	ldr	r3, [pc, #648]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001414:	49a2      	ldr	r1, [pc, #648]	; (80016a0 <HAL_RCC_OscConfig+0x340>)
 8001416:	400a      	ands	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	4ba0      	ldr	r3, [pc, #640]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	4013      	ands	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4b9c      	ldr	r3, [pc, #624]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b9b      	ldr	r3, [pc, #620]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800142e:	499d      	ldr	r1, [pc, #628]	; (80016a4 <HAL_RCC_OscConfig+0x344>)
 8001430:	400a      	ands	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d014      	beq.n	8001466 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fc18 	bl	8000c70 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001446:	f7ff fc13 	bl	8000c70 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b64      	cmp	r3, #100	; 0x64
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e2fd      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001458:	4b90      	ldr	r3, [pc, #576]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4013      	ands	r3, r2
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0xe6>
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fc03 	bl	8000c70 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fbfe 	bl	8000c70 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e2e8      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001482:	4b86      	ldr	r3, [pc, #536]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	029b      	lsls	r3, r3, #10
 800148a:	4013      	ands	r3, r2
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x110>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d100      	bne.n	800149e <HAL_RCC_OscConfig+0x13e>
 800149c:	e09a      	b.n	80015d4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	2220      	movs	r2, #32
 80014a8:	4013      	ands	r3, r2
 80014aa:	d009      	beq.n	80014c0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014ac:	4b7b      	ldr	r3, [pc, #492]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80014b2:	2120      	movs	r1, #32
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	2220      	movs	r2, #32
 80014bc:	4393      	bics	r3, r2
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d13f      	bne.n	800154c <HAL_RCC_OscConfig+0x1ec>
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d13c      	bne.n	800154c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014d2:	4b72      	ldr	r3, [pc, #456]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2204      	movs	r2, #4
 80014d8:	4013      	ands	r3, r2
 80014da:	d004      	beq.n	80014e6 <HAL_RCC_OscConfig+0x186>
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e2b6      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b6d      	ldr	r3, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x348>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	021a      	lsls	r2, r3, #8
 80014f6:	4b69      	ldr	r3, [pc, #420]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2209      	movs	r2, #9
 8001502:	4393      	bics	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150e:	f000 fbef 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001512:	0001      	movs	r1, r0
 8001514:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	220f      	movs	r2, #15
 800151c:	4013      	ands	r3, r2
 800151e:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x34c>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	000a      	movs	r2, r1
 8001524:	40da      	lsrs	r2, r3
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <HAL_RCC_OscConfig+0x350>)
 8001528:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2513      	movs	r5, #19
 8001530:	197c      	adds	r4, r7, r5
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff fb56 	bl	8000be4 <HAL_InitTick>
 8001538:	0003      	movs	r3, r0
 800153a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800153c:	197b      	adds	r3, r7, r5
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d047      	beq.n	80015d4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001544:	2313      	movs	r3, #19
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	e283      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	2b00      	cmp	r3, #0
 8001550:	d027      	beq.n	80015a2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001552:	4b52      	ldr	r3, [pc, #328]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2209      	movs	r2, #9
 8001558:	4393      	bics	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	4b4f      	ldr	r3, [pc, #316]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fb84 	bl	8000c70 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fb7f 	bl	8000c70 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e269      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001580:	4b46      	ldr	r3, [pc, #280]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2204      	movs	r2, #4
 8001586:	4013      	ands	r3, r2
 8001588:	d0f1      	beq.n	800156e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x348>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	021a      	lsls	r2, r3, #8
 800159a:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	e018      	b.n	80015d4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	438a      	bics	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fb5f 	bl	8000c70 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fb5a 	bl	8000c70 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e244      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2204      	movs	r2, #4
 80015d0:	4013      	ands	r3, r2
 80015d2:	d1f1      	bne.n	80015b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2210      	movs	r2, #16
 80015da:	4013      	ands	r3, r2
 80015dc:	d100      	bne.n	80015e0 <HAL_RCC_OscConfig+0x280>
 80015de:	e0a2      	b.n	8001726 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d005      	beq.n	80015fe <HAL_RCC_OscConfig+0x29e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e22a      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a2d      	ldr	r2, [pc, #180]	; (80016b8 <HAL_RCC_OscConfig+0x358>)
 8001604:	4013      	ands	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	0a19      	lsrs	r1, r3, #8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	061a      	lsls	r2, r3, #24
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	0b5b      	lsrs	r3, r3, #13
 800162c:	3301      	adds	r3, #1
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	0212      	lsls	r2, r2, #8
 8001632:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	210f      	movs	r1, #15
 800163c:	400b      	ands	r3, r1
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x34c>)
 8001640:	5ccb      	ldrb	r3, [r1, r3]
 8001642:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_RCC_OscConfig+0x350>)
 8001646:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_RCC_OscConfig+0x354>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2513      	movs	r5, #19
 800164e:	197c      	adds	r4, r7, r5
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fac7 	bl	8000be4 <HAL_InitTick>
 8001656:	0003      	movs	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800165a:	197b      	adds	r3, r7, r5
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d061      	beq.n	8001726 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001662:	2313      	movs	r3, #19
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	e1f4      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03f      	beq.n	80016f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_OscConfig+0x33c>)
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	0049      	lsls	r1, r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff faf6 	bl	8000c70 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001688:	e018      	b.n	80016bc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800168a:	f7ff faf1 	bl	8000c70 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d911      	bls.n	80016bc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1db      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
 800169c:	40021000 	.word	0x40021000
 80016a0:	fffeffff 	.word	0xfffeffff
 80016a4:	fffbffff 	.word	0xfffbffff
 80016a8:	ffffe0ff 	.word	0xffffe0ff
 80016ac:	080032d4 	.word	0x080032d4
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20000008 	.word	0x20000008
 80016b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016bc:	4bca      	ldr	r3, [pc, #808]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d0e0      	beq.n	800168a <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c8:	4bc7      	ldr	r3, [pc, #796]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4ac7      	ldr	r2, [pc, #796]	; (80019ec <HAL_RCC_OscConfig+0x68c>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	4bc4      	ldr	r3, [pc, #784]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016dc:	4bc2      	ldr	r3, [pc, #776]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	0a19      	lsrs	r1, r3, #8
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	061a      	lsls	r2, r3, #24
 80016ea:	4bbf      	ldr	r3, [pc, #764]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	e019      	b.n	8001726 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f2:	4bbd      	ldr	r3, [pc, #756]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4bbc      	ldr	r3, [pc, #752]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80016f8:	49bd      	ldr	r1, [pc, #756]	; (80019f0 <HAL_RCC_OscConfig+0x690>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fab7 	bl	8000c70 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001708:	f7ff fab2 	bl	8000c70 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e19c      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800171a:	4bb3      	ldr	r3, [pc, #716]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2208      	movs	r2, #8
 800172c:	4013      	ands	r3, r2
 800172e:	d036      	beq.n	800179e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d019      	beq.n	800176c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001738:	4bab      	ldr	r3, [pc, #684]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800173a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173c:	4baa      	ldr	r3, [pc, #680]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff fa94 	bl	8000c70 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff fa8f 	bl	8000c70 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e179      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001760:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d0f1      	beq.n	800174e <HAL_RCC_OscConfig+0x3ee>
 800176a:	e018      	b.n	800179e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176c:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800176e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001770:	4b9d      	ldr	r3, [pc, #628]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001772:	2101      	movs	r1, #1
 8001774:	438a      	bics	r2, r1
 8001776:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff fa7a 	bl	8000c70 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001782:	f7ff fa75 	bl	8000c70 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e15f      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001794:	4b94      	ldr	r3, [pc, #592]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d1f1      	bne.n	8001782 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d100      	bne.n	80017aa <HAL_RCC_OscConfig+0x44a>
 80017a8:	e0af      	b.n	800190a <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017aa:	2323      	movs	r3, #35	; 0x23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b2:	4b8d      	ldr	r3, [pc, #564]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80017b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	055b      	lsls	r3, r3, #21
 80017ba:	4013      	ands	r3, r2
 80017bc:	d10a      	bne.n	80017d4 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80017c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0549      	lsls	r1, r1, #21
 80017c8:	430a      	orrs	r2, r1
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017cc:	2323      	movs	r3, #35	; 0x23
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	4b87      	ldr	r3, [pc, #540]	; (80019f4 <HAL_RCC_OscConfig+0x694>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	d11a      	bne.n	8001816 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e0:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <HAL_RCC_OscConfig+0x694>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b83      	ldr	r3, [pc, #524]	; (80019f4 <HAL_RCC_OscConfig+0x694>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0049      	lsls	r1, r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa3f 	bl	8000c70 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f8:	f7ff fa3a 	bl	8000c70 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e124      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x694>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4013      	ands	r3, r2
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	429a      	cmp	r2, r3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d2>
 8001822:	4b71      	ldr	r3, [pc, #452]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001826:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0049      	lsls	r1, r1, #1
 800182c:	430a      	orrs	r2, r1
 800182e:	651a      	str	r2, [r3, #80]	; 0x50
 8001830:	e031      	b.n	8001896 <HAL_RCC_OscConfig+0x536>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x4f4>
 800183a:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800183c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800183e:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001840:	496b      	ldr	r1, [pc, #428]	; (80019f0 <HAL_RCC_OscConfig+0x690>)
 8001842:	400a      	ands	r2, r1
 8001844:	651a      	str	r2, [r3, #80]	; 0x50
 8001846:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800184c:	496a      	ldr	r1, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x698>)
 800184e:	400a      	ands	r2, r1
 8001850:	651a      	str	r2, [r3, #80]	; 0x50
 8001852:	e020      	b.n	8001896 <HAL_RCC_OscConfig+0x536>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	23a0      	movs	r3, #160	; 0xa0
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	429a      	cmp	r2, r3
 800185e:	d10e      	bne.n	800187e <HAL_RCC_OscConfig+0x51e>
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001862:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001864:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	00c9      	lsls	r1, r1, #3
 800186a:	430a      	orrs	r2, r1
 800186c:	651a      	str	r2, [r3, #80]	; 0x50
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001872:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	0049      	lsls	r1, r1, #1
 8001878:	430a      	orrs	r2, r1
 800187a:	651a      	str	r2, [r3, #80]	; 0x50
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0x536>
 800187e:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001882:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001884:	495a      	ldr	r1, [pc, #360]	; (80019f0 <HAL_RCC_OscConfig+0x690>)
 8001886:	400a      	ands	r2, r1
 8001888:	651a      	str	r2, [r3, #80]	; 0x50
 800188a:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800188c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800188e:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001890:	4959      	ldr	r1, [pc, #356]	; (80019f8 <HAL_RCC_OscConfig+0x698>)
 8001892:	400a      	ands	r2, r1
 8001894:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff f9e7 	bl	8000c70 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018a6:	e009      	b.n	80018bc <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7ff f9e2 	bl	8000c70 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_OscConfig+0x69c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0cb      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80018be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	d0ef      	beq.n	80018a8 <HAL_RCC_OscConfig+0x548>
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f9d1 	bl	8000c70 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d2:	e009      	b.n	80018e8 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff f9cc 	bl	8000c70 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_RCC_OscConfig+0x69c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0b5      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80018ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d1ef      	bne.n	80018d4 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018f4:	2323      	movs	r3, #35	; 0x23
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001904:	493e      	ldr	r1, [pc, #248]	; (8001a00 <HAL_RCC_OscConfig+0x6a0>)
 8001906:	400a      	ands	r2, r1
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	2b00      	cmp	r3, #0
 8001910:	d100      	bne.n	8001914 <HAL_RCC_OscConfig+0x5b4>
 8001912:	e09e      	b.n	8001a52 <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d100      	bne.n	800191c <HAL_RCC_OscConfig+0x5bc>
 800191a:	e077      	b.n	8001a0c <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	2b02      	cmp	r3, #2
 8001922:	d145      	bne.n	80019b0 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800192a:	4936      	ldr	r1, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x6a4>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f99e 	bl	8000c70 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff f999 	bl	8000c70 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e083      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	049b      	lsls	r3, r3, #18
 8001954:	4013      	ands	r3, r2
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x6a8>)
 800195e:	4013      	ands	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	431a      	orrs	r2, r3
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 8001974:	430a      	orrs	r2, r1
 8001976:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	0449      	lsls	r1, r1, #17
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff f973 	bl	8000c70 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f96e 	bl	8000c70 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e058      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	4013      	ands	r3, r2
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x630>
 80019ae:	e050      	b.n	8001a52 <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80019b6:	4913      	ldr	r1, [pc, #76]	; (8001a04 <HAL_RCC_OscConfig+0x6a4>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff f958 	bl	8000c70 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f953 	bl	8000c70 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e03d      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_OscConfig+0x688>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	049b      	lsls	r3, r3, #18
 80019e0:	4013      	ands	r3, r2
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x666>
 80019e4:	e035      	b.n	8001a52 <HAL_RCC_OscConfig+0x6f2>
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000
 80019ec:	ffff1fff 	.word	0xffff1fff
 80019f0:	fffffeff 	.word	0xfffffeff
 80019f4:	40007000 	.word	0x40007000
 80019f8:	fffffbff 	.word	0xfffffbff
 80019fc:	00001388 	.word	0x00001388
 8001a00:	efffffff 	.word	0xefffffff
 8001a04:	feffffff 	.word	0xfeffffff
 8001a08:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x6fc>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	401a      	ands	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d10f      	bne.n	8001a4e <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	23f0      	movs	r3, #240	; 0xf0
 8001a32:	039b      	lsls	r3, r3, #14
 8001a34:	401a      	ands	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	401a      	ands	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b00a      	add	sp, #40	; 0x28
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e129      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b96      	ldr	r3, [pc, #600]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d91e      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b93      	ldr	r3, [pc, #588]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	4393      	bics	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	4b90      	ldr	r3, [pc, #576]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a94:	f7ff f8ec 	bl	8000c70 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9e:	f7ff f8e7 	bl	8000c70 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e10a      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aca:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	22f0      	movs	r2, #240	; 0xf0
 8001ad0:	4393      	bics	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d100      	bne.n	8001aea <HAL_RCC_ClockConfig+0x8a>
 8001ae8:	e089      	b.n	8001bfe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af2:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	029b      	lsls	r3, r3, #10
 8001afa:	4013      	ands	r3, r2
 8001afc:	d120      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0e2      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b0a:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	049b      	lsls	r3, r3, #18
 8001b12:	4013      	ands	r3, r2
 8001b14:	d114      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0d6      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2204      	movs	r2, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d109      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0cb      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b30:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0c3      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b40:	4b65      	ldr	r3, [pc, #404]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2203      	movs	r2, #3
 8001b46:	4393      	bics	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f88c 	bl	8000c70 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d111      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b66:	f7ff f883 	bl	8000c70 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0a6      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d1ef      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x106>
 8001b86:	e03a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d111      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7ff f86d 	bl	8000c70 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e090      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	220c      	movs	r2, #12
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d1ef      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x132>
 8001bb2:	e024      	b.n	8001bfe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d11b      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bbc:	e009      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbe:	f7ff f857 	bl	8000c70 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	4a42      	ldr	r2, [pc, #264]	; (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e07a      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x15e>
 8001bde:	e00e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f846 	bl	8000c70 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e069      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2201      	movs	r2, #1
 8001c04:	4013      	ands	r3, r2
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d21e      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4393      	bics	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c1e:	f7ff f827 	bl	8000c70 <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	e009      	b.n	8001c3c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff f822 	bl	8000c70 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e045      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d1ee      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4013      	ands	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <HAL_RCC_ClockConfig+0x27c>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d00a      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <HAL_RCC_ClockConfig+0x280>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00da      	lsls	r2, r3, #3
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c88:	f000 f832 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001c8c:	0001      	movs	r1, r0
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_ClockConfig+0x278>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	220f      	movs	r2, #15
 8001c96:	4013      	ands	r3, r2
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_RCC_ClockConfig+0x284>)
 8001c9a:	5cd3      	ldrb	r3, [r2, r3]
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	40da      	lsrs	r2, r3
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_RCC_ClockConfig+0x288>)
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_RCC_ClockConfig+0x28c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	250b      	movs	r5, #11
 8001caa:	197c      	adds	r4, r7, r5
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7fe ff99 	bl	8000be4 <HAL_InitTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cb6:	197b      	adds	r3, r7, r5
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8001cbe:	230b      	movs	r3, #11
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	00001388 	.word	0x00001388
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	fffff8ff 	.word	0xfffff8ff
 8001ce0:	ffffc7ff 	.word	0xffffc7ff
 8001ce4:	080032d4 	.word	0x080032d4
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b08f      	sub	sp, #60	; 0x3c
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x130>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cfe:	230c      	movs	r3, #12
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d00f      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x36>
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d010      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x3c>
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d000      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x20>
 8001d0e:	e073      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2210      	movs	r2, #16
 8001d16:	4013      	ands	r3, r2
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d1e:	e079      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d24:	e076      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d2a:	e073      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	0c9a      	lsrs	r2, r3, #18
 8001d30:	230f      	movs	r3, #15
 8001d32:	401a      	ands	r2, r3
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	0d9a      	lsrs	r2, r3, #22
 8001d3e:	2303      	movs	r3, #3
 8001d40:	4013      	ands	r3, r2
 8001d42:	3301      	adds	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	69b8      	ldr	r0, [r7, #24]
 8001d60:	69f9      	ldr	r1, [r7, #28]
 8001d62:	f7fe fa7d 	bl	8000260 <__aeabi_lmul>
 8001d66:	0003      	movs	r3, r0
 8001d68:	000c      	movs	r4, r1
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	0021      	movs	r1, r4
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f7fe fa51 	bl	8000220 <__aeabi_uldivmod>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	000c      	movs	r4, r1
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
 8001d84:	e035      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d019      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	68b8      	ldr	r0, [r7, #8]
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	f7fe fa5e 	bl	8000260 <__aeabi_lmul>
 8001da4:	0003      	movs	r3, r0
 8001da6:	000c      	movs	r4, r1
 8001da8:	0018      	movs	r0, r3
 8001daa:	0021      	movs	r1, r4
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f7fe fa32 	bl	8000220 <__aeabi_uldivmod>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	000c      	movs	r4, r1
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc2:	e016      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	0019      	movs	r1, r3
 8001dcc:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f7fe fa46 	bl	8000260 <__aeabi_lmul>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	000c      	movs	r4, r1
 8001dd8:	0018      	movs	r0, r3
 8001dda:	0021      	movs	r1, r4
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	001d      	movs	r5, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	001e      	movs	r6, r3
 8001de4:	002a      	movs	r2, r5
 8001de6:	0033      	movs	r3, r6
 8001de8:	f7fe fa1a 	bl	8000220 <__aeabi_uldivmod>
 8001dec:	0003      	movs	r3, r0
 8001dee:	000c      	movs	r4, r1
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df6:	e00d      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x130>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0b5b      	lsrs	r3, r3, #13
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	3301      	adds	r3, #1
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0212      	lsls	r2, r2, #8
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	0013      	movs	r3, r2
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e12:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b00f      	add	sp, #60	; 0x3c
 8001e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	003d0900 	.word	0x003d0900
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	080032ec 	.word	0x080032ec

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	0001      	movs	r1, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	40d9      	lsrs	r1, r3
 8001e62:	000b      	movs	r3, r1
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080032e4 	.word	0x080032e4

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e78:	f7ff ffdc 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	2207      	movs	r2, #7
 8001e86:	4013      	ands	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	40d9      	lsrs	r1, r3
 8001e8e:	000b      	movs	r3, r1
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	080032e4 	.word	0x080032e4

08001ea0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ea8:	2317      	movs	r3, #23
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d100      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001eba:	e0c3      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebc:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	055b      	lsls	r3, r3, #21
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d10a      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ecc:	4b7e      	ldr	r3, [pc, #504]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	0549      	lsls	r1, r1, #21
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ed6:	2317      	movs	r3, #23
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b7b      	ldr	r3, [pc, #492]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d11a      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b78      	ldr	r3, [pc, #480]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b77      	ldr	r3, [pc, #476]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0049      	lsls	r1, r1, #1
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef8:	f7fe feba 	bl	8000c70 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	e008      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f02:	f7fe feb5 	bl	8000c70 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0d4      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f20:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	23c0      	movs	r3, #192	; 0xc0
 8001f26:	039b      	lsls	r3, r3, #14
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	23c0      	movs	r3, #192	; 0xc0
 8001f32:	039b      	lsls	r3, r3, #14
 8001f34:	4013      	ands	r3, r2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	23c0      	movs	r3, #192	; 0xc0
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	401a      	ands	r2, r3
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	029b      	lsls	r3, r3, #10
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d10a      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	401a      	ands	r2, r3
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	029b      	lsls	r3, r3, #10
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0ac      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d03b      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	4013      	ands	r3, r2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d033      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d02e      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	0309      	lsls	r1, r1, #12
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fac:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fae:	4949      	ldr	r1, [pc, #292]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fb4:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d014      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fe54 	bl	8000c70 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe fe4f 	bl	8000c70 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e06d      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d0ef      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	23c0      	movs	r3, #192	; 0xc0
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	23c0      	movs	r3, #192	; 0xc0
 8001ffa:	029b      	lsls	r3, r3, #10
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d10c      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a35      	ldr	r2, [pc, #212]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	23c0      	movs	r3, #192	; 0xc0
 8002010:	039b      	lsls	r3, r3, #14
 8002012:	401a      	ands	r2, r3
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800201c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	23c0      	movs	r3, #192	; 0xc0
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	401a      	ands	r2, r3
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800202a:	430a      	orrs	r2, r1
 800202c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800202e:	2317      	movs	r3, #23
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800203a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800203e:	4928      	ldr	r1, [pc, #160]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002040:	400a      	ands	r2, r1
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2202      	movs	r2, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	220c      	movs	r2, #12
 8002054:	4393      	bics	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800205e:	430a      	orrs	r2, r1
 8002060:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2204      	movs	r2, #4
 8002068:	4013      	ands	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800207c:	430a      	orrs	r2, r1
 800207e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2208      	movs	r2, #8
 8002086:	4013      	ands	r3, r2
 8002088:	d009      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800209a:	430a      	orrs	r2, r1
 800209c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	4013      	ands	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b006      	add	sp, #24
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	fffcffff 	.word	0xfffcffff
 80020d4:	fff7ffff 	.word	0xfff7ffff
 80020d8:	00001388 	.word	0x00001388
 80020dc:	ffcfffff 	.word	0xffcfffff
 80020e0:	efffffff 	.word	0xefffffff
 80020e4:	fffff3ff 	.word	0xfffff3ff
 80020e8:	ffffcfff 	.word	0xffffcfff
 80020ec:	fff3ffff 	.word	0xfff3ffff

080020f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e032      	b.n	8002168 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2239      	movs	r2, #57	; 0x39
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2238      	movs	r2, #56	; 0x38
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f7fe fcab 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2239      	movs	r2, #57	; 0x39
 8002122:	2102      	movs	r1, #2
 8002124:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	0019      	movs	r1, r3
 8002130:	0010      	movs	r0, r2
 8002132:	f000 f9d3 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223e      	movs	r2, #62	; 0x3e
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	223a      	movs	r2, #58	; 0x3a
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	223b      	movs	r2, #59	; 0x3b
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223c      	movs	r2, #60	; 0x3c
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	223d      	movs	r2, #61	; 0x3d
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2239      	movs	r2, #57	; 0x39
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e032      	b.n	80021e8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2239      	movs	r2, #57	; 0x39
 8002186:	5c9b      	ldrb	r3, [r3, r2]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2238      	movs	r2, #56	; 0x38
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f829 	bl	80021f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2239      	movs	r2, #57	; 0x39
 80021a2:	2102      	movs	r1, #2
 80021a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	0019      	movs	r1, r3
 80021b0:	0010      	movs	r0, r2
 80021b2:	f000 f993 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223e      	movs	r2, #62	; 0x3e
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	223a      	movs	r2, #58	; 0x3a
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	223b      	movs	r2, #59	; 0x3b
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	223c      	movs	r2, #60	; 0x3c
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	223d      	movs	r2, #61	; 0x3d
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2239      	movs	r2, #57	; 0x39
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2238      	movs	r2, #56	; 0x38
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002216:	2302      	movs	r3, #2
 8002218:	e09c      	b.n	8002354 <HAL_TIM_PWM_ConfigChannel+0x154>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2238      	movs	r2, #56	; 0x38
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d029      	beq.n	800227c <HAL_TIM_PWM_ConfigChannel+0x7c>
 8002228:	d802      	bhi.n	8002230 <HAL_TIM_PWM_ConfigChannel+0x30>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800222e:	e08c      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002230:	2b08      	cmp	r3, #8
 8002232:	d046      	beq.n	80022c2 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d065      	beq.n	8002304 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8002238:	e087      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	0011      	movs	r1, r2
 8002242:	0018      	movs	r0, r3
 8002244:	f000 f99e 	bl	8002584 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2108      	movs	r1, #8
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2104      	movs	r1, #4
 8002264:	438a      	bics	r2, r1
 8002266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6999      	ldr	r1, [r3, #24]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	619a      	str	r2, [r3, #24]
      break;
 800227a:	e066      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	0011      	movs	r1, r2
 8002284:	0018      	movs	r0, r3
 8002286:	f000 f9b9 	bl	80025fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0109      	lsls	r1, r1, #4
 8002298:	430a      	orrs	r2, r1
 800229a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	492d      	ldr	r1, [pc, #180]	; (800235c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6999      	ldr	r1, [r3, #24]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	021a      	lsls	r2, r3, #8
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	619a      	str	r2, [r3, #24]
      break;
 80022c0:	e043      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	0011      	movs	r1, r2
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 f9d8 	bl	8002680 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2108      	movs	r1, #8
 80022dc:	430a      	orrs	r2, r1
 80022de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2104      	movs	r1, #4
 80022ec:	438a      	bics	r2, r1
 80022ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69d9      	ldr	r1, [r3, #28]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	61da      	str	r2, [r3, #28]
      break;
 8002302:	e022      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f000 f9f7 	bl	8002700 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0109      	lsls	r1, r1, #4
 8002320:	430a      	orrs	r2, r1
 8002322:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	490b      	ldr	r1, [pc, #44]	; (800235c <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002330:	400a      	ands	r2, r1
 8002332:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69d9      	ldr	r1, [r3, #28]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	021a      	lsls	r2, r3, #8
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	61da      	str	r2, [r3, #28]
      break;
 8002348:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2238      	movs	r2, #56	; 0x38
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fffffbff 	.word	0xfffffbff

08002360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2238      	movs	r2, #56	; 0x38
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_TIM_ConfigClockSource+0x18>
 8002374:	2302      	movs	r3, #2
 8002376:	e0ab      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x170>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2238      	movs	r2, #56	; 0x38
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2239      	movs	r2, #57	; 0x39
 8002384:	2102      	movs	r1, #2
 8002386:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2277      	movs	r2, #119	; 0x77
 8002394:	4393      	bics	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_TIM_ConfigClockSource+0x178>)
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d100      	bne.n	80023b2 <HAL_TIM_ConfigClockSource+0x52>
 80023b0:	e06b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x12a>
 80023b2:	d80e      	bhi.n	80023d2 <HAL_TIM_ConfigClockSource+0x72>
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d100      	bne.n	80023ba <HAL_TIM_ConfigClockSource+0x5a>
 80023b8:	e077      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x14a>
 80023ba:	d803      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x64>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d100      	bne.n	80023c2 <HAL_TIM_ConfigClockSource+0x62>
 80023c0:	e073      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023c2:	e07c      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d100      	bne.n	80023ca <HAL_TIM_ConfigClockSource+0x6a>
 80023c8:	e06f      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x14a>
 80023ca:	2b30      	cmp	r3, #48	; 0x30
 80023cc:	d100      	bne.n	80023d0 <HAL_TIM_ConfigClockSource+0x70>
 80023ce:	e06c      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80023d0:	e075      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80023d2:	2b70      	cmp	r3, #112	; 0x70
 80023d4:	d00e      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x94>
 80023d6:	d804      	bhi.n	80023e2 <HAL_TIM_ConfigClockSource+0x82>
 80023d8:	2b50      	cmp	r3, #80	; 0x50
 80023da:	d036      	beq.n	800244a <HAL_TIM_ConfigClockSource+0xea>
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d044      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80023e0:	e06d      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	0152      	lsls	r2, r2, #5
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d068      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0x15c>
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	0192      	lsls	r2, r2, #6
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d017      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80023f2:	e064      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f000 fa3c 	bl	8002880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2277      	movs	r2, #119	; 0x77
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]
      break;
 8002420:	e04d      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f000 fa25 	bl	8002880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	01c9      	lsls	r1, r1, #7
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]
      break;
 8002448:	e039      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	001a      	movs	r2, r3
 8002458:	f000 f998 	bl	800278c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2150      	movs	r1, #80	; 0x50
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f9f2 	bl	800284c <TIM_ITRx_SetConfig>
      break;
 8002468:	e029      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	001a      	movs	r2, r3
 8002478:	f000 f9b6 	bl	80027e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2160      	movs	r1, #96	; 0x60
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f9e2 	bl	800284c <TIM_ITRx_SetConfig>
      break;
 8002488:	e019      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	001a      	movs	r2, r3
 8002498:	f000 f978 	bl	800278c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f9d2 	bl	800284c <TIM_ITRx_SetConfig>
      break;
 80024a8:	e009      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0019      	movs	r1, r3
 80024b4:	0010      	movs	r0, r2
 80024b6:	f000 f9c9 	bl	800284c <TIM_ITRx_SetConfig>
        break;
 80024ba:	e000      	b.n	80024be <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80024bc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2239      	movs	r2, #57	; 0x39
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2238      	movs	r2, #56	; 0x38
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b004      	add	sp, #16
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	ffff00ff 	.word	0xffff00ff

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	05db      	lsls	r3, r3, #23
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d007      	beq.n	8002506 <TIM_Base_SetConfig+0x2a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <TIM_Base_SetConfig+0x9c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0x2a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <TIM_Base_SetConfig+0xa0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2270      	movs	r2, #112	; 0x70
 800250a:	4393      	bics	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	05db      	lsls	r3, r3, #23
 800251e:	429a      	cmp	r2, r3
 8002520:	d007      	beq.n	8002532 <TIM_Base_SetConfig+0x56>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <TIM_Base_SetConfig+0x9c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d003      	beq.n	8002532 <TIM_Base_SetConfig+0x56>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a13      	ldr	r2, [pc, #76]	; (800257c <TIM_Base_SetConfig+0xa0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <TIM_Base_SetConfig+0xa4>)
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	4393      	bics	r3, r2
 800254a:	001a      	movs	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	615a      	str	r2, [r3, #20]
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b004      	add	sp, #16
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40010800 	.word	0x40010800
 800257c:	40011400 	.word	0x40011400
 8002580:	fffffcff 	.word	0xfffffcff

08002584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	2201      	movs	r2, #1
 8002594:	4393      	bics	r3, r2
 8002596:	001a      	movs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2270      	movs	r2, #112	; 0x70
 80025b2:	4393      	bics	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2203      	movs	r2, #3
 80025ba:	4393      	bics	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4393      	bics	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	621a      	str	r2, [r3, #32]
}
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b006      	add	sp, #24
 80025fa:	bd80      	pop	{r7, pc}

080025fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	2210      	movs	r2, #16
 800260c:	4393      	bics	r3, r2
 800260e:	001a      	movs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <TIM_OC2_SetConfig+0x7c>)
 800262a:	4013      	ands	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <TIM_OC2_SetConfig+0x80>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2220      	movs	r2, #32
 8002646:	4393      	bics	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b006      	add	sp, #24
 8002676:	bd80      	pop	{r7, pc}
 8002678:	ffff8fff 	.word	0xffff8fff
 800267c:	fffffcff 	.word	0xfffffcff

08002680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <TIM_OC3_SetConfig+0x78>)
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2270      	movs	r2, #112	; 0x70
 80026ac:	4393      	bics	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2203      	movs	r2, #3
 80026b4:	4393      	bics	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <TIM_OC3_SetConfig+0x7c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b006      	add	sp, #24
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	fffffeff 	.word	0xfffffeff
 80026fc:	fffffdff 	.word	0xfffffdff

08002700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a1b      	ldr	r2, [pc, #108]	; (800277c <TIM_OC4_SetConfig+0x7c>)
 8002710:	401a      	ands	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <TIM_OC4_SetConfig+0x80>)
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <TIM_OC4_SetConfig+0x84>)
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <TIM_OC4_SetConfig+0x88>)
 8002748:	4013      	ands	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	031b      	lsls	r3, r3, #12
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	621a      	str	r2, [r3, #32]
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b006      	add	sp, #24
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	ffffefff 	.word	0xffffefff
 8002780:	ffff8fff 	.word	0xffff8fff
 8002784:	fffffcff 	.word	0xfffffcff
 8002788:	ffffdfff 	.word	0xffffdfff

0800278c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	2201      	movs	r2, #1
 80027a4:	4393      	bics	r3, r2
 80027a6:	001a      	movs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	22f0      	movs	r2, #240	; 0xf0
 80027b6:	4393      	bics	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	220a      	movs	r2, #10
 80027c8:	4393      	bics	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b006      	add	sp, #24
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	2210      	movs	r2, #16
 80027fa:	4393      	bics	r3, r2
 80027fc:	001a      	movs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <TIM_TI2_ConfigInputStage+0x60>)
 8002812:	4013      	ands	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	031b      	lsls	r3, r3, #12
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	22a0      	movs	r2, #160	; 0xa0
 8002824:	4393      	bics	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b006      	add	sp, #24
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	ffff0fff 	.word	0xffff0fff

0800284c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2270      	movs	r2, #112	; 0x70
 8002860:	4393      	bics	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	2207      	movs	r2, #7
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	609a      	str	r2, [r3, #8]
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b004      	add	sp, #16
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <TIM_ETR_SetConfig+0x3c>)
 8002898:	4013      	ands	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	021a      	lsls	r2, r3, #8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	ffff00ff 	.word	0xffff00ff

080028c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2238      	movs	r2, #56	; 0x38
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e042      	b.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2238      	movs	r2, #56	; 0x38
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2239      	movs	r2, #57	; 0x39
 80028e4:	2102      	movs	r1, #2
 80028e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2270      	movs	r2, #112	; 0x70
 80028fc:	4393      	bics	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	429a      	cmp	r2, r3
 800291c:	d009      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0f      	ldr	r2, [pc, #60]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10c      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	4393      	bics	r3, r2
 8002938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2239      	movs	r2, #57	; 0x39
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2238      	movs	r2, #56	; 0x38
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b004      	add	sp, #16
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	40010800 	.word	0x40010800
 800296c:	40011400 	.word	0x40011400

08002970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e044      	b.n	8002a0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2274      	movs	r2, #116	; 0x74
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe f829 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2224      	movs	r2, #36	; 0x24
 800299e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2101      	movs	r1, #1
 80029ac:	438a      	bics	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f830 	bl	8002a18 <UART_SetConfig>
 80029b8:	0003      	movs	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e024      	b.n	8002a0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 fa85 	bl	8002edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	490d      	ldr	r1, [pc, #52]	; (8002a14 <HAL_UART_Init+0xa4>)
 80029de:	400a      	ands	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	212a      	movs	r1, #42	; 0x2a
 80029ee:	438a      	bics	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 fb1d 	bl	8003044 <UART_CheckIdleState>
 8002a0a:	0003      	movs	r3, r0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	ffffb7ff 	.word	0xffffb7ff

08002a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a20:	231a      	movs	r3, #26
 8002a22:	2218      	movs	r2, #24
 8002a24:	4694      	mov	ip, r2
 8002a26:	44bc      	add	ip, r7
 8002a28:	4463      	add	r3, ip
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4aba      	ldr	r2, [pc, #744]	; (8002d38 <UART_SetConfig+0x320>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4ab6      	ldr	r2, [pc, #728]	; (8002d3c <UART_SetConfig+0x324>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4ab0      	ldr	r2, [pc, #704]	; (8002d40 <UART_SetConfig+0x328>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4aab      	ldr	r2, [pc, #684]	; (8002d44 <UART_SetConfig+0x32c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4aa7      	ldr	r2, [pc, #668]	; (8002d48 <UART_SetConfig+0x330>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d137      	bne.n	8002b1e <UART_SetConfig+0x106>
 8002aae:	4ba7      	ldr	r3, [pc, #668]	; (8002d4c <UART_SetConfig+0x334>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d018      	beq.n	8002aec <UART_SetConfig+0xd4>
 8002aba:	d802      	bhi.n	8002ac2 <UART_SetConfig+0xaa>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <UART_SetConfig+0xb4>
 8002ac0:	e024      	b.n	8002b0c <UART_SetConfig+0xf4>
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d00a      	beq.n	8002adc <UART_SetConfig+0xc4>
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d018      	beq.n	8002afc <UART_SetConfig+0xe4>
 8002aca:	e01f      	b.n	8002b0c <UART_SetConfig+0xf4>
 8002acc:	231b      	movs	r3, #27
 8002ace:	2218      	movs	r2, #24
 8002ad0:	4694      	mov	ip, r2
 8002ad2:	44bc      	add	ip, r7
 8002ad4:	4463      	add	r3, ip
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e06e      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002adc:	231b      	movs	r3, #27
 8002ade:	2218      	movs	r2, #24
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	44bc      	add	ip, r7
 8002ae4:	4463      	add	r3, ip
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e066      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002aec:	231b      	movs	r3, #27
 8002aee:	2218      	movs	r2, #24
 8002af0:	4694      	mov	ip, r2
 8002af2:	44bc      	add	ip, r7
 8002af4:	4463      	add	r3, ip
 8002af6:	2204      	movs	r2, #4
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e05e      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002afc:	231b      	movs	r3, #27
 8002afe:	2218      	movs	r2, #24
 8002b00:	4694      	mov	ip, r2
 8002b02:	44bc      	add	ip, r7
 8002b04:	4463      	add	r3, ip
 8002b06:	2208      	movs	r2, #8
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e056      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002b0c:	231b      	movs	r3, #27
 8002b0e:	2218      	movs	r2, #24
 8002b10:	4694      	mov	ip, r2
 8002b12:	44bc      	add	ip, r7
 8002b14:	4463      	add	r3, ip
 8002b16:	2210      	movs	r2, #16
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	e04d      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a87      	ldr	r2, [pc, #540]	; (8002d40 <UART_SetConfig+0x328>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d141      	bne.n	8002bac <UART_SetConfig+0x194>
 8002b28:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <UART_SetConfig+0x334>)
 8002b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b2c:	23c0      	movs	r3, #192	; 0xc0
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	00d2      	lsls	r2, r2, #3
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <UART_SetConfig+0x162>
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	00d2      	lsls	r2, r2, #3
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d802      	bhi.n	8002b48 <UART_SetConfig+0x130>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <UART_SetConfig+0x142>
 8002b46:	e028      	b.n	8002b9a <UART_SetConfig+0x182>
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00c      	beq.n	8002b6a <UART_SetConfig+0x152>
 8002b50:	22c0      	movs	r2, #192	; 0xc0
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d018      	beq.n	8002b8a <UART_SetConfig+0x172>
 8002b58:	e01f      	b.n	8002b9a <UART_SetConfig+0x182>
 8002b5a:	231b      	movs	r3, #27
 8002b5c:	2218      	movs	r2, #24
 8002b5e:	4694      	mov	ip, r2
 8002b60:	44bc      	add	ip, r7
 8002b62:	4463      	add	r3, ip
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e027      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002b6a:	231b      	movs	r3, #27
 8002b6c:	2218      	movs	r2, #24
 8002b6e:	4694      	mov	ip, r2
 8002b70:	44bc      	add	ip, r7
 8002b72:	4463      	add	r3, ip
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e01f      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002b7a:	231b      	movs	r3, #27
 8002b7c:	2218      	movs	r2, #24
 8002b7e:	4694      	mov	ip, r2
 8002b80:	44bc      	add	ip, r7
 8002b82:	4463      	add	r3, ip
 8002b84:	2204      	movs	r2, #4
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e017      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002b8a:	231b      	movs	r3, #27
 8002b8c:	2218      	movs	r2, #24
 8002b8e:	4694      	mov	ip, r2
 8002b90:	44bc      	add	ip, r7
 8002b92:	4463      	add	r3, ip
 8002b94:	2208      	movs	r2, #8
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e00f      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002b9a:	231b      	movs	r3, #27
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	44bc      	add	ip, r7
 8002ba2:	4463      	add	r3, ip
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	e006      	b.n	8002bba <UART_SetConfig+0x1a2>
 8002bac:	231b      	movs	r3, #27
 8002bae:	2218      	movs	r2, #24
 8002bb0:	4694      	mov	ip, r2
 8002bb2:	44bc      	add	ip, r7
 8002bb4:	4463      	add	r3, ip
 8002bb6:	2210      	movs	r2, #16
 8002bb8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a60      	ldr	r2, [pc, #384]	; (8002d40 <UART_SetConfig+0x328>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d000      	beq.n	8002bc6 <UART_SetConfig+0x1ae>
 8002bc4:	e085      	b.n	8002cd2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bc6:	231b      	movs	r3, #27
 8002bc8:	2218      	movs	r2, #24
 8002bca:	4694      	mov	ip, r2
 8002bcc:	44bc      	add	ip, r7
 8002bce:	4463      	add	r3, ip
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d00d      	beq.n	8002bf2 <UART_SetConfig+0x1da>
 8002bd6:	dc02      	bgt.n	8002bde <UART_SetConfig+0x1c6>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <UART_SetConfig+0x1d0>
 8002bdc:	e01d      	b.n	8002c1a <UART_SetConfig+0x202>
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d012      	beq.n	8002c08 <UART_SetConfig+0x1f0>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d015      	beq.n	8002c12 <UART_SetConfig+0x1fa>
 8002be6:	e018      	b.n	8002c1a <UART_SetConfig+0x202>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be8:	f7ff f92e 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002bec:	0003      	movs	r3, r0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bf0:	e01d      	b.n	8002c2e <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf2:	4b56      	ldr	r3, [pc, #344]	; (8002d4c <UART_SetConfig+0x334>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d002      	beq.n	8002c02 <UART_SetConfig+0x1ea>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bfc:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <UART_SetConfig+0x338>)
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c00:	e015      	b.n	8002c2e <UART_SetConfig+0x216>
          pclk = (uint32_t) HSI_VALUE;
 8002c02:	4b54      	ldr	r3, [pc, #336]	; (8002d54 <UART_SetConfig+0x33c>)
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c06:	e012      	b.n	8002c2e <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c08:	f7ff f872 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c10:	e00d      	b.n	8002c2e <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c18:	e009      	b.n	8002c2e <UART_SetConfig+0x216>
      default:
        pclk = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c1e:	231a      	movs	r3, #26
 8002c20:	2218      	movs	r2, #24
 8002c22:	4694      	mov	ip, r2
 8002c24:	44bc      	add	ip, r7
 8002c26:	4463      	add	r3, ip
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
        break;
 8002c2c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d100      	bne.n	8002c36 <UART_SetConfig+0x21e>
 8002c34:	e138      	b.n	8002ea8 <UART_SetConfig+0x490>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d305      	bcc.n	8002c52 <UART_SetConfig+0x23a>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d907      	bls.n	8002c62 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8002c52:	231a      	movs	r3, #26
 8002c54:	2218      	movs	r2, #24
 8002c56:	4694      	mov	ip, r2
 8002c58:	44bc      	add	ip, r7
 8002c5a:	4463      	add	r3, ip
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e122      	b.n	8002ea8 <UART_SetConfig+0x490>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	6939      	ldr	r1, [r7, #16]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	000b      	movs	r3, r1
 8002c70:	0e1b      	lsrs	r3, r3, #24
 8002c72:	0010      	movs	r0, r2
 8002c74:	0205      	lsls	r5, r0, #8
 8002c76:	431d      	orrs	r5, r3
 8002c78:	000b      	movs	r3, r1
 8002c7a:	021c      	lsls	r4, r3, #8
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68b8      	ldr	r0, [r7, #8]
 8002c8a:	68f9      	ldr	r1, [r7, #12]
 8002c8c:	1900      	adds	r0, r0, r4
 8002c8e:	4169      	adcs	r1, r5
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f7fd fabf 	bl	8000220 <__aeabi_uldivmod>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	000c      	movs	r4, r1
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <UART_SetConfig+0x340>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d908      	bls.n	8002cc2 <UART_SetConfig+0x2aa>
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <UART_SetConfig+0x344>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d804      	bhi.n	8002cc2 <UART_SetConfig+0x2aa>
        {
          huart->Instance->BRR = usartdiv;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	e0f2      	b.n	8002ea8 <UART_SetConfig+0x490>
        }
        else
        {
          ret = HAL_ERROR;
 8002cc2:	231a      	movs	r3, #26
 8002cc4:	2218      	movs	r2, #24
 8002cc6:	4694      	mov	ip, r2
 8002cc8:	44bc      	add	ip, r7
 8002cca:	4463      	add	r3, ip
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e0ea      	b.n	8002ea8 <UART_SetConfig+0x490>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d000      	beq.n	8002ce0 <UART_SetConfig+0x2c8>
 8002cde:	e08a      	b.n	8002df6 <UART_SetConfig+0x3de>
  {
    switch (clocksource)
 8002ce0:	231b      	movs	r3, #27
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	4694      	mov	ip, r2
 8002ce6:	44bc      	add	ip, r7
 8002ce8:	4463      	add	r3, ip
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d839      	bhi.n	8002d64 <UART_SetConfig+0x34c>
 8002cf0:	009a      	lsls	r2, r3, #2
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <UART_SetConfig+0x348>)
 8002cf4:	18d3      	adds	r3, r2, r3
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7ff f8a5 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d02:	e039      	b.n	8002d78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d04:	f7ff f8b6 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d0c:	e034      	b.n	8002d78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <UART_SetConfig+0x334>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2210      	movs	r2, #16
 8002d14:	4013      	ands	r3, r2
 8002d16:	d002      	beq.n	8002d1e <UART_SetConfig+0x306>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <UART_SetConfig+0x338>)
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d1c:	e02c      	b.n	8002d78 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <UART_SetConfig+0x33c>)
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d22:	e029      	b.n	8002d78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d24:	f7fe ffe4 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d2c:	e024      	b.n	8002d78 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d34:	e020      	b.n	8002d78 <UART_SetConfig+0x360>
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	efff69f3 	.word	0xefff69f3
 8002d3c:	ffffcfff 	.word	0xffffcfff
 8002d40:	40004800 	.word	0x40004800
 8002d44:	fffff4ff 	.word	0xfffff4ff
 8002d48:	40004400 	.word	0x40004400
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	003d0900 	.word	0x003d0900
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	000002ff 	.word	0x000002ff
 8002d5c:	000fffff 	.word	0x000fffff
 8002d60:	080032f8 	.word	0x080032f8
      default:
        pclk = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d68:	231a      	movs	r3, #26
 8002d6a:	2218      	movs	r2, #24
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	44bc      	add	ip, r7
 8002d70:	4463      	add	r3, ip
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
        break;
 8002d76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d100      	bne.n	8002d80 <UART_SetConfig+0x368>
 8002d7e:	e093      	b.n	8002ea8 <UART_SetConfig+0x490>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	005a      	lsls	r2, r3, #1
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	18d2      	adds	r2, r2, r3
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0019      	movs	r1, r3
 8002d92:	0010      	movs	r0, r2
 8002d94:	f7fd f9b8 	bl	8000108 <__udivsi3>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d920      	bls.n	8002de6 <UART_SetConfig+0x3ce>
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	4a48      	ldr	r2, [pc, #288]	; (8002ec8 <UART_SetConfig+0x4b0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d81c      	bhi.n	8002de6 <UART_SetConfig+0x3ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	200e      	movs	r0, #14
 8002db2:	2418      	movs	r4, #24
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	181b      	adds	r3, r3, r0
 8002db8:	210f      	movs	r1, #15
 8002dba:	438a      	bics	r2, r1
 8002dbc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	193b      	adds	r3, r7, r4
 8002dcc:	181b      	adds	r3, r3, r0
 8002dce:	193a      	adds	r2, r7, r4
 8002dd0:	1812      	adds	r2, r2, r0
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	193a      	adds	r2, r7, r4
 8002dde:	1812      	adds	r2, r2, r0
 8002de0:	8812      	ldrh	r2, [r2, #0]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	e060      	b.n	8002ea8 <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8002de6:	231a      	movs	r3, #26
 8002de8:	2218      	movs	r2, #24
 8002dea:	4694      	mov	ip, r2
 8002dec:	44bc      	add	ip, r7
 8002dee:	4463      	add	r3, ip
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e058      	b.n	8002ea8 <UART_SetConfig+0x490>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002df6:	231b      	movs	r3, #27
 8002df8:	2218      	movs	r2, #24
 8002dfa:	4694      	mov	ip, r2
 8002dfc:	44bc      	add	ip, r7
 8002dfe:	4463      	add	r3, ip
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d822      	bhi.n	8002e4c <UART_SetConfig+0x434>
 8002e06:	009a      	lsls	r2, r3, #2
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <UART_SetConfig+0x4b4>)
 8002e0a:	18d3      	adds	r3, r2, r3
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e10:	f7ff f81a 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002e14:	0003      	movs	r3, r0
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e18:	e022      	b.n	8002e60 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e1a:	f7ff f82b 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e22:	e01d      	b.n	8002e60 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <UART_SetConfig+0x4b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d002      	beq.n	8002e34 <UART_SetConfig+0x41c>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e2e:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <UART_SetConfig+0x4bc>)
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e32:	e015      	b.n	8002e60 <UART_SetConfig+0x448>
          pclk = (uint32_t) HSI_VALUE;
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <UART_SetConfig+0x4c0>)
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e38:	e012      	b.n	8002e60 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e3a:	f7fe ff59 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e42:	e00d      	b.n	8002e60 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e4a:	e009      	b.n	8002e60 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e50:	231a      	movs	r3, #26
 8002e52:	2218      	movs	r2, #24
 8002e54:	4694      	mov	ip, r2
 8002e56:	44bc      	add	ip, r7
 8002e58:	4463      	add	r3, ip
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
        break;
 8002e5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d020      	beq.n	8002ea8 <UART_SetConfig+0x490>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	085a      	lsrs	r2, r3, #1
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	18d2      	adds	r2, r2, r3
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	0019      	movs	r1, r3
 8002e76:	0010      	movs	r0, r2
 8002e78:	f7fd f946 	bl	8000108 <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	2b0f      	cmp	r3, #15
 8002e86:	d908      	bls.n	8002e9a <UART_SetConfig+0x482>
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <UART_SetConfig+0x4b0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d804      	bhi.n	8002e9a <UART_SetConfig+0x482>
      {
        huart->Instance->BRR = usartdiv;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	e006      	b.n	8002ea8 <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8002e9a:	231a      	movs	r3, #26
 8002e9c:	2218      	movs	r2, #24
 8002e9e:	4694      	mov	ip, r2
 8002ea0:	44bc      	add	ip, r7
 8002ea2:	4463      	add	r3, ip
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002eb4:	231a      	movs	r3, #26
 8002eb6:	2218      	movs	r2, #24
 8002eb8:	4694      	mov	ip, r2
 8002eba:	44bc      	add	ip, r7
 8002ebc:	4463      	add	r3, ip
 8002ebe:	781b      	ldrb	r3, [r3, #0]
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b00e      	add	sp, #56	; 0x38
 8002ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec8:	0000ffff 	.word	0x0000ffff
 8002ecc:	0800331c 	.word	0x0800331c
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	003d0900 	.word	0x003d0900
 8002ed8:	00f42400 	.word	0x00f42400

08002edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <UART_AdvFeatureConfig+0x144>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a43      	ldr	r2, [pc, #268]	; (8003024 <UART_AdvFeatureConfig+0x148>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a3b      	ldr	r2, [pc, #236]	; (8003028 <UART_AdvFeatureConfig+0x14c>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2208      	movs	r2, #8
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a34      	ldr	r2, [pc, #208]	; (800302c <UART_AdvFeatureConfig+0x150>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2210      	movs	r2, #16
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <UART_AdvFeatureConfig+0x154>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2220      	movs	r2, #32
 8002f94:	4013      	ands	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a25      	ldr	r2, [pc, #148]	; (8003034 <UART_AdvFeatureConfig+0x158>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2240      	movs	r2, #64	; 0x40
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <UART_AdvFeatureConfig+0x15c>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	035b      	lsls	r3, r3, #13
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d10b      	bne.n	8002ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <UART_AdvFeatureConfig+0x160>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <UART_AdvFeatureConfig+0x164>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	fffdffff 	.word	0xfffdffff
 8003024:	fffeffff 	.word	0xfffeffff
 8003028:	fffbffff 	.word	0xfffbffff
 800302c:	ffff7fff 	.word	0xffff7fff
 8003030:	ffffefff 	.word	0xffffefff
 8003034:	ffffdfff 	.word	0xffffdfff
 8003038:	ffefffff 	.word	0xffefffff
 800303c:	ff9fffff 	.word	0xff9fffff
 8003040:	fff7ffff 	.word	0xfff7ffff

08003044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af02      	add	r7, sp, #8
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	2100      	movs	r1, #0
 8003052:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003054:	f7fd fe0c 	bl	8000c70 <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2208      	movs	r2, #8
 8003064:	4013      	ands	r3, r2
 8003066:	2b08      	cmp	r3, #8
 8003068:	d10d      	bne.n	8003086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	0399      	lsls	r1, r3, #14
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <UART_CheckIdleState+0x90>)
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	0013      	movs	r3, r2
 8003078:	2200      	movs	r2, #0
 800307a:	f000 f82d 	bl	80030d8 <UART_WaitOnFlagUntilTimeout>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d001      	beq.n	8003086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e022      	b.n	80030cc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2204      	movs	r2, #4
 800308e:	4013      	ands	r3, r2
 8003090:	2b04      	cmp	r3, #4
 8003092:	d10d      	bne.n	80030b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	03d9      	lsls	r1, r3, #15
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <UART_CheckIdleState+0x90>)
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	0013      	movs	r3, r2
 80030a2:	2200      	movs	r2, #0
 80030a4:	f000 f818 	bl	80030d8 <UART_WaitOnFlagUntilTimeout>
 80030a8:	1e03      	subs	r3, r0, #0
 80030aa:	d001      	beq.n	80030b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e00d      	b.n	80030cc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2274      	movs	r2, #116	; 0x74
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b004      	add	sp, #16
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	01ffffff 	.word	0x01ffffff

080030d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e8:	e05e      	b.n	80031a8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3301      	adds	r3, #1
 80030ee:	d05b      	beq.n	80031a8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f0:	f7fd fdbe 	bl	8000c70 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11b      	bne.n	800313e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	492f      	ldr	r1, [pc, #188]	; (80031d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003112:	400a      	ands	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	438a      	bics	r2, r1
 8003124:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2274      	movs	r2, #116	; 0x74
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e044      	b.n	80031c8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2204      	movs	r2, #4
 8003146:	4013      	ands	r3, r2
 8003148:	d02e      	beq.n	80031a8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	401a      	ands	r2, r3
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	429a      	cmp	r2, r3
 800315c:	d124      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4917      	ldr	r1, [pc, #92]	; (80031d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003174:	400a      	ands	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	438a      	bics	r2, r1
 8003186:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	2120      	movs	r1, #32
 800319a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2274      	movs	r2, #116	; 0x74
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e00f      	b.n	80031c8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	425a      	negs	r2, r3
 80031b8:	4153      	adcs	r3, r2
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	001a      	movs	r2, r3
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d091      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b004      	add	sp, #16
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	fffffe5f 	.word	0xfffffe5f

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2600      	movs	r6, #0
 80031d8:	4d0c      	ldr	r5, [pc, #48]	; (800320c <__libc_init_array+0x38>)
 80031da:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	2600      	movs	r6, #0
 80031e6:	f000 f821 	bl	800322c <_init>
 80031ea:	4d0a      	ldr	r5, [pc, #40]	; (8003214 <__libc_init_array+0x40>)
 80031ec:	4c0a      	ldr	r4, [pc, #40]	; (8003218 <__libc_init_array+0x44>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	00b3      	lsls	r3, r6, #2
 80031fa:	58eb      	ldr	r3, [r5, r3]
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	00b3      	lsls	r3, r6, #2
 8003204:	58eb      	ldr	r3, [r5, r3]
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003348 	.word	0x08003348
 8003210:	08003348 	.word	0x08003348
 8003214:	08003348 	.word	0x08003348
 8003218:	0800334c 	.word	0x0800334c

0800321c <memset>:
 800321c:	0003      	movs	r3, r0
 800321e:	1812      	adds	r2, r2, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	7019      	strb	r1, [r3, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <_init>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr

08003238 <_fini>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr
