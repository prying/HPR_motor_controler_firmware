
HPR_motor_controler_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a34  08004a34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a3c  08004a3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000074  08004ab8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004ab8  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101da  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002833  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  000339f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013037  00000000  00000000  000347f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f5e3  00000000  00000000  0004782f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f17b  00000000  00000000  00056e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5f8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003894  00000000  00000000  000c6008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800488c 	.word	0x0800488c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800488c 	.word	0x0800488c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_DMA_Init+0x38>)
 8000494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_DMA_Init+0x38>)
 8000498:	2101      	movs	r1, #1
 800049a:	430a      	orrs	r2, r1
 800049c:	631a      	str	r2, [r3, #48]	; 0x30
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_DMA_Init+0x38>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	2201      	movs	r2, #1
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	200b      	movs	r0, #11
 80004b0:	f000 fd92 	bl	8000fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80004b4:	200b      	movs	r0, #11
 80004b6:	f000 fda4 	bl	8001002 <HAL_NVIC_EnableIRQ>

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <ErrorHandler>:
// Event handles
//**************************************

// When an error is detected call Error_Event and go to the aborted state
eFsmState ErrorHandler(eFsmPeripheriesData *sPeripheries)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
    // TODO turn everything off and to the safe position
    return Aborted_State;
 80004d0:	2305      	movs	r3, #5
}
 80004d2:	0018      	movs	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}

080004da <RecivedArmHandler>:

// Go from idle to standby
eFsmState RecivedArmHandler(eFsmPeripheriesData *sPeripheries)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
    // TODO turn on pwr supply for igiter (i.e. turn on the buck converter)

    return Standby_State;
 80004e2:	2301      	movs	r3, #1
}
 80004e4:	0018      	movs	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b002      	add	sp, #8
 80004ea:	bd80      	pop	{r7, pc}

080004ec <RevicedLaunchHandler>:

// Turn igniter on
eFsmState RevicedLaunchHandler(eFsmPeripheriesData *sPeripheries)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    // TODO turn on mosfet to allow current to travel to the igiter
    return Igniter_On_State;
 80004f4:	2302      	movs	r3, #2
}
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}

080004fe <AlarmOpenValveHandler>:

// Timer finishes counting to open clock
eFsmState AlarmOpenValveHandler(eFsmPeripheriesData *sPeripheries)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
    // TODO Open servo
    return Valve_Open_State;
 8000506:	2303      	movs	r3, #3
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	b002      	add	sp, #8
 800050e:	bd80      	pop	{r7, pc}

08000510 <AlarmTurnOffIgniterHandler>:

// Timer finishes counting to turn igniter off
eFsmState AlarmTurnOffIgniterHandler(eFsmPeripheriesData *sPeripheries)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    // TODO turn off mosfet and turn off pwr supply for igniter
    return Igniter_Off_State;
 8000518:	2304      	movs	r3, #4
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}

08000522 <ResetHandler>:

// When in the aborted state it can be reset
eFsmState ResetHandler(eFsmPeripheriesData *sPeripheries)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
    // TODO move all vars needed to be in the idle state
    return Idle_State;
 800052a:	2300      	movs	r3, #0
}
 800052c:	0018      	movs	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	b002      	add	sp, #8
 8000532:	bd80      	pop	{r7, pc}

08000534 <Fsm_Init>:
// Public function
//*****************************************

// Initialize finite state machine
void Fsm_Init()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
    eFsmCurrentState = Idle_State;
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <Fsm_Init+0x10>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
    return;
 800053e:	46c0      	nop			; (mov r8, r8)
}
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000000 	.word	0x20000000

08000548 <Fsm_SendEvent>:
    return eFsmCurrentState;
}

// Get event
void Fsm_SendEvent(eFsmEvent Event)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	0002      	movs	r2, r0
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	701a      	strb	r2, [r3, #0]
    // TODO! validation ect;
    eFsmNewEvent = Event;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <Fsm_SendEvent+0x1c>)
 8000556:	1dfa      	adds	r2, r7, #7
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	701a      	strb	r2, [r3, #0]
    return;
 800055c:	46c0      	nop			; (mov r8, r8)
}
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000001 	.word	0x20000001

08000568 <Fsm_Step>:

// Step the finite state machines logic
void Fsm_Step(eFsmPeripheriesData *sPeripheries)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
        [Igniter_Off_State] = {[Error_Event] = ErrorHandler, [Reset_Event]              = ResetHandler               },
        [Aborted_State]     = {[Error_Event] = ErrorHandler, [Reset_Event]              = ResetHandler               }
    };

    // Validate that both state and event are valid and that there is a event handler at the event for this state
    if ((eFsmCurrentState < Last_State) && (eFsmNewEvent < Last_Event) && FSM[eFsmCurrentState][eFsmNewEvent] != NULL)
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <Fsm_Step+0x78>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b05      	cmp	r3, #5
 8000576:	d82e      	bhi.n	80005d6 <Fsm_Step+0x6e>
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <Fsm_Step+0x7c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b05      	cmp	r3, #5
 800057e:	d82a      	bhi.n	80005d6 <Fsm_Step+0x6e>
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <Fsm_Step+0x78>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	0019      	movs	r1, r3
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <Fsm_Step+0x7c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	0018      	movs	r0, r3
 800058c:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <Fsm_Step+0x80>)
 800058e:	000b      	movs	r3, r1
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	185b      	adds	r3, r3, r1
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	181b      	adds	r3, r3, r0
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	589b      	ldr	r3, [r3, r2]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d01a      	beq.n	80005d6 <Fsm_Step+0x6e>
    {
        // Call the event handler at the end of the function pointer
        eFsmCurrentState = (*FSM[eFsmCurrentState][eFsmNewEvent])(sPeripheries);
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <Fsm_Step+0x78>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	0019      	movs	r1, r3
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <Fsm_Step+0x7c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	0018      	movs	r0, r3
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <Fsm_Step+0x80>)
 80005ae:	000b      	movs	r3, r1
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	185b      	adds	r3, r3, r1
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	181b      	adds	r3, r3, r0
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	589b      	ldr	r3, [r3, r2]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	0010      	movs	r0, r2
 80005c0:	4798      	blx	r3
 80005c2:	0003      	movs	r3, r0
 80005c4:	001a      	movs	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <Fsm_Step+0x78>)
 80005c8:	701a      	strb	r2, [r3, #0]
        SendStateMsg(eFsmCurrentState);
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <Fsm_Step+0x78>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 f80c 	bl	80005ec <SendStateMsg>
    {
        //TODO Maybe this could also trigger and abort???
    }

    
    return;
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46c0      	nop			; (mov r8, r8)
}
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000001 	.word	0x20000001
 80005e8:	08004904 	.word	0x08004904

080005ec <SendStateMsg>:
// Private helper function implementations
//*****************************************

// Anounce on UART that it has moved to a state
void SendStateMsg(eFsmState state)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	701a      	strb	r2, [r3, #0]
    // Needs to be a static becuase the memory is deallocated when this function is removed from the stack before DMA has finished moving it
    static char msgBuff[MSGBUFF_SIZE];
    int  n = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]

    n = sprintf(msgBuff, "State: %s\r\n", eFsmStateNames[state]);
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	0013      	movs	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	189b      	adds	r3, r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <SendStateMsg+0x4c>)
 800060a:	189a      	adds	r2, r3, r2
 800060c:	490b      	ldr	r1, [pc, #44]	; (800063c <SendStateMsg+0x50>)
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <SendStateMsg+0x54>)
 8000610:	0018      	movs	r0, r3
 8000612:	f003 fd33 	bl	800407c <siprintf>
 8000616:	0003      	movs	r3, r0
 8000618:	60fb      	str	r3, [r7, #12]
    if (n <= 0)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b00      	cmp	r3, #0
 800061e:	dd07      	ble.n	8000630 <SendStateMsg+0x44>
    {
        // Somthing went wrong BUT DONT CRASH
    }
    else
    {
        if (HAL_UART_Transmit_DMA(&huart2, msgBuff, n) != HAL_OK)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	b29a      	uxth	r2, r3
 8000624:	4906      	ldr	r1, [pc, #24]	; (8000640 <SendStateMsg+0x54>)
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <SendStateMsg+0x58>)
 8000628:	0018      	movs	r0, r3
 800062a:	f002 fd5f 	bl	80030ec <HAL_UART_Transmit_DMA>
        {}
    }

    return;
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46c0      	nop			; (mov r8, r8)
}
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}
 8000638:	080048b0 	.word	0x080048b0
 800063c:	080048a4 	.word	0x080048a4
 8000640:	20000090 	.word	0x20000090
 8000644:	2000018c 	.word	0x2000018c

08000648 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	0018      	movs	r0, r3
 8000652:	2314      	movs	r3, #20
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f003 fd08 	bl	800406c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_GPIO_Init+0x88>)
 800065e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_GPIO_Init+0x88>)
 8000662:	2101      	movs	r1, #1
 8000664:	430a      	orrs	r2, r1
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_GPIO_Init+0x88>)
 800066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066c:	2201      	movs	r2, #1
 800066e:	4013      	ands	r3, r2
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IGN_CONTROL_Pin|IGN_PWR_Pin, GPIO_PIN_RESET);
 8000674:	23a0      	movs	r3, #160	; 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	2200      	movs	r2, #0
 800067a:	21c0      	movs	r1, #192	; 0xc0
 800067c:	0018      	movs	r0, r3
 800067e:	f001 f88d 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FB1_Pin|FB2_Pin;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2230      	movs	r2, #48	; 0x30
 8000686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	1d3a      	adds	r2, r7, #4
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 ff0f 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IGN_CONTROL_Pin|IGN_PWR_Pin;
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	22c0      	movs	r2, #192	; 0xc0
 80006a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2201      	movs	r2, #1
 80006ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	1d3a      	adds	r2, r7, #4
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fefc 	bl	80014c0 <HAL_GPIO_Init>

}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b006      	add	sp, #24
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f861 	bl	80017d8 <HAL_I2C_Init>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f8eb 	bl	80008f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x74>)
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f001 f8ee 	bl	8001904 <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f8e2 	bl	80008f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000732:	2100      	movs	r1, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 f931 	bl	800199c <HAL_I2CEx_ConfigDigitalFilter>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f8d9 	bl	80008f4 <Error_Handler>
  }

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000b8 	.word	0x200000b8
 800074c:	40005400 	.word	0x40005400
 8000750:	00303d5b 	.word	0x00303d5b

08000754 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	230c      	movs	r3, #12
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f003 fc80 	bl	800406c <memset>
  if(i2cHandle->Instance==I2C1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <HAL_I2C_MspInit+0x80>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d12a      	bne.n	80007cc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_I2C_MspInit+0x84>)
 8000778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_I2C_MspInit+0x84>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_I2C_MspInit+0x84>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800078e:	210c      	movs	r1, #12
 8000790:	187b      	adds	r3, r7, r1
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	00d2      	lsls	r2, r2, #3
 8000796:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2212      	movs	r2, #18
 800079c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2201      	movs	r2, #1
 80007a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2203      	movs	r2, #3
 80007a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2201      	movs	r2, #1
 80007ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	187a      	adds	r2, r7, r1
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fe81 	bl	80014c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_I2C_MspInit+0x84>)
 80007c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_I2C_MspInit+0x84>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	0389      	lsls	r1, r1, #14
 80007c8:	430a      	orrs	r2, r1
 80007ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b008      	add	sp, #32
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40021000 	.word	0x40021000

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fabb 	bl	8000d5c <HAL_Init>

  /* USER CODE BEGIN Init */
  Fsm_Init();
 80007e6:	f7ff fea5 	bl	8000534 <Fsm_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f819 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f7ff ff2b 	bl	8000648 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f2:	f7ff fe4b 	bl	800048c <MX_DMA_Init>
  MX_I2C1_Init();
 80007f6:	f7ff ff6d 	bl	80006d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80007fa:	f000 f8ff 	bl	80009fc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007fe:	f000 f9d9 	bl	8000bb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  int i = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Update FSM TODO
	  Fsm_SendEvent(Last_Event);
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff fe9e 	bl	8000548 <Fsm_SendEvent>
	  // Run FSM logic
	  Fsm_Step(&periData);
 800080c:	003b      	movs	r3, r7
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff feaa 	bl	8000568 <Fsm_Step>
    //char msgBuff[50];
    //int n;
    //n = sprintf(msgBuff, "State: %d \r\n", i++);
    //HAL_UART_Transmit_DMA(&huart2, msgBuff, n);
//
    HAL_Delay(1000);
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fb0f 	bl	8000e3c <HAL_Delay>
	  Fsm_SendEvent(Last_Event);
 800081e:	e7f2      	b.n	8000806 <main+0x2a>

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b099      	sub	sp, #100	; 0x64
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	242c      	movs	r4, #44	; 0x2c
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2334      	movs	r3, #52	; 0x34
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f003 fc1b 	bl	800406c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000836:	2318      	movs	r3, #24
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2314      	movs	r3, #20
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f003 fc13 	bl	800406c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000846:	003b      	movs	r3, r7
 8000848:	0018      	movs	r0, r3
 800084a:	2318      	movs	r3, #24
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f003 fc0c 	bl	800406c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <SystemClock_Config+0xcc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <SystemClock_Config+0xd0>)
 800085a:	401a      	ands	r2, r3
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <SystemClock_Config+0xcc>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	0109      	lsls	r1, r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000866:	0021      	movs	r1, r4
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2202      	movs	r2, #2
 800086c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2210      	movs	r2, #16
 8000878:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	187b      	adds	r3, r7, r1
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f8d6 	bl	8001a34 <HAL_RCC_OscConfig>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800088c:	f000 f832 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	2118      	movs	r1, #24
 8000892:	187b      	adds	r3, r7, r1
 8000894:	220f      	movs	r2, #15
 8000896:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fc3d 	bl	8002134 <HAL_RCC_ClockConfig>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008be:	f000 f819 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80008c2:	003b      	movs	r3, r7
 80008c4:	220a      	movs	r2, #10
 80008c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c8:	003b      	movs	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008ce:	003b      	movs	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	003b      	movs	r3, r7
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fe4c 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008e0:	f000 f808 	bl	80008f4 <Error_Handler>
  }
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b019      	add	sp, #100	; 0x64
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	40007000 	.word	0x40007000
 80008f0:	ffffe7ff 	.word	0xffffe7ff

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fa:	e7fe      	b.n	80008fa <Error_Handler+0x6>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_MspInit+0x24>)
 8000902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x24>)
 8000906:	2101      	movs	r1, #1
 8000908:	430a      	orrs	r2, r1
 800090a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_MspInit+0x24>)
 800090e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_MspInit+0x24>)
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	0549      	lsls	r1, r1, #21
 8000916:	430a      	orrs	r2, r1
 8000918:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 fa5c 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fcd4 	bl	8001308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000144 	.word	0x20000144

0800096c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <USART2_IRQHandler+0x14>)
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fc4c 	bl	8003210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	2000018c 	.word	0x2000018c

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	18d3      	adds	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f003 fb30 	bl	8004018 <__errno>
 80009b8:	0003      	movs	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	2301      	movs	r3, #1
 80009c0:	425b      	negs	r3, r3
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	18d2      	adds	r2, r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b006      	add	sp, #24
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20002000 	.word	0x20002000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200000ac 	.word	0x200000ac
 80009ec:	20000218 	.word	0x20000218

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	2318      	movs	r3, #24
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	2310      	movs	r3, #16
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f003 fb2d 	bl	800406c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	2310      	movs	r3, #16
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	0018      	movs	r0, r3
 8000a18:	2308      	movs	r3, #8
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f003 fb25 	bl	800406c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a22:	003b      	movs	r3, r7
 8000a24:	0018      	movs	r0, r3
 8000a26:	2310      	movs	r3, #16
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f003 fb1e 	bl	800406c <memset>

  htim2.Instance = TIM2;
 8000a30:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	05d2      	lsls	r2, r2, #23
 8000a36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a38:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a44:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <MX_TIM2_Init+0x110>)
 8000a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 feb3 	bl	80027c4 <HAL_TIM_Base_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f7ff ff47 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	2118      	movs	r1, #24
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	0152      	lsls	r2, r2, #5
 8000a6e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 ffdc 	bl	8002a34 <HAL_TIM_ConfigClockSource>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000a80:	f7ff ff38 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f001 fedc 	bl	8002844 <HAL_TIM_PWM_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a90:	f7ff ff30 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2110      	movs	r1, #16
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa2:	187a      	adds	r2, r7, r1
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 fa73 	bl	8002f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000ab2:	f7ff ff1f 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2260      	movs	r2, #96	; 0x60
 8000aba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ace:	0039      	movs	r1, r7
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 fefd 	bl	80028d4 <HAL_TIM_PWM_ConfigChannel>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000ade:	f7ff ff09 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae2:	0039      	movs	r1, r7
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fef3 	bl	80028d4 <HAL_TIM_PWM_ConfigChannel>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000af2:	f7ff feff 	bl	80008f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <MX_TIM2_Init+0x10c>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 f81f 	bl	8000b3c <HAL_TIM_MspPostInit>

}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b00a      	add	sp, #40	; 0x28
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	0000ffff 	.word	0x0000ffff

08000b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d105      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <HAL_TIM_Base_MspInit+0x28>)
 8000b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_TIM_Base_MspInit+0x28>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	230c      	movs	r3, #12
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f003 fa8c 	bl	800406c <memset>
  if(timHandle->Instance==TIM2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d122      	bne.n	8000ba6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_TIM_MspPostInit+0x74>)
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_TIM_MspPostInit+0x74>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_TIM_MspPostInit+0x74>)
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	2201      	movs	r2, #1
 8000b72:	4013      	ands	r3, r2
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b78:	210c      	movs	r1, #12
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2202      	movs	r2, #2
 8000b84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2202      	movs	r2, #2
 8000b96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	187a      	adds	r2, r7, r1
 8000b9a:	23a0      	movs	r3, #160	; 0xa0
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fc8d 	bl	80014c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b008      	add	sp, #32
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <MX_USART2_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bc0:	22e1      	movs	r2, #225	; 0xe1
 8000bc2:	0252      	lsls	r2, r2, #9
 8000bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f002 fa23 	bl	8003044 <HAL_UART_Init>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f7ff fe77 	bl	80008f4 <Error_Handler>
  }

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000018c 	.word	0x2000018c
 8000c10:	40004400 	.word	0x40004400

08000c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	0018      	movs	r0, r3
 8000c22:	2314      	movs	r3, #20
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f003 fa20 	bl	800406c <memset>
  if(uartHandle->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <HAL_UART_MspInit+0xe4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d15b      	bne.n	8000cee <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <HAL_UART_MspInit+0xe8>)
 8000c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <HAL_UART_MspInit+0xe8>)
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	0289      	lsls	r1, r1, #10
 8000c40:	430a      	orrs	r2, r1
 8000c42:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <HAL_UART_MspInit+0xe8>)
 8000c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_UART_MspInit+0xe8>)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <HAL_UART_MspInit+0xe8>)
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	2201      	movs	r2, #1
 8000c56:	4013      	ands	r3, r2
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c5c:	210c      	movs	r1, #12
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	220c      	movs	r2, #12
 8000c62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2202      	movs	r2, #2
 8000c68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2203      	movs	r2, #3
 8000c74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2204      	movs	r2, #4
 8000c7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	187a      	adds	r2, r7, r1
 8000c7e:	23a0      	movs	r3, #160	; 0xa0
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fc1b 	bl	80014c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_UART_MspInit+0xf0>)
 8000c8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000c98:	2210      	movs	r2, #16
 8000c9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	0152      	lsls	r2, r2, #5
 8000cc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 f9b9 	bl	800103c <HAL_DMA_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000cce:	f7ff fe11 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000cd6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_UART_MspInit+0xec>)
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	201c      	movs	r0, #28
 8000ce4:	f000 f978 	bl	8000fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce8:	201c      	movs	r0, #28
 8000cea:	f000 f98a 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b008      	add	sp, #32
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	20000144 	.word	0x20000144
 8000d04:	40020044 	.word	0x40020044

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d32:	f7ff fe5d 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f003 f975 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fd4f 	bl	80007dc <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
   ldr   r0, =_estack
 8000d40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d4c:	08004a44 	.word	0x08004a44
  ldr r2, =_sbss
 8000d50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d54:	20000218 	.word	0x20000218

08000d58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_COMP_IRQHandler>
	...

08000d5c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x3c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Init+0x3c>)
 8000d6e:	2140      	movs	r1, #64	; 0x40
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 f811 	bl	8000d9c <HAL_InitTick>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e001      	b.n	8000d8a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d86:	f7ff fdb9 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x5c>)
 8000da6:	681c      	ldr	r4, [r3, #0]
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x60>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	0019      	movs	r1, r3
 8000dae:	23fa      	movs	r3, #250	; 0xfa
 8000db0:	0098      	lsls	r0, r3, #2
 8000db2:	f7ff f9a9 	bl	8000108 <__udivsi3>
 8000db6:	0003      	movs	r3, r0
 8000db8:	0019      	movs	r1, r3
 8000dba:	0020      	movs	r0, r4
 8000dbc:	f7ff f9a4 	bl	8000108 <__udivsi3>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f92d 	bl	8001022 <HAL_SYSTICK_Config>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e00f      	b.n	8000df0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d80b      	bhi.n	8000dee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f8fa 	bl	8000fd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_InitTick+0x64>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b003      	add	sp, #12
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000008 	.word	0x20000008

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	18d2      	adds	r2, r2, r3
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_IncTick+0x20>)
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000210 	.word	0x20000210

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000210 	.word	0x20000210

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_Delay+0x40>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	189b      	adds	r3, r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000000c 	.word	0x2000000c

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0002      	movs	r2, r0
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b7f      	cmp	r3, #127	; 0x7f
 8000e92:	d809      	bhi.n	8000ea8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	001a      	movs	r2, r3
 8000e9a:	231f      	movs	r3, #31
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_EnableIRQ+0x30>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4091      	lsls	r1, r2
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec8:	d828      	bhi.n	8000f1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <__NVIC_SetPriority+0xd4>)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	33c0      	adds	r3, #192	; 0xc0
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	589b      	ldr	r3, [r3, r2]
 8000eda:	1dfa      	adds	r2, r7, #7
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	0011      	movs	r1, r2
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	21ff      	movs	r1, #255	; 0xff
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	401a      	ands	r2, r3
 8000ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	401a      	ands	r2, r3
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	0018      	movs	r0, r3
 8000f00:	2303      	movs	r3, #3
 8000f02:	4003      	ands	r3, r0
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	481f      	ldr	r0, [pc, #124]	; (8000f88 <__NVIC_SetPriority+0xd4>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	430a      	orrs	r2, r1
 8000f14:	33c0      	adds	r3, #192	; 0xc0
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f1a:	e031      	b.n	8000f80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <__NVIC_SetPriority+0xd8>)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0019      	movs	r1, r3
 8000f24:	230f      	movs	r3, #15
 8000f26:	400b      	ands	r3, r1
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3306      	adds	r3, #6
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	18d3      	adds	r3, r2, r3
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	1dfa      	adds	r2, r7, #7
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	400a      	ands	r2, r1
 8000f40:	00d2      	lsls	r2, r2, #3
 8000f42:	21ff      	movs	r1, #255	; 0xff
 8000f44:	4091      	lsls	r1, r2
 8000f46:	000a      	movs	r2, r1
 8000f48:	43d2      	mvns	r2, r2
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	401a      	ands	r2, r3
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	4003      	ands	r3, r0
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <__NVIC_SetPriority+0xd8>)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	001c      	movs	r4, r3
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	4023      	ands	r3, r4
 8000f70:	3b08      	subs	r3, #8
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	430a      	orrs	r2, r1
 8000f76:	3306      	adds	r3, #6
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	18c3      	adds	r3, r0, r3
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b003      	add	sp, #12
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <SysTick_Config+0x40>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d901      	bls.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e010      	b.n	8000fc8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <SysTick_Config+0x44>)
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3a01      	subs	r2, #1
 8000fac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff7d 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SysTick_Config+0x44>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x44>)
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	00ffffff 	.word	0x00ffffff
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	0002      	movs	r2, r0
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ffaf 	bl	8000f90 <SysTick_Config>
 8001032:	0003      	movs	r3, r0
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e061      	b.n	8001112 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a32      	ldr	r2, [pc, #200]	; (800111c <HAL_DMA_Init+0xe0>)
 8001054:	4694      	mov	ip, r2
 8001056:	4463      	add	r3, ip
 8001058:	2114      	movs	r1, #20
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff f854 	bl	8000108 <__udivsi3>
 8001060:	0003      	movs	r3, r0
 8001062:	009a      	lsls	r2, r3, #2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <HAL_DMA_Init+0xe4>)
 800106c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2225      	movs	r2, #37	; 0x25
 8001072:	2102      	movs	r1, #2
 8001074:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4a28      	ldr	r2, [pc, #160]	; (8001124 <HAL_DMA_Init+0xe8>)
 8001082:	4013      	ands	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	01db      	lsls	r3, r3, #7
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d018      	beq.n	80010fa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_DMA_Init+0xec>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	211c      	movs	r1, #28
 80010d2:	400b      	ands	r3, r1
 80010d4:	210f      	movs	r1, #15
 80010d6:	4099      	lsls	r1, r3
 80010d8:	000b      	movs	r3, r1
 80010da:	43d9      	mvns	r1, r3
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_DMA_Init+0xec>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_DMA_Init+0xec>)
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	201c      	movs	r0, #28
 80010f0:	4003      	ands	r3, r0
 80010f2:	409a      	lsls	r2, r3
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_DMA_Init+0xec>)
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2225      	movs	r2, #37	; 0x25
 8001104:	2101      	movs	r1, #1
 8001106:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	bffdfff8 	.word	0xbffdfff8
 8001120:	40020000 	.word	0x40020000
 8001124:	ffff800f 	.word	0xffff800f
 8001128:	400200a8 	.word	0x400200a8

0800112c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800113a:	2317      	movs	r3, #23
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2224      	movs	r2, #36	; 0x24
 8001146:	5c9b      	ldrb	r3, [r3, r2]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_DMA_Start_IT+0x24>
 800114c:	2302      	movs	r3, #2
 800114e:	e04f      	b.n	80011f0 <HAL_DMA_Start_IT+0xc4>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2224      	movs	r2, #36	; 0x24
 8001154:	2101      	movs	r1, #1
 8001156:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2225      	movs	r2, #37	; 0x25
 800115c:	5c9b      	ldrb	r3, [r3, r2]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d13a      	bne.n	80011da <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2225      	movs	r2, #37	; 0x25
 8001168:	2102      	movs	r1, #2
 800116a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	438a      	bics	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 f96b 	bl	8001464 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d008      	beq.n	80011a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	210e      	movs	r1, #14
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e00f      	b.n	80011c8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2104      	movs	r1, #4
 80011b4:	438a      	bics	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	210a      	movs	r1, #10
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e007      	b.n	80011ea <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2224      	movs	r2, #36	; 0x24
 80011de:	2100      	movs	r1, #0
 80011e0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011e2:	2317      	movs	r3, #23
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	2202      	movs	r2, #2
 80011e8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80011ea:	2317      	movs	r3, #23
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b006      	add	sp, #24
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2225      	movs	r2, #37	; 0x25
 800120c:	5c9b      	ldrb	r3, [r3, r2]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d008      	beq.n	8001226 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2204      	movs	r2, #4
 8001218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2224      	movs	r2, #36	; 0x24
 800121e:	2100      	movs	r1, #0
 8001220:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e024      	b.n	8001270 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	210e      	movs	r1, #14
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2101      	movs	r1, #1
 8001242:	438a      	bics	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	221c      	movs	r2, #28
 800124c:	401a      	ands	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2101      	movs	r1, #1
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2225      	movs	r2, #37	; 0x25
 800125e:	2101      	movs	r1, #1
 8001260:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2224      	movs	r2, #36	; 0x24
 8001266:	2100      	movs	r1, #0
 8001268:	5499      	strb	r1, [r3, r2]

    return status;
 800126a:	230f      	movs	r3, #15
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	230f      	movs	r3, #15
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2225      	movs	r2, #37	; 0x25
 800128c:	5c9b      	ldrb	r3, [r3, r2]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d007      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800129a:	230f      	movs	r3, #15
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e02a      	b.n	80012fa <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	210e      	movs	r1, #14
 80012b0:	438a      	bics	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2101      	movs	r1, #1
 80012c0:	438a      	bics	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	221c      	movs	r2, #28
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2101      	movs	r1, #1
 80012d2:	4091      	lsls	r1, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2225      	movs	r2, #37	; 0x25
 80012dc:	2101      	movs	r1, #1
 80012de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2224      	movs	r2, #36	; 0x24
 80012e4:	2100      	movs	r1, #0
 80012e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	0010      	movs	r0, r2
 80012f8:	4798      	blx	r3
    }
  }
  return status;
 80012fa:	230f      	movs	r3, #15
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	781b      	ldrb	r3, [r3, #0]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	221c      	movs	r2, #28
 8001326:	4013      	ands	r3, r2
 8001328:	2204      	movs	r2, #4
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	d026      	beq.n	8001382 <HAL_DMA_IRQHandler+0x7a>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2204      	movs	r2, #4
 8001338:	4013      	ands	r3, r2
 800133a:	d022      	beq.n	8001382 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2220      	movs	r2, #32
 8001344:	4013      	ands	r3, r2
 8001346:	d107      	bne.n	8001358 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2104      	movs	r1, #4
 8001354:	438a      	bics	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	221c      	movs	r2, #28
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2104      	movs	r1, #4
 8001366:	4091      	lsls	r1, r2
 8001368:	000a      	movs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	2b00      	cmp	r3, #0
 8001372:	d100      	bne.n	8001376 <HAL_DMA_IRQHandler+0x6e>
 8001374:	e071      	b.n	800145a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	0010      	movs	r0, r2
 800137e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001380:	e06b      	b.n	800145a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	221c      	movs	r2, #28
 8001388:	4013      	ands	r3, r2
 800138a:	2202      	movs	r2, #2
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	d02d      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xea>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d029      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2220      	movs	r2, #32
 80013a6:	4013      	ands	r3, r2
 80013a8:	d10b      	bne.n	80013c2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	210a      	movs	r1, #10
 80013b6:	438a      	bics	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2225      	movs	r2, #37	; 0x25
 80013be:	2101      	movs	r1, #1
 80013c0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	221c      	movs	r2, #28
 80013c8:	401a      	ands	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	2102      	movs	r1, #2
 80013d0:	4091      	lsls	r1, r2
 80013d2:	000a      	movs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2224      	movs	r2, #36	; 0x24
 80013da:	2100      	movs	r1, #0
 80013dc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d039      	beq.n	800145a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	0010      	movs	r0, r2
 80013ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013f0:	e033      	b.n	800145a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	221c      	movs	r2, #28
 80013f8:	4013      	ands	r3, r2
 80013fa:	2208      	movs	r2, #8
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	d02a      	beq.n	800145c <HAL_DMA_IRQHandler+0x154>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2208      	movs	r2, #8
 800140a:	4013      	ands	r3, r2
 800140c:	d026      	beq.n	800145c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	210e      	movs	r1, #14
 800141a:	438a      	bics	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	221c      	movs	r2, #28
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	2101      	movs	r1, #1
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2225      	movs	r2, #37	; 0x25
 800143c:	2101      	movs	r1, #1
 800143e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	0010      	movs	r0, r2
 8001458:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46c0      	nop			; (mov r8, r8)
}
 800145e:	46bd      	mov	sp, r7
 8001460:	b004      	add	sp, #16
 8001462:	bd80      	pop	{r7, pc}

08001464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	221c      	movs	r2, #28
 8001478:	401a      	ands	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	2101      	movs	r1, #1
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b10      	cmp	r3, #16
 8001494:	d108      	bne.n	80014a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014a6:	e007      	b.n	80014b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b004      	add	sp, #16
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014d6:	e149      	b.n	800176c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4091      	lsls	r1, r2
 80014e2:	000a      	movs	r2, r1
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d100      	bne.n	80014f0 <HAL_GPIO_Init+0x30>
 80014ee:	e13a      	b.n	8001766 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d00b      	beq.n	8001510 <HAL_GPIO_Init+0x50>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001504:	2b11      	cmp	r3, #17
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b12      	cmp	r3, #18
 800150e:	d130      	bne.n	8001572 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	409a      	lsls	r2, r3
 800151e:	0013      	movs	r3, r2
 8001520:	43da      	mvns	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	409a      	lsls	r2, r3
 8001532:	0013      	movs	r3, r2
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001546:	2201      	movs	r2, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	2201      	movs	r2, #1
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	43da      	mvns	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0xf2>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d123      	bne.n	80015fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	58d3      	ldr	r3, [r2, r3]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2207      	movs	r2, #7
 80015c4:	4013      	ands	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2107      	movs	r1, #7
 80015de:	400b      	ands	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	6939      	ldr	r1, [r7, #16]
 80015f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	43da      	mvns	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	401a      	ands	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	055b      	lsls	r3, r3, #21
 8001636:	4013      	ands	r3, r2
 8001638:	d100      	bne.n	800163c <HAL_GPIO_Init+0x17c>
 800163a:	e094      	b.n	8001766 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163c:	4b51      	ldr	r3, [pc, #324]	; (8001784 <HAL_GPIO_Init+0x2c4>)
 800163e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_GPIO_Init+0x2c4>)
 8001642:	2101      	movs	r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001648:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	589b      	ldr	r3, [r3, r2]
 8001654:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2203      	movs	r2, #3
 800165a:	4013      	ands	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	409a      	lsls	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	43da      	mvns	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	23a0      	movs	r3, #160	; 0xa0
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	429a      	cmp	r2, r3
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x1de>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a44      	ldr	r2, [pc, #272]	; (800178c <HAL_GPIO_Init+0x2cc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x1da>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a43      	ldr	r2, [pc, #268]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x1d6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_GPIO_Init+0x2d4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x1d2>
 800168e:	2305      	movs	r3, #5
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x1e0>
 8001692:	2306      	movs	r3, #6
 8001694:	e004      	b.n	80016a0 <HAL_GPIO_Init+0x1e0>
 8001696:	2302      	movs	r3, #2
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_Init+0x1e0>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_GPIO_Init+0x1e0>
 800169e:	2300      	movs	r3, #0
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	2103      	movs	r1, #3
 80016a4:	400a      	ands	r2, r1
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	4093      	lsls	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b0:	4935      	ldr	r1, [pc, #212]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43da      	mvns	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	025b      	lsls	r3, r3, #9
 80016d6:	4013      	ands	r3, r2
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	029b      	lsls	r3, r3, #10
 8001700:	4013      	ands	r3, r2
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43da      	mvns	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	035b      	lsls	r3, r3, #13
 800172a:	4013      	ands	r3, r2
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43da      	mvns	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	039b      	lsls	r3, r3, #14
 8001754:	4013      	ands	r3, r2
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	40da      	lsrs	r2, r3
 8001774:	1e13      	subs	r3, r2, #0
 8001776:	d000      	beq.n	800177a <HAL_GPIO_Init+0x2ba>
 8001778:	e6ae      	b.n	80014d8 <HAL_GPIO_Init+0x18>
  }
}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	b006      	add	sp, #24
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	50000400 	.word	0x50000400
 8001790:	50000800 	.word	0x50000800
 8001794:	50001c00 	.word	0x50001c00
 8001798:	40010400 	.word	0x40010400

0800179c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	0008      	movs	r0, r1
 80017a6:	0011      	movs	r1, r2
 80017a8:	1cbb      	adds	r3, r7, #2
 80017aa:	1c02      	adds	r2, r0, #0
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	1c7b      	adds	r3, r7, #1
 80017b0:	1c0a      	adds	r2, r1, #0
 80017b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b4:	1c7b      	adds	r3, r7, #1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017bc:	1cbb      	adds	r3, r7, #2
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017c4:	e003      	b.n	80017ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017c6:	1cbb      	adds	r3, r7, #2
 80017c8:	881a      	ldrh	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e082      	b.n	80018f0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2241      	movs	r2, #65	; 0x41
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7fe ffa7 	bl	8000754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2241      	movs	r2, #65	; 0x41
 800180a:	2124      	movs	r1, #36	; 0x24
 800180c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	438a      	bics	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_I2C_Init+0x120>)
 8001828:	400a      	ands	r2, r1
 800182a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4931      	ldr	r1, [pc, #196]	; (80018fc <HAL_I2C_Init+0x124>)
 8001838:	400a      	ands	r2, r1
 800183a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0209      	lsls	r1, r1, #8
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	e007      	b.n	8001866 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2184      	movs	r1, #132	; 0x84
 8001860:	0209      	lsls	r1, r1, #8
 8001862:	430a      	orrs	r2, r1
 8001864:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d104      	bne.n	8001878 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	491f      	ldr	r1, [pc, #124]	; (8001900 <HAL_I2C_Init+0x128>)
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	491a      	ldr	r1, [pc, #104]	; (80018fc <HAL_I2C_Init+0x124>)
 8001894:	400a      	ands	r2, r1
 8001896:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	0011      	movs	r1, r2
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	021a      	lsls	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69d9      	ldr	r1, [r3, #28]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2241      	movs	r2, #65	; 0x41
 80018dc:	2120      	movs	r1, #32
 80018de:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2242      	movs	r2, #66	; 0x42
 80018ea:	2100      	movs	r1, #0
 80018ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	f0ffffff 	.word	0xf0ffffff
 80018fc:	ffff7fff 	.word	0xffff7fff
 8001900:	02008000 	.word	0x02008000

08001904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2241      	movs	r2, #65	; 0x41
 8001912:	5c9b      	ldrb	r3, [r3, r2]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b20      	cmp	r3, #32
 8001918:	d138      	bne.n	800198c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2240      	movs	r2, #64	; 0x40
 800191e:	5c9b      	ldrb	r3, [r3, r2]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001924:	2302      	movs	r3, #2
 8001926:	e032      	b.n	800198e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	2101      	movs	r1, #1
 800192e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2241      	movs	r2, #65	; 0x41
 8001934:	2124      	movs	r1, #36	; 0x24
 8001936:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2101      	movs	r1, #1
 8001944:	438a      	bics	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4911      	ldr	r1, [pc, #68]	; (8001998 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001954:	400a      	ands	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2241      	movs	r2, #65	; 0x41
 800197c:	2120      	movs	r1, #32
 800197e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2240      	movs	r2, #64	; 0x40
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	e000      	b.n	800198e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800198c:	2302      	movs	r3, #2
  }
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	ffffefff 	.word	0xffffefff

0800199c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2241      	movs	r2, #65	; 0x41
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d139      	bne.n	8001a26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	5c9b      	ldrb	r3, [r3, r2]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019bc:	2302      	movs	r3, #2
 80019be:	e033      	b.n	8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	2101      	movs	r1, #1
 80019c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2241      	movs	r2, #65	; 0x41
 80019cc:	2124      	movs	r1, #36	; 0x24
 80019ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	438a      	bics	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2241      	movs	r2, #65	; 0x41
 8001a16:	2120      	movs	r1, #32
 8001a18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
  }
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	fffff0ff 	.word	0xfffff0ff

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f000 fb70 	bl	8002128 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a48:	4bc9      	ldr	r3, [pc, #804]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	220c      	movs	r2, #12
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a52:	4bc7      	ldr	r3, [pc, #796]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x36>
 8001a68:	e07d      	b.n	8001b66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d007      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d112      	bne.n	8001a9c <HAL_RCC_OscConfig+0x68>
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d10d      	bne.n	8001a9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4bbb      	ldr	r3, [pc, #748]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <HAL_RCC_OscConfig+0x5a>
 8001a8c:	e06a      	b.n	8001b64 <HAL_RCC_OscConfig+0x130>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d166      	bne.n	8001b64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 fb46 	bl	8002128 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x84>
 8001aa8:	4bb1      	ldr	r3, [pc, #708]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4bb0      	ldr	r3, [pc, #704]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0249      	lsls	r1, r1, #9
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e027      	b.n	8001b08 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	23a0      	movs	r3, #160	; 0xa0
 8001abe:	02db      	lsls	r3, r3, #11
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xae>
 8001ac4:	4baa      	ldr	r3, [pc, #680]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4ba9      	ldr	r3, [pc, #676]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	02c9      	lsls	r1, r1, #11
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	4ba7      	ldr	r3, [pc, #668]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4ba6      	ldr	r3, [pc, #664]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	0249      	lsls	r1, r1, #9
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e012      	b.n	8001b08 <HAL_RCC_OscConfig+0xd4>
 8001ae2:	4ba3      	ldr	r3, [pc, #652]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4ba2      	ldr	r3, [pc, #648]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ae8:	49a2      	ldr	r1, [pc, #648]	; (8001d74 <HAL_RCC_OscConfig+0x340>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	4ba0      	ldr	r3, [pc, #640]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	025b      	lsls	r3, r3, #9
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4b9c      	ldr	r3, [pc, #624]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b9b      	ldr	r3, [pc, #620]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001b02:	499d      	ldr	r1, [pc, #628]	; (8001d78 <HAL_RCC_OscConfig+0x344>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d014      	beq.n	8001b3a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff f98a 	bl	8000e28 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1a:	f7ff f985 	bl	8000e28 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b64      	cmp	r3, #100	; 0x64
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e2fd      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b2c:	4b90      	ldr	r3, [pc, #576]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0xe6>
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f975 	bl	8000e28 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f970 	bl	8000e28 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e2e8      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b56:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x110>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_OscConfig+0x13e>
 8001b70:	e09a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b7a      	ldr	r3, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001b86:	2120      	movs	r1, #32
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4393      	bics	r3, r2
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d13f      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d13c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2204      	movs	r2, #4
 8001bac:	4013      	ands	r3, r2
 8001bae:	d004      	beq.n	8001bba <HAL_RCC_OscConfig+0x186>
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e2b6      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a6f      	ldr	r2, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x348>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	021a      	lsls	r2, r3, #8
 8001bca:	4b69      	ldr	r3, [pc, #420]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bd0:	4b67      	ldr	r3, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2209      	movs	r2, #9
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be2:	f000 fbef 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8001be6:	0001      	movs	r1, r0
 8001be8:	4b61      	ldr	r3, [pc, #388]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	220f      	movs	r2, #15
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	4a63      	ldr	r2, [pc, #396]	; (8001d80 <HAL_RCC_OscConfig+0x34c>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	40da      	lsrs	r2, r3
 8001bfa:	4b62      	ldr	r3, [pc, #392]	; (8001d84 <HAL_RCC_OscConfig+0x350>)
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001bfe:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <HAL_RCC_OscConfig+0x354>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2513      	movs	r5, #19
 8001c04:	197c      	adds	r4, r7, r5
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff f8c8 	bl	8000d9c <HAL_InitTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c10:	197b      	adds	r3, r7, r5
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d047      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001c18:	2313      	movs	r3, #19
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	e283      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d027      	beq.n	8001c76 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c26:	4b52      	ldr	r3, [pc, #328]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2209      	movs	r2, #9
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4b4f      	ldr	r3, [pc, #316]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f8f6 	bl	8000e28 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff f8f1 	bl	8000e28 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e269      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d0f1      	beq.n	8001c42 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x348>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	021a      	lsls	r2, r3, #8
 8001c6e:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e018      	b.n	8001ca8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	438a      	bics	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff f8d1 	bl	8000e28 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff f8cc 	bl	8000e28 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e244      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d1f1      	bne.n	8001c8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2210      	movs	r2, #16
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x280>
 8001cb2:	e0a2      	b.n	8001dfa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d141      	bne.n	8001d3e <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x29e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e22a      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a2d      	ldr	r2, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x358>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1a      	ldr	r2, [r3, #32]
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	0a19      	lsrs	r1, r3, #8
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	061a      	lsls	r2, r3, #24
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	0b5b      	lsrs	r3, r3, #13
 8001d00:	3301      	adds	r3, #1
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	210f      	movs	r1, #15
 8001d10:	400b      	ands	r3, r1
 8001d12:	491b      	ldr	r1, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x34c>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_OscConfig+0x350>)
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_OscConfig+0x354>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2513      	movs	r5, #19
 8001d22:	197c      	adds	r4, r7, r5
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff f839 	bl	8000d9c <HAL_InitTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d2e:	197b      	adds	r3, r7, r5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d061      	beq.n	8001dfa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001d36:	2313      	movs	r3, #19
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	e1f4      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d03f      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0049      	lsls	r1, r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f868 	bl	8000e28 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d5c:	e018      	b.n	8001d90 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5e:	f7ff f863 	bl	8000e28 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d911      	bls.n	8001d90 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1db      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	fffeffff 	.word	0xfffeffff
 8001d78:	fffbffff 	.word	0xfffbffff
 8001d7c:	ffffe0ff 	.word	0xffffe0ff
 8001d80:	08004994 	.word	0x08004994
 8001d84:	20000004 	.word	0x20000004
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d90:	4bca      	ldr	r3, [pc, #808]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0e0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9c:	4bc7      	ldr	r3, [pc, #796]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4ac7      	ldr	r2, [pc, #796]	; (80020c0 <HAL_RCC_OscConfig+0x68c>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	4bc4      	ldr	r3, [pc, #784]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db0:	4bc2      	ldr	r3, [pc, #776]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	0a19      	lsrs	r1, r3, #8
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	061a      	lsls	r2, r3, #24
 8001dbe:	4bbf      	ldr	r3, [pc, #764]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	e019      	b.n	8001dfa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dc6:	4bbd      	ldr	r3, [pc, #756]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4bbc      	ldr	r3, [pc, #752]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001dcc:	49bd      	ldr	r1, [pc, #756]	; (80020c4 <HAL_RCC_OscConfig+0x690>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f829 	bl	8000e28 <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ddc:	f7ff f824 	bl	8000e28 <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e19c      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dee:	4bb3      	ldr	r3, [pc, #716]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2208      	movs	r2, #8
 8001e00:	4013      	ands	r3, r2
 8001e02:	d036      	beq.n	8001e72 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d019      	beq.n	8001e40 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0c:	4bab      	ldr	r3, [pc, #684]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e10:	4baa      	ldr	r3, [pc, #680]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff f806 	bl	8000e28 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff f801 	bl	8000e28 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e179      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e34:	4ba1      	ldr	r3, [pc, #644]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d0f1      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ee>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e40:	4b9e      	ldr	r3, [pc, #632]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e44:	4b9d      	ldr	r3, [pc, #628]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	438a      	bics	r2, r1
 8001e4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7fe ffec 	bl	8000e28 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe ffe7 	bl	8000e28 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e15f      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e68:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f1      	bne.n	8001e56 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2204      	movs	r2, #4
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCC_OscConfig+0x44a>
 8001e7c:	e0af      	b.n	8001fde <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2323      	movs	r3, #35	; 0x23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	055b      	lsls	r3, r3, #21
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d10a      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b8a      	ldr	r3, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0549      	lsls	r1, r1, #21
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ea0:	2323      	movs	r3, #35	; 0x23
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b87      	ldr	r3, [pc, #540]	; (80020c8 <HAL_RCC_OscConfig+0x694>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d11a      	bne.n	8001eea <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb4:	4b84      	ldr	r3, [pc, #528]	; (80020c8 <HAL_RCC_OscConfig+0x694>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b83      	ldr	r3, [pc, #524]	; (80020c8 <HAL_RCC_OscConfig+0x694>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0049      	lsls	r1, r1, #1
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ffb1 	bl	8000e28 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7fe ffac 	bl	8000e28 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e124      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x694>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_OscConfig+0x4d2>
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001efa:	4b70      	ldr	r3, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0049      	lsls	r1, r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	651a      	str	r2, [r3, #80]	; 0x50
 8001f04:	e031      	b.n	8001f6a <HAL_RCC_OscConfig+0x536>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4f4>
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f12:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f14:	496b      	ldr	r1, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x690>)
 8001f16:	400a      	ands	r2, r1
 8001f18:	651a      	str	r2, [r3, #80]	; 0x50
 8001f1a:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f20:	496a      	ldr	r1, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x698>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	651a      	str	r2, [r3, #80]	; 0x50
 8001f26:	e020      	b.n	8001f6a <HAL_RCC_OscConfig+0x536>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	23a0      	movs	r3, #160	; 0xa0
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d10e      	bne.n	8001f52 <HAL_RCC_OscConfig+0x51e>
 8001f34:	4b61      	ldr	r3, [pc, #388]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f38:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	00c9      	lsls	r1, r1, #3
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	651a      	str	r2, [r3, #80]	; 0x50
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0049      	lsls	r1, r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x536>
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f56:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f58:	495a      	ldr	r1, [pc, #360]	; (80020c4 <HAL_RCC_OscConfig+0x690>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f5e:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f64:	4959      	ldr	r1, [pc, #356]	; (80020cc <HAL_RCC_OscConfig+0x698>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7fe ff59 	bl	8000e28 <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f7a:	e009      	b.n	8001f90 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7fe ff54 	bl	8000e28 <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_OscConfig+0x69c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0cb      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d0ef      	beq.n	8001f7c <HAL_RCC_OscConfig+0x548>
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe ff43 	bl	8000e28 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fa6:	e009      	b.n	8001fbc <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7fe ff3e 	bl	8000e28 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_RCC_OscConfig+0x69c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0b5      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d1ef      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc8:	2323      	movs	r3, #35	; 0x23
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d105      	bne.n	8001fde <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001fd8:	493e      	ldr	r1, [pc, #248]	; (80020d4 <HAL_RCC_OscConfig+0x6a0>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5b4>
 8001fe6:	e09e      	b.n	8002126 <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d100      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5bc>
 8001fee:	e077      	b.n	80020e0 <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d145      	bne.n	8002084 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8001ffe:	4936      	ldr	r1, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x6a4>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe ff10 	bl	8000e28 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe ff0b 	bl	8000e28 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e083      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	049b      	lsls	r3, r3, #18
 8002028:	4013      	ands	r3, r2
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <HAL_RCC_OscConfig+0x6a8>)
 8002032:	4013      	ands	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	431a      	orrs	r2, r3
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	0449      	lsls	r1, r1, #17
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fee5 	bl	8000e28 <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fee0 	bl	8000e28 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e058      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x630>
 8002082:	e050      	b.n	8002126 <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 800208a:	4913      	ldr	r1, [pc, #76]	; (80020d8 <HAL_RCC_OscConfig+0x6a4>)
 800208c:	400a      	ands	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe feca 	bl	8000e28 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe fec5 	bl	8000e28 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e03d      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_RCC_OscConfig+0x688>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	049b      	lsls	r3, r3, #18
 80020b4:	4013      	ands	r3, r2
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x666>
 80020b8:	e035      	b.n	8002126 <HAL_RCC_OscConfig+0x6f2>
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	40021000 	.word	0x40021000
 80020c0:	ffff1fff 	.word	0xffff1fff
 80020c4:	fffffeff 	.word	0xfffffeff
 80020c8:	40007000 	.word	0x40007000
 80020cc:	fffffbff 	.word	0xfffffbff
 80020d0:	00001388 	.word	0x00001388
 80020d4:	efffffff 	.word	0xefffffff
 80020d8:	feffffff 	.word	0xfeffffff
 80020dc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e01d      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_RCC_OscConfig+0x6fc>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	025b      	lsls	r3, r3, #9
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	429a      	cmp	r2, r3
 8002100:	d10f      	bne.n	8002122 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	23f0      	movs	r3, #240	; 0xf0
 8002106:	039b      	lsls	r3, r3, #14
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	23c0      	movs	r3, #192	; 0xc0
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b00a      	add	sp, #40	; 0x28
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e129      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b96      	ldr	r3, [pc, #600]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d91e      	bls.n	8002194 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b93      	ldr	r3, [pc, #588]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	4393      	bics	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	4b90      	ldr	r3, [pc, #576]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002168:	f7fe fe5e 	bl	8000e28 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002170:	e009      	b.n	8002186 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7fe fe59 	bl	8000e28 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a8a      	ldr	r2, [pc, #552]	; (80023a8 <HAL_RCC_ClockConfig+0x274>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e10a      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b87      	ldr	r3, [pc, #540]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2201      	movs	r2, #1
 800218c:	4013      	ands	r3, r2
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2202      	movs	r2, #2
 800219a:	4013      	ands	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219e:	4b83      	ldr	r3, [pc, #524]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	22f0      	movs	r2, #240	; 0xf0
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d100      	bne.n	80021be <HAL_RCC_ClockConfig+0x8a>
 80021bc:	e089      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021c6:	4b79      	ldr	r3, [pc, #484]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	029b      	lsls	r3, r3, #10
 80021ce:	4013      	ands	r3, r2
 80021d0:	d120      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0e2      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021de:	4b73      	ldr	r3, [pc, #460]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	049b      	lsls	r3, r3, #18
 80021e6:	4013      	ands	r3, r2
 80021e8:	d114      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0d6      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021f6:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d109      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cb      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002204:	4b69      	ldr	r3, [pc, #420]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4013      	ands	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0c3      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002214:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2203      	movs	r2, #3
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7fe fdfe 	bl	8000e28 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d111      	bne.n	800225c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002238:	e009      	b.n	800224e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223a:	f7fe fdf5 	bl	8000e28 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x274>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0a6      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	220c      	movs	r2, #12
 8002254:	4013      	ands	r3, r2
 8002256:	2b08      	cmp	r3, #8
 8002258:	d1ef      	bne.n	800223a <HAL_RCC_ClockConfig+0x106>
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d111      	bne.n	8002288 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	e009      	b.n	800227a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002266:	f7fe fddf 	bl	8000e28 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	4a4d      	ldr	r2, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x274>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e090      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227a:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	220c      	movs	r2, #12
 8002280:	4013      	ands	r3, r2
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d1ef      	bne.n	8002266 <HAL_RCC_ClockConfig+0x132>
 8002286:	e024      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d11b      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002290:	e009      	b.n	80022a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002292:	f7fe fdc9 	bl	8000e28 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	4a42      	ldr	r2, [pc, #264]	; (80023a8 <HAL_RCC_ClockConfig+0x274>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e07a      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	220c      	movs	r2, #12
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d1ef      	bne.n	8002292 <HAL_RCC_ClockConfig+0x15e>
 80022b2:	e00e      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7fe fdb8 	bl	8000e28 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_RCC_ClockConfig+0x274>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e069      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	220c      	movs	r2, #12
 80022ce:	4013      	ands	r3, r2
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d21e      	bcs.n	800231e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4393      	bics	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022f2:	f7fe fd99 	bl	8000e28 <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	e009      	b.n	8002310 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7fe fd94 	bl	8000e28 <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_RCC_ClockConfig+0x274>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e045      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d1ee      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <HAL_RCC_ClockConfig+0x27c>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2208      	movs	r2, #8
 8002342:	4013      	ands	r3, r2
 8002344:	d00a      	beq.n	800235c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_RCC_ClockConfig+0x280>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	00da      	lsls	r2, r3, #3
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235c:	f000 f832 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002360:	0001      	movs	r1, r0
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	220f      	movs	r2, #15
 800236a:	4013      	ands	r3, r2
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_RCC_ClockConfig+0x284>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	000a      	movs	r2, r1
 8002372:	40da      	lsrs	r2, r3
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_RCC_ClockConfig+0x288>)
 8002376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_RCC_ClockConfig+0x28c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	250b      	movs	r5, #11
 800237e:	197c      	adds	r4, r7, r5
 8002380:	0018      	movs	r0, r3
 8002382:	f7fe fd0b 	bl	8000d9c <HAL_InitTick>
 8002386:	0003      	movs	r3, r0
 8002388:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800238a:	197b      	adds	r3, r7, r5
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8002392:	230b      	movs	r3, #11
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	e000      	b.n	800239c <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b004      	add	sp, #16
 80023a2:	bdb0      	pop	{r4, r5, r7, pc}
 80023a4:	40022000 	.word	0x40022000
 80023a8:	00001388 	.word	0x00001388
 80023ac:	40021000 	.word	0x40021000
 80023b0:	fffff8ff 	.word	0xfffff8ff
 80023b4:	ffffc7ff 	.word	0xffffc7ff
 80023b8:	08004994 	.word	0x08004994
 80023bc:	20000004 	.word	0x20000004
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c6:	b08f      	sub	sp, #60	; 0x3c
 80023c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023ca:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x130>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d2:	230c      	movs	r3, #12
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d00f      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x36>
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d010      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x3c>
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d000      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x20>
 80023e2:	e073      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x130>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2210      	movs	r2, #16
 80023ea:	4013      	ands	r3, r2
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80023ee:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x134>)
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80023f2:	e079      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80023f4:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_GetSysClockFreq+0x138>)
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023f8:	e076      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023fe:	e073      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	0c9a      	lsrs	r2, r3, #18
 8002404:	230f      	movs	r3, #15
 8002406:	401a      	ands	r2, r3
 8002408:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <HAL_RCC_GetSysClockFreq+0x140>)
 800240a:	5c9b      	ldrb	r3, [r3, r2]
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	0d9a      	lsrs	r2, r3, #22
 8002412:	2303      	movs	r3, #3
 8002414:	4013      	ands	r3, r2
 8002416:	3301      	adds	r3, #1
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x130>)
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	025b      	lsls	r3, r3, #9
 8002422:	4013      	ands	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	4a34      	ldr	r2, [pc, #208]	; (8002500 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002430:	2300      	movs	r3, #0
 8002432:	69b8      	ldr	r0, [r7, #24]
 8002434:	69f9      	ldr	r1, [r7, #28]
 8002436:	f7fd ff13 	bl	8000260 <__aeabi_lmul>
 800243a:	0003      	movs	r3, r0
 800243c:	000c      	movs	r4, r1
 800243e:	0018      	movs	r0, r3
 8002440:	0021      	movs	r1, r4
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f7fd fee7 	bl	8000220 <__aeabi_uldivmod>
 8002452:	0003      	movs	r3, r0
 8002454:	000c      	movs	r4, r1
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
 8002458:	e035      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x130>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	4013      	ands	r3, r2
 8002462:	d019      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x134>)
 800246e:	2300      	movs	r3, #0
 8002470:	68b8      	ldr	r0, [r7, #8]
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	f7fd fef4 	bl	8000260 <__aeabi_lmul>
 8002478:	0003      	movs	r3, r0
 800247a:	000c      	movs	r4, r1
 800247c:	0018      	movs	r0, r3
 800247e:	0021      	movs	r1, r4
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f7fd fec8 	bl	8000220 <__aeabi_uldivmod>
 8002490:	0003      	movs	r3, r0
 8002492:	000c      	movs	r4, r1
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
 8002496:	e016      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	0018      	movs	r0, r3
 800249c:	2300      	movs	r3, #0
 800249e:	0019      	movs	r1, r3
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_RCC_GetSysClockFreq+0x138>)
 80024a2:	2300      	movs	r3, #0
 80024a4:	f7fd fedc 	bl	8000260 <__aeabi_lmul>
 80024a8:	0003      	movs	r3, r0
 80024aa:	000c      	movs	r4, r1
 80024ac:	0018      	movs	r0, r3
 80024ae:	0021      	movs	r1, r4
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	001d      	movs	r5, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	001e      	movs	r6, r3
 80024b8:	002a      	movs	r2, r5
 80024ba:	0033      	movs	r3, r6
 80024bc:	f7fd feb0 	bl	8000220 <__aeabi_uldivmod>
 80024c0:	0003      	movs	r3, r0
 80024c2:	000c      	movs	r4, r1
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ca:	e00d      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x130>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	0b5b      	lsrs	r3, r3, #13
 80024d2:	2207      	movs	r2, #7
 80024d4:	4013      	ands	r3, r2
 80024d6:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	3301      	adds	r3, #1
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	0212      	lsls	r2, r2, #8
 80024e0:	409a      	lsls	r2, r3
 80024e2:	0013      	movs	r3, r2
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b00f      	add	sp, #60	; 0x3c
 80024f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	40021000 	.word	0x40021000
 80024f8:	003d0900 	.word	0x003d0900
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200
 8002504:	080049ac 	.word	0x080049ac

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <HAL_RCC_GetHCLKFreq+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff2 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002524:	0001      	movs	r1, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	2207      	movs	r2, #7
 800252e:	4013      	ands	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	40d9      	lsrs	r1, r3
 8002536:	000b      	movs	r3, r1
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	080049a4 	.word	0x080049a4

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800254c:	f7ff ffdc 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002550:	0001      	movs	r1, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	2207      	movs	r2, #7
 800255a:	4013      	ands	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	40d9      	lsrs	r1, r3
 8002562:	000b      	movs	r3, r1
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40021000 	.word	0x40021000
 8002570:	080049a4 	.word	0x080049a4

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800257c:	2317      	movs	r3, #23
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2220      	movs	r2, #32
 800258a:	4013      	ands	r3, r2
 800258c:	d100      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800258e:	e0c3      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002590:	4b82      	ldr	r3, [pc, #520]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	055b      	lsls	r3, r3, #21
 8002598:	4013      	ands	r3, r2
 800259a:	d10a      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b7f      	ldr	r3, [pc, #508]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800259e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a0:	4b7e      	ldr	r3, [pc, #504]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0549      	lsls	r1, r1, #21
 80025a6:	430a      	orrs	r2, r1
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025aa:	2317      	movs	r3, #23
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b7b      	ldr	r3, [pc, #492]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4013      	ands	r3, r2
 80025bc:	d11a      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b78      	ldr	r3, [pc, #480]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b77      	ldr	r3, [pc, #476]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	0049      	lsls	r1, r1, #1
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025cc:	f7fe fc2c 	bl	8000e28 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	e008      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d6:	f7fe fc27 	bl	8000e28 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0d4      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80025f4:	4b69      	ldr	r3, [pc, #420]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	23c0      	movs	r3, #192	; 0xc0
 80025fa:	039b      	lsls	r3, r3, #14
 80025fc:	4013      	ands	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	23c0      	movs	r3, #192	; 0xc0
 8002606:	039b      	lsls	r3, r3, #14
 8002608:	4013      	ands	r3, r2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d013      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	23c0      	movs	r3, #192	; 0xc0
 8002616:	029b      	lsls	r3, r3, #10
 8002618:	401a      	ands	r2, r3
 800261a:	23c0      	movs	r3, #192	; 0xc0
 800261c:	029b      	lsls	r3, r3, #10
 800261e:	429a      	cmp	r2, r3
 8002620:	d10a      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002622:	4b5e      	ldr	r3, [pc, #376]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	401a      	ands	r2, r3
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	429a      	cmp	r2, r3
 8002632:	d101      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0ac      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002638:	4b58      	ldr	r3, [pc, #352]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800263a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800263c:	23c0      	movs	r3, #192	; 0xc0
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d03b      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	23c0      	movs	r3, #192	; 0xc0
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	4013      	ands	r3, r2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	429a      	cmp	r2, r3
 8002658:	d033      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2220      	movs	r2, #32
 8002660:	4013      	ands	r3, r2
 8002662:	d02e      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800266e:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	0309      	lsls	r1, r1, #12
 8002678:	430a      	orrs	r2, r1
 800267a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267c:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800267e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002680:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002682:	4949      	ldr	r1, [pc, #292]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002684:	400a      	ands	r2, r1
 8002686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002688:	4b44      	ldr	r3, [pc, #272]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d014      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fbc6 	bl	8000e28 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a0:	e009      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fbc1 	bl	8000e28 <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	4a3f      	ldr	r2, [pc, #252]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e06d      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026b6:	4b39      	ldr	r3, [pc, #228]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d0ef      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	23c0      	movs	r3, #192	; 0xc0
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	401a      	ands	r2, r3
 80026cc:	23c0      	movs	r3, #192	; 0xc0
 80026ce:	029b      	lsls	r3, r3, #10
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d10c      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a35      	ldr	r2, [pc, #212]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80026da:	4013      	ands	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	23c0      	movs	r3, #192	; 0xc0
 80026e4:	039b      	lsls	r3, r3, #14
 80026e6:	401a      	ands	r2, r3
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	401a      	ands	r2, r3
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002702:	2317      	movs	r3, #23
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800270e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002712:	4928      	ldr	r1, [pc, #160]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002714:	400a      	ands	r2, r1
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	220c      	movs	r2, #12
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002732:	430a      	orrs	r2, r1
 8002734:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2204      	movs	r2, #4
 800273c:	4013      	ands	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002746:	4013      	ands	r3, r2
 8002748:	0019      	movs	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002750:	430a      	orrs	r2, r1
 8002752:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2208      	movs	r2, #8
 800275a:	4013      	ands	r3, r2
 800275c:	d009      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800276e:	430a      	orrs	r2, r1
 8002770:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	4013      	ands	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800277e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800278c:	430a      	orrs	r2, r1
 800278e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	fffcffff 	.word	0xfffcffff
 80027a8:	fff7ffff 	.word	0xfff7ffff
 80027ac:	00001388 	.word	0x00001388
 80027b0:	ffcfffff 	.word	0xffcfffff
 80027b4:	efffffff 	.word	0xefffffff
 80027b8:	fffff3ff 	.word	0xfffff3ff
 80027bc:	ffffcfff 	.word	0xffffcfff
 80027c0:	fff3ffff 	.word	0xfff3ffff

080027c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e032      	b.n	800283c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2239      	movs	r2, #57	; 0x39
 80027da:	5c9b      	ldrb	r3, [r3, r2]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2238      	movs	r2, #56	; 0x38
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fe f98f 	bl	8000b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2239      	movs	r2, #57	; 0x39
 80027f6:	2102      	movs	r1, #2
 80027f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	0019      	movs	r1, r3
 8002804:	0010      	movs	r0, r2
 8002806:	f000 f9d3 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223e      	movs	r2, #62	; 0x3e
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223a      	movs	r2, #58	; 0x3a
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223b      	movs	r2, #59	; 0x3b
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	223c      	movs	r2, #60	; 0x3c
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223d      	movs	r2, #61	; 0x3d
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2239      	movs	r2, #57	; 0x39
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e032      	b.n	80028bc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2239      	movs	r2, #57	; 0x39
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2238      	movs	r2, #56	; 0x38
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f829 	bl	80028c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2239      	movs	r2, #57	; 0x39
 8002876:	2102      	movs	r1, #2
 8002878:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	0019      	movs	r1, r3
 8002884:	0010      	movs	r0, r2
 8002886:	f000 f993 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	223e      	movs	r2, #62	; 0x3e
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	223a      	movs	r2, #58	; 0x3a
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	223b      	movs	r2, #59	; 0x3b
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223c      	movs	r2, #60	; 0x3c
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	223d      	movs	r2, #61	; 0x3d
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2239      	movs	r2, #57	; 0x39
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2238      	movs	r2, #56	; 0x38
 80028e4:	5c9b      	ldrb	r3, [r3, r2]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e09c      	b.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0x154>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2238      	movs	r2, #56	; 0x38
 80028f2:	2101      	movs	r1, #1
 80028f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d029      	beq.n	8002950 <HAL_TIM_PWM_ConfigChannel+0x7c>
 80028fc:	d802      	bhi.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x30>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002902:	e08c      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002904:	2b08      	cmp	r3, #8
 8002906:	d046      	beq.n	8002996 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d065      	beq.n	80029d8 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 800290c:	e087      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	0011      	movs	r1, r2
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f99e 	bl	8002c58 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2108      	movs	r1, #8
 8002928:	430a      	orrs	r2, r1
 800292a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2104      	movs	r1, #4
 8002938:	438a      	bics	r2, r1
 800293a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	619a      	str	r2, [r3, #24]
      break;
 800294e:	e066      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f9b9 	bl	8002cd0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0109      	lsls	r1, r1, #4
 800296c:	430a      	orrs	r2, r1
 800296e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	492d      	ldr	r1, [pc, #180]	; (8002a30 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 800297c:	400a      	ands	r2, r1
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	021a      	lsls	r2, r3, #8
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
      break;
 8002994:	e043      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	0011      	movs	r1, r2
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f9d8 	bl	8002d54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2108      	movs	r1, #8
 80029b0:	430a      	orrs	r2, r1
 80029b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2104      	movs	r1, #4
 80029c0:	438a      	bics	r2, r1
 80029c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69d9      	ldr	r1, [r3, #28]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	61da      	str	r2, [r3, #28]
      break;
 80029d6:	e022      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	0011      	movs	r1, r2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 f9f7 	bl	8002dd4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0109      	lsls	r1, r1, #4
 80029f4:	430a      	orrs	r2, r1
 80029f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	490b      	ldr	r1, [pc, #44]	; (8002a30 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69d9      	ldr	r1, [r3, #28]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	021a      	lsls	r2, r3, #8
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	61da      	str	r2, [r3, #28]
      break;
 8002a1c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2238      	movs	r2, #56	; 0x38
 8002a22:	2100      	movs	r1, #0
 8002a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	fffffbff 	.word	0xfffffbff

08002a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2238      	movs	r2, #56	; 0x38
 8002a42:	5c9b      	ldrb	r3, [r3, r2]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_TIM_ConfigClockSource+0x18>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0ab      	b.n	8002ba4 <HAL_TIM_ConfigClockSource+0x170>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2238      	movs	r2, #56	; 0x38
 8002a50:	2101      	movs	r1, #1
 8002a52:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2239      	movs	r2, #57	; 0x39
 8002a58:	2102      	movs	r1, #2
 8002a5a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2277      	movs	r2, #119	; 0x77
 8002a68:	4393      	bics	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a4f      	ldr	r2, [pc, #316]	; (8002bac <HAL_TIM_ConfigClockSource+0x178>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d100      	bne.n	8002a86 <HAL_TIM_ConfigClockSource+0x52>
 8002a84:	e06b      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x12a>
 8002a86:	d80e      	bhi.n	8002aa6 <HAL_TIM_ConfigClockSource+0x72>
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d100      	bne.n	8002a8e <HAL_TIM_ConfigClockSource+0x5a>
 8002a8c:	e077      	b.n	8002b7e <HAL_TIM_ConfigClockSource+0x14a>
 8002a8e:	d803      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x64>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d100      	bne.n	8002a96 <HAL_TIM_ConfigClockSource+0x62>
 8002a94:	e073      	b.n	8002b7e <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a96:	e07c      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d100      	bne.n	8002a9e <HAL_TIM_ConfigClockSource+0x6a>
 8002a9c:	e06f      	b.n	8002b7e <HAL_TIM_ConfigClockSource+0x14a>
 8002a9e:	2b30      	cmp	r3, #48	; 0x30
 8002aa0:	d100      	bne.n	8002aa4 <HAL_TIM_ConfigClockSource+0x70>
 8002aa2:	e06c      	b.n	8002b7e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002aa4:	e075      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002aa6:	2b70      	cmp	r3, #112	; 0x70
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0x94>
 8002aaa:	d804      	bhi.n	8002ab6 <HAL_TIM_ConfigClockSource+0x82>
 8002aac:	2b50      	cmp	r3, #80	; 0x50
 8002aae:	d036      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xea>
 8002ab0:	2b60      	cmp	r3, #96	; 0x60
 8002ab2:	d044      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002ab4:	e06d      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0152      	lsls	r2, r2, #5
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d068      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x15c>
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	0192      	lsls	r2, r2, #6
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d017      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002ac6:	e064      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f000 fa3c 	bl	8002f54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2277      	movs	r2, #119	; 0x77
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
      break;
 8002af4:	e04d      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f000 fa25 	bl	8002f54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	01c9      	lsls	r1, r1, #7
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
      break;
 8002b1c:	e039      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	f000 f998 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2150      	movs	r1, #80	; 0x50
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f9f2 	bl	8002f20 <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e029      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	f000 f9b6 	bl	8002ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2160      	movs	r1, #96	; 0x60
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f9e2 	bl	8002f20 <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e019      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	f000 f978 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f9d2 	bl	8002f20 <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e009      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0019      	movs	r1, r3
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f000 f9c9 	bl	8002f20 <TIM_ITRx_SetConfig>
        break;
 8002b8e:	e000      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002b90:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2239      	movs	r2, #57	; 0x39
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2238      	movs	r2, #56	; 0x38
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	ffff00ff 	.word	0xffff00ff

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d007      	beq.n	8002bda <TIM_Base_SetConfig+0x2a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <TIM_Base_SetConfig+0x9c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d003      	beq.n	8002bda <TIM_Base_SetConfig+0x2a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <TIM_Base_SetConfig+0xa0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d108      	bne.n	8002bec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2270      	movs	r2, #112	; 0x70
 8002bde:	4393      	bics	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0x56>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <TIM_Base_SetConfig+0x9c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0x56>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <TIM_Base_SetConfig+0xa0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <TIM_Base_SetConfig+0xa4>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	001a      	movs	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	615a      	str	r2, [r3, #20]
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40010800 	.word	0x40010800
 8002c50:	40011400 	.word	0x40011400
 8002c54:	fffffcff 	.word	0xfffffcff

08002c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	2201      	movs	r2, #1
 8002c68:	4393      	bics	r3, r2
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2270      	movs	r2, #112	; 0x70
 8002c86:	4393      	bics	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	4393      	bics	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b006      	add	sp, #24
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <TIM_OC2_SetConfig+0x7c>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <TIM_OC2_SetConfig+0x80>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b006      	add	sp, #24
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	ffff8fff 	.word	0xffff8fff
 8002d50:	fffffcff 	.word	0xfffffcff

08002d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <TIM_OC3_SetConfig+0x78>)
 8002d64:	401a      	ands	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2270      	movs	r2, #112	; 0x70
 8002d80:	4393      	bics	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2203      	movs	r2, #3
 8002d88:	4393      	bics	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <TIM_OC3_SetConfig+0x7c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b006      	add	sp, #24
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	fffffeff 	.word	0xfffffeff
 8002dd0:	fffffdff 	.word	0xfffffdff

08002dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <TIM_OC4_SetConfig+0x7c>)
 8002de4:	401a      	ands	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <TIM_OC4_SetConfig+0x80>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <TIM_OC4_SetConfig+0x84>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <TIM_OC4_SetConfig+0x88>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	031b      	lsls	r3, r3, #12
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b006      	add	sp, #24
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	ffffefff 	.word	0xffffefff
 8002e54:	ffff8fff 	.word	0xffff8fff
 8002e58:	fffffcff 	.word	0xfffffcff
 8002e5c:	ffffdfff 	.word	0xffffdfff

08002e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4393      	bics	r3, r2
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	22f0      	movs	r2, #240	; 0xf0
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	220a      	movs	r2, #10
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b006      	add	sp, #24
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4393      	bics	r3, r2
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <TIM_TI2_ConfigInputStage+0x60>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	031b      	lsls	r3, r3, #12
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	22a0      	movs	r2, #160	; 0xa0
 8002ef8:	4393      	bics	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b006      	add	sp, #24
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	ffff0fff 	.word	0xffff0fff

08002f20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2270      	movs	r2, #112	; 0x70
 8002f34:	4393      	bics	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	2207      	movs	r2, #7
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <TIM_ETR_SetConfig+0x3c>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b006      	add	sp, #24
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	ffff00ff 	.word	0xffff00ff

08002f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2238      	movs	r2, #56	; 0x38
 8002fa2:	5c9b      	ldrb	r3, [r3, r2]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e042      	b.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2238      	movs	r2, #56	; 0x38
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2239      	movs	r2, #57	; 0x39
 8002fb8:	2102      	movs	r1, #2
 8002fba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2270      	movs	r2, #112	; 0x70
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	05db      	lsls	r3, r3, #23
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d009      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10c      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	4393      	bics	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2239      	movs	r2, #57	; 0x39
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2238      	movs	r2, #56	; 0x38
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b004      	add	sp, #16
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	40010800 	.word	0x40010800
 8003040:	40011400 	.word	0x40011400

08003044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e044      	b.n	80030e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2274      	movs	r2, #116	; 0x74
 8003062:	2100      	movs	r1, #0
 8003064:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd fdd3 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2224      	movs	r2, #36	; 0x24
 8003072:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2101      	movs	r1, #1
 8003080:	438a      	bics	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	0018      	movs	r0, r3
 8003088:	f000 faf0 	bl	800366c <UART_SetConfig>
 800308c:	0003      	movs	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e024      	b.n	80030e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 fd45 	bl	8003b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	490d      	ldr	r1, [pc, #52]	; (80030e8 <HAL_UART_Init+0xa4>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	212a      	movs	r1, #42	; 0x2a
 80030c2:	438a      	bics	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fddd 	bl	8003c98 <UART_CheckIdleState>
 80030de:	0003      	movs	r3, r0
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	ffffb7ff 	.word	0xffffb7ff

080030ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	1dbb      	adds	r3, r7, #6
 80030f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d000      	beq.n	8003104 <HAL_UART_Transmit_DMA+0x18>
 8003102:	e079      	b.n	80031f8 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_UART_Transmit_DMA+0x26>
 800310a:	1dbb      	adds	r3, r7, #6
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e071      	b.n	80031fa <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	015b      	lsls	r3, r3, #5
 800311e:	429a      	cmp	r2, r3
 8003120:	d109      	bne.n	8003136 <HAL_UART_Transmit_DMA+0x4a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d001      	beq.n	8003136 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e061      	b.n	80031fa <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2274      	movs	r2, #116	; 0x74
 800313a:	5c9b      	ldrb	r3, [r3, r2]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_UART_Transmit_DMA+0x58>
 8003140:	2302      	movs	r3, #2
 8003142:	e05a      	b.n	80031fa <HAL_UART_Transmit_DMA+0x10e>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2274      	movs	r2, #116	; 0x74
 8003148:	2101      	movs	r1, #1
 800314a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1dba      	adds	r2, r7, #6
 8003156:	2150      	movs	r1, #80	; 0x50
 8003158:	8812      	ldrh	r2, [r2, #0]
 800315a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1dba      	adds	r2, r7, #6
 8003160:	2152      	movs	r1, #82	; 0x52
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	2100      	movs	r1, #0
 800316c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2221      	movs	r2, #33	; 0x21
 8003172:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02b      	beq.n	80031d4 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003180:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_UART_Transmit_DMA+0x118>)
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003188:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_UART_Transmit_DMA+0x11c>)
 800318a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_UART_Transmit_DMA+0x120>)
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003198:	2200      	movs	r2, #0
 800319a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	0019      	movs	r1, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3328      	adds	r3, #40	; 0x28
 80031ac:	001a      	movs	r2, r3
 80031ae:	1dbb      	adds	r3, r7, #6
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	f7fd ffbb 	bl	800112c <HAL_DMA_Start_IT>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d00c      	beq.n	80031d4 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	2110      	movs	r1, #16
 80031c0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2274      	movs	r2, #116	; 0x74
 80031c6:	2100      	movs	r1, #0
 80031c8:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e012      	b.n	80031fa <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2240      	movs	r2, #64	; 0x40
 80031da:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2274      	movs	r2, #116	; 0x74
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	08003eb1 	.word	0x08003eb1
 8003208:	08003f05 	.word	0x08003f05
 800320c:	08003f23 	.word	0x08003f23

08003210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4ab6      	ldr	r2, [pc, #728]	; (800350c <HAL_UART_IRQHandler+0x2fc>)
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d112      	bne.n	8003264 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2220      	movs	r2, #32
 8003242:	4013      	ands	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2220      	movs	r2, #32
 800324a:	4013      	ands	r3, r2
 800324c:	d00a      	beq.n	8003264 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003252:	2b00      	cmp	r3, #0
 8003254:	d100      	bne.n	8003258 <HAL_UART_IRQHandler+0x48>
 8003256:	e1d6      	b.n	8003606 <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	0010      	movs	r0, r2
 8003260:	4798      	blx	r3
      }
      return;
 8003262:	e1d0      	b.n	8003606 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d100      	bne.n	800326c <HAL_UART_IRQHandler+0x5c>
 800326a:	e0d9      	b.n	8003420 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	d104      	bne.n	800327e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4aa6      	ldr	r2, [pc, #664]	; (8003510 <HAL_UART_IRQHandler+0x300>)
 8003278:	4013      	ands	r3, r2
 800327a:	d100      	bne.n	800327e <HAL_UART_IRQHandler+0x6e>
 800327c:	e0d0      	b.n	8003420 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2201      	movs	r2, #1
 8003282:	4013      	ands	r3, r2
 8003284:	d010      	beq.n	80032a8 <HAL_UART_IRQHandler+0x98>
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4013      	ands	r3, r2
 800328e:	d00b      	beq.n	80032a8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2280      	movs	r2, #128	; 0x80
 800329c:	589b      	ldr	r3, [r3, r2]
 800329e:	2201      	movs	r2, #1
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2202      	movs	r2, #2
 80032ac:	4013      	ands	r3, r2
 80032ae:	d00f      	beq.n	80032d0 <HAL_UART_IRQHandler+0xc0>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2201      	movs	r2, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2202      	movs	r2, #2
 80032be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	589b      	ldr	r3, [r3, r2]
 80032c6:	2204      	movs	r2, #4
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2204      	movs	r2, #4
 80032d4:	4013      	ands	r3, r2
 80032d6:	d00f      	beq.n	80032f8 <HAL_UART_IRQHandler+0xe8>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2201      	movs	r2, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	d00b      	beq.n	80032f8 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2204      	movs	r2, #4
 80032e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	589b      	ldr	r3, [r3, r2]
 80032ee:	2202      	movs	r2, #2
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2208      	movs	r2, #8
 80032fc:	4013      	ands	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	d103      	bne.n	8003310 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800330e:	d00b      	beq.n	8003328 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2208      	movs	r2, #8
 8003316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	589b      	ldr	r3, [r3, r2]
 800331e:	2208      	movs	r2, #8
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	4013      	ands	r3, r2
 8003330:	d011      	beq.n	8003356 <HAL_UART_IRQHandler+0x146>
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	04db      	lsls	r3, r3, #19
 8003338:	4013      	ands	r3, r2
 800333a:	d00c      	beq.n	8003356 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	589b      	ldr	r3, [r3, r2]
 800334c:	2220      	movs	r2, #32
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	589b      	ldr	r3, [r3, r2]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d100      	bne.n	8003362 <HAL_UART_IRQHandler+0x152>
 8003360:	e153      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2220      	movs	r2, #32
 8003366:	4013      	ands	r3, r2
 8003368:	d00c      	beq.n	8003384 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2220      	movs	r2, #32
 800336e:	4013      	ands	r3, r2
 8003370:	d008      	beq.n	8003384 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	0010      	movs	r0, r2
 8003382:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	589b      	ldr	r3, [r3, r2]
 800338a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	4013      	ands	r3, r2
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d003      	beq.n	80033a2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2228      	movs	r2, #40	; 0x28
 800339e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a0:	d033      	beq.n	800340a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 fd53 	bl	8003e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2240      	movs	r2, #64	; 0x40
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d123      	bne.n	8003400 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2140      	movs	r1, #64	; 0x40
 80033c4:	438a      	bics	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a4f      	ldr	r2, [pc, #316]	; (8003514 <HAL_UART_IRQHandler+0x304>)
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	0018      	movs	r0, r3
 80033de:	f7fd ff4b 	bl	8001278 <HAL_DMA_Abort_IT>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d01a      	beq.n	800341c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	0018      	movs	r0, r3
 80033f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e012      	b.n	800341c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f923 	bl	8003644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fe:	e00d      	b.n	800341c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 f91e 	bl	8003644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	e008      	b.n	800341c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f919 	bl	8003644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	2100      	movs	r1, #0
 8003418:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800341a:	e0f6      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	46c0      	nop			; (mov r8, r8)
    return;
 800341e:	e0f4      	b.n	800360a <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	2b01      	cmp	r3, #1
 8003426:	d000      	beq.n	800342a <HAL_UART_IRQHandler+0x21a>
 8003428:	e0b9      	b.n	800359e <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2210      	movs	r2, #16
 800342e:	4013      	ands	r3, r2
 8003430:	d100      	bne.n	8003434 <HAL_UART_IRQHandler+0x224>
 8003432:	e0b4      	b.n	800359e <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2210      	movs	r2, #16
 8003438:	4013      	ands	r3, r2
 800343a:	d100      	bne.n	800343e <HAL_UART_IRQHandler+0x22e>
 800343c:	e0af      	b.n	800359e <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2210      	movs	r2, #16
 8003444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2240      	movs	r2, #64	; 0x40
 800344e:	4013      	ands	r3, r2
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d163      	bne.n	800351c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	2108      	movs	r1, #8
 800345e:	187b      	adds	r3, r7, r1
 8003460:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8003462:	187b      	adds	r3, r7, r1
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d100      	bne.n	800346c <HAL_UART_IRQHandler+0x25c>
 800346a:	e0d0      	b.n	800360e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2258      	movs	r2, #88	; 0x58
 8003470:	5a9b      	ldrh	r3, [r3, r2]
 8003472:	2208      	movs	r2, #8
 8003474:	18ba      	adds	r2, r7, r2
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d300      	bcc.n	800347e <HAL_UART_IRQHandler+0x26e>
 800347c:	e0c7      	b.n	800360e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2208      	movs	r2, #8
 8003482:	18ba      	adds	r2, r7, r2
 8003484:	215a      	movs	r1, #90	; 0x5a
 8003486:	8812      	ldrh	r2, [r2, #0]
 8003488:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2220      	movs	r2, #32
 8003494:	4013      	ands	r3, r2
 8003496:	d12a      	bne.n	80034ee <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	491d      	ldr	r1, [pc, #116]	; (8003518 <HAL_UART_IRQHandler+0x308>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2101      	movs	r1, #1
 80034b4:	438a      	bics	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	438a      	bics	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2110      	movs	r1, #16
 80034e0:	438a      	bics	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fd fe85 	bl	80011f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2258      	movs	r2, #88	; 0x58
 80034f2:	5a9a      	ldrh	r2, [r3, r2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	215a      	movs	r1, #90	; 0x5a
 80034f8:	5a5b      	ldrh	r3, [r3, r1]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0011      	movs	r1, r2
 8003504:	0018      	movs	r0, r3
 8003506:	f000 f8a5 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800350a:	e080      	b.n	800360e <HAL_UART_IRQHandler+0x3fe>
 800350c:	0000080f 	.word	0x0000080f
 8003510:	04000120 	.word	0x04000120
 8003514:	08003fa5 	.word	0x08003fa5
 8003518:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2258      	movs	r2, #88	; 0x58
 8003520:	5a99      	ldrh	r1, [r3, r2]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	225a      	movs	r2, #90	; 0x5a
 8003526:	5a9b      	ldrh	r3, [r3, r2]
 8003528:	b29a      	uxth	r2, r3
 800352a:	230a      	movs	r3, #10
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	1a8a      	subs	r2, r1, r2
 8003530:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	225a      	movs	r2, #90	; 0x5a
 8003536:	5a9b      	ldrh	r3, [r3, r2]
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d100      	bne.n	8003540 <HAL_UART_IRQHandler+0x330>
 800353e:	e068      	b.n	8003612 <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 8003540:	230a      	movs	r3, #10
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4932      	ldr	r1, [pc, #200]	; (8003620 <HAL_UART_IRQHandler+0x410>)
 8003556:	400a      	ands	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	438a      	bics	r2, r1
 8003568:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2110      	movs	r1, #16
 8003588:	438a      	bics	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800358c:	230a      	movs	r3, #10
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	881a      	ldrh	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f85c 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800359c:	e039      	b.n	8003612 <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	035b      	lsls	r3, r3, #13
 80035a4:	4013      	ands	r3, r2
 80035a6:	d00e      	beq.n	80035c6 <HAL_UART_IRQHandler+0x3b6>
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	03db      	lsls	r3, r3, #15
 80035ae:	4013      	ands	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	0352      	lsls	r2, r2, #13
 80035ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 fd21 	bl	8004006 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035c4:	e028      	b.n	8003618 <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	4013      	ands	r3, r2
 80035cc:	d00d      	beq.n	80035ea <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	4013      	ands	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01b      	beq.n	8003616 <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	0010      	movs	r0, r2
 80035e6:	4798      	blx	r3
    }
    return;
 80035e8:	e015      	b.n	8003616 <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2240      	movs	r2, #64	; 0x40
 80035ee:	4013      	ands	r3, r2
 80035f0:	d012      	beq.n	8003618 <HAL_UART_IRQHandler+0x408>
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	4013      	ands	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 fce8 	bl	8003fd2 <UART_EndTransmit_IT>
    return;
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	e008      	b.n	8003618 <HAL_UART_IRQHandler+0x408>
      return;
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	e006      	b.n	8003618 <HAL_UART_IRQHandler+0x408>
    return;
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	e004      	b.n	8003618 <HAL_UART_IRQHandler+0x408>
      return;
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	e002      	b.n	8003618 <HAL_UART_IRQHandler+0x408>
      return;
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	e000      	b.n	8003618 <HAL_UART_IRQHandler+0x408>
    return;
 8003616:	46c0      	nop			; (mov r8, r8)
  }

}
 8003618:	46bd      	mov	sp, r7
 800361a:	b008      	add	sp, #32
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	fffffedf 	.word	0xfffffedf

08003624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	000a      	movs	r2, r1
 800365e:	1cbb      	adds	r3, r7, #2
 8003660:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b002      	add	sp, #8
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	b5b0      	push	{r4, r5, r7, lr}
 800366e:	b08e      	sub	sp, #56	; 0x38
 8003670:	af00      	add	r7, sp, #0
 8003672:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003674:	231a      	movs	r3, #26
 8003676:	2218      	movs	r2, #24
 8003678:	4694      	mov	ip, r2
 800367a:	44bc      	add	ip, r7
 800367c:	4463      	add	r3, ip
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	431a      	orrs	r2, r3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	431a      	orrs	r2, r3
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4313      	orrs	r3, r2
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4aba      	ldr	r2, [pc, #744]	; (800398c <UART_SetConfig+0x320>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4ab6      	ldr	r2, [pc, #728]	; (8003990 <UART_SetConfig+0x324>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4ab0      	ldr	r2, [pc, #704]	; (8003994 <UART_SetConfig+0x328>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036de:	4313      	orrs	r3, r2
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4aab      	ldr	r2, [pc, #684]	; (8003998 <UART_SetConfig+0x32c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4aa7      	ldr	r2, [pc, #668]	; (800399c <UART_SetConfig+0x330>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d137      	bne.n	8003772 <UART_SetConfig+0x106>
 8003702:	4ba7      	ldr	r3, [pc, #668]	; (80039a0 <UART_SetConfig+0x334>)
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	220c      	movs	r2, #12
 8003708:	4013      	ands	r3, r2
 800370a:	2b04      	cmp	r3, #4
 800370c:	d018      	beq.n	8003740 <UART_SetConfig+0xd4>
 800370e:	d802      	bhi.n	8003716 <UART_SetConfig+0xaa>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <UART_SetConfig+0xb4>
 8003714:	e024      	b.n	8003760 <UART_SetConfig+0xf4>
 8003716:	2b08      	cmp	r3, #8
 8003718:	d00a      	beq.n	8003730 <UART_SetConfig+0xc4>
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d018      	beq.n	8003750 <UART_SetConfig+0xe4>
 800371e:	e01f      	b.n	8003760 <UART_SetConfig+0xf4>
 8003720:	231b      	movs	r3, #27
 8003722:	2218      	movs	r2, #24
 8003724:	4694      	mov	ip, r2
 8003726:	44bc      	add	ip, r7
 8003728:	4463      	add	r3, ip
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	e06e      	b.n	800380e <UART_SetConfig+0x1a2>
 8003730:	231b      	movs	r3, #27
 8003732:	2218      	movs	r2, #24
 8003734:	4694      	mov	ip, r2
 8003736:	44bc      	add	ip, r7
 8003738:	4463      	add	r3, ip
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e066      	b.n	800380e <UART_SetConfig+0x1a2>
 8003740:	231b      	movs	r3, #27
 8003742:	2218      	movs	r2, #24
 8003744:	4694      	mov	ip, r2
 8003746:	44bc      	add	ip, r7
 8003748:	4463      	add	r3, ip
 800374a:	2204      	movs	r2, #4
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e05e      	b.n	800380e <UART_SetConfig+0x1a2>
 8003750:	231b      	movs	r3, #27
 8003752:	2218      	movs	r2, #24
 8003754:	4694      	mov	ip, r2
 8003756:	44bc      	add	ip, r7
 8003758:	4463      	add	r3, ip
 800375a:	2208      	movs	r2, #8
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e056      	b.n	800380e <UART_SetConfig+0x1a2>
 8003760:	231b      	movs	r3, #27
 8003762:	2218      	movs	r2, #24
 8003764:	4694      	mov	ip, r2
 8003766:	44bc      	add	ip, r7
 8003768:	4463      	add	r3, ip
 800376a:	2210      	movs	r2, #16
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	e04d      	b.n	800380e <UART_SetConfig+0x1a2>
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a87      	ldr	r2, [pc, #540]	; (8003994 <UART_SetConfig+0x328>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d141      	bne.n	8003800 <UART_SetConfig+0x194>
 800377c:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <UART_SetConfig+0x334>)
 800377e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003780:	23c0      	movs	r3, #192	; 0xc0
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4013      	ands	r3, r2
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	00d2      	lsls	r2, r2, #3
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <UART_SetConfig+0x162>
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	00d2      	lsls	r2, r2, #3
 8003792:	4293      	cmp	r3, r2
 8003794:	d802      	bhi.n	800379c <UART_SetConfig+0x130>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <UART_SetConfig+0x142>
 800379a:	e028      	b.n	80037ee <UART_SetConfig+0x182>
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00c      	beq.n	80037be <UART_SetConfig+0x152>
 80037a4:	22c0      	movs	r2, #192	; 0xc0
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <UART_SetConfig+0x172>
 80037ac:	e01f      	b.n	80037ee <UART_SetConfig+0x182>
 80037ae:	231b      	movs	r3, #27
 80037b0:	2218      	movs	r2, #24
 80037b2:	4694      	mov	ip, r2
 80037b4:	44bc      	add	ip, r7
 80037b6:	4463      	add	r3, ip
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e027      	b.n	800380e <UART_SetConfig+0x1a2>
 80037be:	231b      	movs	r3, #27
 80037c0:	2218      	movs	r2, #24
 80037c2:	4694      	mov	ip, r2
 80037c4:	44bc      	add	ip, r7
 80037c6:	4463      	add	r3, ip
 80037c8:	2202      	movs	r2, #2
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e01f      	b.n	800380e <UART_SetConfig+0x1a2>
 80037ce:	231b      	movs	r3, #27
 80037d0:	2218      	movs	r2, #24
 80037d2:	4694      	mov	ip, r2
 80037d4:	44bc      	add	ip, r7
 80037d6:	4463      	add	r3, ip
 80037d8:	2204      	movs	r2, #4
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e017      	b.n	800380e <UART_SetConfig+0x1a2>
 80037de:	231b      	movs	r3, #27
 80037e0:	2218      	movs	r2, #24
 80037e2:	4694      	mov	ip, r2
 80037e4:	44bc      	add	ip, r7
 80037e6:	4463      	add	r3, ip
 80037e8:	2208      	movs	r2, #8
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e00f      	b.n	800380e <UART_SetConfig+0x1a2>
 80037ee:	231b      	movs	r3, #27
 80037f0:	2218      	movs	r2, #24
 80037f2:	4694      	mov	ip, r2
 80037f4:	44bc      	add	ip, r7
 80037f6:	4463      	add	r3, ip
 80037f8:	2210      	movs	r2, #16
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	e006      	b.n	800380e <UART_SetConfig+0x1a2>
 8003800:	231b      	movs	r3, #27
 8003802:	2218      	movs	r2, #24
 8003804:	4694      	mov	ip, r2
 8003806:	44bc      	add	ip, r7
 8003808:	4463      	add	r3, ip
 800380a:	2210      	movs	r2, #16
 800380c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a60      	ldr	r2, [pc, #384]	; (8003994 <UART_SetConfig+0x328>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d000      	beq.n	800381a <UART_SetConfig+0x1ae>
 8003818:	e085      	b.n	8003926 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800381a:	231b      	movs	r3, #27
 800381c:	2218      	movs	r2, #24
 800381e:	4694      	mov	ip, r2
 8003820:	44bc      	add	ip, r7
 8003822:	4463      	add	r3, ip
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d00d      	beq.n	8003846 <UART_SetConfig+0x1da>
 800382a:	dc02      	bgt.n	8003832 <UART_SetConfig+0x1c6>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <UART_SetConfig+0x1d0>
 8003830:	e01d      	b.n	800386e <UART_SetConfig+0x202>
 8003832:	2b04      	cmp	r3, #4
 8003834:	d012      	beq.n	800385c <UART_SetConfig+0x1f0>
 8003836:	2b08      	cmp	r3, #8
 8003838:	d015      	beq.n	8003866 <UART_SetConfig+0x1fa>
 800383a:	e018      	b.n	800386e <UART_SetConfig+0x202>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383c:	f7fe fe6e 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003840:	0003      	movs	r3, r0
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003844:	e01d      	b.n	8003882 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003846:	4b56      	ldr	r3, [pc, #344]	; (80039a0 <UART_SetConfig+0x334>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2210      	movs	r2, #16
 800384c:	4013      	ands	r3, r2
 800384e:	d002      	beq.n	8003856 <UART_SetConfig+0x1ea>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003850:	4b54      	ldr	r3, [pc, #336]	; (80039a4 <UART_SetConfig+0x338>)
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003854:	e015      	b.n	8003882 <UART_SetConfig+0x216>
          pclk = (uint32_t) HSI_VALUE;
 8003856:	4b54      	ldr	r3, [pc, #336]	; (80039a8 <UART_SetConfig+0x33c>)
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800385a:	e012      	b.n	8003882 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385c:	f7fe fdb2 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8003860:	0003      	movs	r3, r0
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003864:	e00d      	b.n	8003882 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800386c:	e009      	b.n	8003882 <UART_SetConfig+0x216>
      default:
        pclk = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003872:	231a      	movs	r3, #26
 8003874:	2218      	movs	r2, #24
 8003876:	4694      	mov	ip, r2
 8003878:	44bc      	add	ip, r7
 800387a:	4463      	add	r3, ip
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
        break;
 8003880:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d100      	bne.n	800388a <UART_SetConfig+0x21e>
 8003888:	e138      	b.n	8003afc <UART_SetConfig+0x490>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	0013      	movs	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	189b      	adds	r3, r3, r2
 8003894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003896:	429a      	cmp	r2, r3
 8003898:	d305      	bcc.n	80038a6 <UART_SetConfig+0x23a>
          (pclk > (4096U * huart->Init.BaudRate)))
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d907      	bls.n	80038b6 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80038a6:	231a      	movs	r3, #26
 80038a8:	2218      	movs	r2, #24
 80038aa:	4694      	mov	ip, r2
 80038ac:	44bc      	add	ip, r7
 80038ae:	4463      	add	r3, ip
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e122      	b.n	8003afc <UART_SetConfig+0x490>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	6939      	ldr	r1, [r7, #16]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	000b      	movs	r3, r1
 80038c4:	0e1b      	lsrs	r3, r3, #24
 80038c6:	0010      	movs	r0, r2
 80038c8:	0205      	lsls	r5, r0, #8
 80038ca:	431d      	orrs	r5, r3
 80038cc:	000b      	movs	r3, r1
 80038ce:	021c      	lsls	r4, r3, #8
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68b8      	ldr	r0, [r7, #8]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	1900      	adds	r0, r0, r4
 80038e2:	4169      	adcs	r1, r5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f7fc fc95 	bl	8000220 <__aeabi_uldivmod>
 80038f6:	0003      	movs	r3, r0
 80038f8:	000c      	movs	r4, r1
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <UART_SetConfig+0x340>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d908      	bls.n	8003916 <UART_SetConfig+0x2aa>
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <UART_SetConfig+0x344>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d804      	bhi.n	8003916 <UART_SetConfig+0x2aa>
        {
          huart->Instance->BRR = usartdiv;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	e0f2      	b.n	8003afc <UART_SetConfig+0x490>
        }
        else
        {
          ret = HAL_ERROR;
 8003916:	231a      	movs	r3, #26
 8003918:	2218      	movs	r2, #24
 800391a:	4694      	mov	ip, r2
 800391c:	44bc      	add	ip, r7
 800391e:	4463      	add	r3, ip
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e0ea      	b.n	8003afc <UART_SetConfig+0x490>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	429a      	cmp	r2, r3
 8003930:	d000      	beq.n	8003934 <UART_SetConfig+0x2c8>
 8003932:	e08a      	b.n	8003a4a <UART_SetConfig+0x3de>
  {
    switch (clocksource)
 8003934:	231b      	movs	r3, #27
 8003936:	2218      	movs	r2, #24
 8003938:	4694      	mov	ip, r2
 800393a:	44bc      	add	ip, r7
 800393c:	4463      	add	r3, ip
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d839      	bhi.n	80039b8 <UART_SetConfig+0x34c>
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <UART_SetConfig+0x348>)
 8003948:	18d3      	adds	r3, r2, r3
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800394e:	f7fe fde5 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003952:	0003      	movs	r3, r0
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003956:	e039      	b.n	80039cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7fe fdf6 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 800395c:	0003      	movs	r3, r0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003960:	e034      	b.n	80039cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <UART_SetConfig+0x334>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2210      	movs	r2, #16
 8003968:	4013      	ands	r3, r2
 800396a:	d002      	beq.n	8003972 <UART_SetConfig+0x306>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <UART_SetConfig+0x338>)
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003970:	e02c      	b.n	80039cc <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <UART_SetConfig+0x33c>)
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003976:	e029      	b.n	80039cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003978:	f7fe fd24 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 800397c:	0003      	movs	r3, r0
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003980:	e024      	b.n	80039cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003988:	e020      	b.n	80039cc <UART_SetConfig+0x360>
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	efff69f3 	.word	0xefff69f3
 8003990:	ffffcfff 	.word	0xffffcfff
 8003994:	40004800 	.word	0x40004800
 8003998:	fffff4ff 	.word	0xfffff4ff
 800399c:	40004400 	.word	0x40004400
 80039a0:	40021000 	.word	0x40021000
 80039a4:	003d0900 	.word	0x003d0900
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	000002ff 	.word	0x000002ff
 80039b0:	000fffff 	.word	0x000fffff
 80039b4:	080049b8 	.word	0x080049b8
      default:
        pclk = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80039bc:	231a      	movs	r3, #26
 80039be:	2218      	movs	r2, #24
 80039c0:	4694      	mov	ip, r2
 80039c2:	44bc      	add	ip, r7
 80039c4:	4463      	add	r3, ip
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
        break;
 80039ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d100      	bne.n	80039d4 <UART_SetConfig+0x368>
 80039d2:	e093      	b.n	8003afc <UART_SetConfig+0x490>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	005a      	lsls	r2, r3, #1
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	18d2      	adds	r2, r2, r3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	0019      	movs	r1, r3
 80039e6:	0010      	movs	r0, r2
 80039e8:	f7fc fb8e 	bl	8000108 <__udivsi3>
 80039ec:	0003      	movs	r3, r0
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2b0f      	cmp	r3, #15
 80039f6:	d920      	bls.n	8003a3a <UART_SetConfig+0x3ce>
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	4a48      	ldr	r2, [pc, #288]	; (8003b1c <UART_SetConfig+0x4b0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d81c      	bhi.n	8003a3a <UART_SetConfig+0x3ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	200e      	movs	r0, #14
 8003a06:	2418      	movs	r4, #24
 8003a08:	193b      	adds	r3, r7, r4
 8003a0a:	181b      	adds	r3, r3, r0
 8003a0c:	210f      	movs	r1, #15
 8003a0e:	438a      	bics	r2, r1
 8003a10:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2207      	movs	r2, #7
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	181b      	adds	r3, r3, r0
 8003a22:	193a      	adds	r2, r7, r4
 8003a24:	1812      	adds	r2, r2, r0
 8003a26:	8812      	ldrh	r2, [r2, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	193a      	adds	r2, r7, r4
 8003a32:	1812      	adds	r2, r2, r0
 8003a34:	8812      	ldrh	r2, [r2, #0]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e060      	b.n	8003afc <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3a:	231a      	movs	r3, #26
 8003a3c:	2218      	movs	r2, #24
 8003a3e:	4694      	mov	ip, r2
 8003a40:	44bc      	add	ip, r7
 8003a42:	4463      	add	r3, ip
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e058      	b.n	8003afc <UART_SetConfig+0x490>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a4a:	231b      	movs	r3, #27
 8003a4c:	2218      	movs	r2, #24
 8003a4e:	4694      	mov	ip, r2
 8003a50:	44bc      	add	ip, r7
 8003a52:	4463      	add	r3, ip
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d822      	bhi.n	8003aa0 <UART_SetConfig+0x434>
 8003a5a:	009a      	lsls	r2, r3, #2
 8003a5c:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <UART_SetConfig+0x4b4>)
 8003a5e:	18d3      	adds	r3, r2, r3
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a64:	f7fe fd5a 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a6c:	e022      	b.n	8003ab4 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a6e:	f7fe fd6b 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8003a72:	0003      	movs	r3, r0
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a76:	e01d      	b.n	8003ab4 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <UART_SetConfig+0x4b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d002      	beq.n	8003a88 <UART_SetConfig+0x41c>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <UART_SetConfig+0x4bc>)
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a86:	e015      	b.n	8003ab4 <UART_SetConfig+0x448>
          pclk = (uint32_t) HSI_VALUE;
 8003a88:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <UART_SetConfig+0x4c0>)
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a8c:	e012      	b.n	8003ab4 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8e:	f7fe fc99 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8003a92:	0003      	movs	r3, r0
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a96:	e00d      	b.n	8003ab4 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a9e:	e009      	b.n	8003ab4 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003aa4:	231a      	movs	r3, #26
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	4694      	mov	ip, r2
 8003aaa:	44bc      	add	ip, r7
 8003aac:	4463      	add	r3, ip
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
        break;
 8003ab2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d020      	beq.n	8003afc <UART_SetConfig+0x490>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	085a      	lsrs	r2, r3, #1
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	18d2      	adds	r2, r2, r3
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0019      	movs	r1, r3
 8003aca:	0010      	movs	r0, r2
 8003acc:	f7fc fb1c 	bl	8000108 <__udivsi3>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d908      	bls.n	8003aee <UART_SetConfig+0x482>
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	4a0f      	ldr	r2, [pc, #60]	; (8003b1c <UART_SetConfig+0x4b0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d804      	bhi.n	8003aee <UART_SetConfig+0x482>
      {
        huart->Instance->BRR = usartdiv;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	e006      	b.n	8003afc <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8003aee:	231a      	movs	r3, #26
 8003af0:	2218      	movs	r2, #24
 8003af2:	4694      	mov	ip, r2
 8003af4:	44bc      	add	ip, r7
 8003af6:	4463      	add	r3, ip
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2200      	movs	r2, #0
 8003b00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	2200      	movs	r2, #0
 8003b06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b08:	231a      	movs	r3, #26
 8003b0a:	2218      	movs	r2, #24
 8003b0c:	4694      	mov	ip, r2
 8003b0e:	44bc      	add	ip, r7
 8003b10:	4463      	add	r3, ip
 8003b12:	781b      	ldrb	r3, [r3, #0]
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b00e      	add	sp, #56	; 0x38
 8003b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1c:	0000ffff 	.word	0x0000ffff
 8003b20:	080049dc 	.word	0x080049dc
 8003b24:	40021000 	.word	0x40021000
 8003b28:	003d0900 	.word	0x003d0900
 8003b2c:	00f42400 	.word	0x00f42400

08003b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a4a      	ldr	r2, [pc, #296]	; (8003c74 <UART_AdvFeatureConfig+0x144>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a43      	ldr	r2, [pc, #268]	; (8003c78 <UART_AdvFeatureConfig+0x148>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	0019      	movs	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2204      	movs	r2, #4
 8003b82:	4013      	ands	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a3b      	ldr	r2, [pc, #236]	; (8003c7c <UART_AdvFeatureConfig+0x14c>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <UART_AdvFeatureConfig+0x150>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <UART_AdvFeatureConfig+0x154>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2220      	movs	r2, #32
 8003be8:	4013      	ands	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <UART_AdvFeatureConfig+0x158>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2240      	movs	r2, #64	; 0x40
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d01d      	beq.n	8003c4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <UART_AdvFeatureConfig+0x15c>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	035b      	lsls	r3, r3, #13
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d10b      	bne.n	8003c4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	4013      	ands	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a0e      	ldr	r2, [pc, #56]	; (8003c94 <UART_AdvFeatureConfig+0x164>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	fffdffff 	.word	0xfffdffff
 8003c78:	fffeffff 	.word	0xfffeffff
 8003c7c:	fffbffff 	.word	0xfffbffff
 8003c80:	ffff7fff 	.word	0xffff7fff
 8003c84:	ffffefff 	.word	0xffffefff
 8003c88:	ffffdfff 	.word	0xffffdfff
 8003c8c:	ffefffff 	.word	0xffefffff
 8003c90:	ff9fffff 	.word	0xff9fffff
 8003c94:	fff7ffff 	.word	0xfff7ffff

08003c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca8:	f7fd f8be 	bl	8000e28 <HAL_GetTick>
 8003cac:	0003      	movs	r3, r0
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d10d      	bne.n	8003cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	0399      	lsls	r1, r3, #14
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <UART_CheckIdleState+0x90>)
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	0013      	movs	r3, r2
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f000 f82d 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003cd2:	1e03      	subs	r3, r0, #0
 8003cd4:	d001      	beq.n	8003cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e022      	b.n	8003d20 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d10d      	bne.n	8003d04 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	03d9      	lsls	r1, r3, #15
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <UART_CheckIdleState+0x90>)
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	0013      	movs	r3, r2
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f000 f818 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d001      	beq.n	8003d04 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e00d      	b.n	8003d20 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2274      	movs	r2, #116	; 0x74
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b004      	add	sp, #16
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	01ffffff 	.word	0x01ffffff

08003d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3c:	e05e      	b.n	8003dfc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	3301      	adds	r3, #1
 8003d42:	d05b      	beq.n	8003dfc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d44:	f7fd f870 	bl	8000e28 <HAL_GetTick>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11b      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	492f      	ldr	r1, [pc, #188]	; (8003e24 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003d66:	400a      	ands	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	438a      	bics	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2274      	movs	r2, #116	; 0x74
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e044      	b.n	8003e1c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d02e      	beq.n	8003dfc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	401a      	ands	r2, r3
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d124      	bne.n	8003dfc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4917      	ldr	r1, [pc, #92]	; (8003e24 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003dc8:	400a      	ands	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	438a      	bics	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2280      	movs	r2, #128	; 0x80
 8003dec:	2120      	movs	r1, #32
 8003dee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2274      	movs	r2, #116	; 0x74
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e00f      	b.n	8003e1c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4013      	ands	r3, r2
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	425a      	negs	r2, r3
 8003e0c:	4153      	adcs	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	001a      	movs	r2, r3
 8003e12:	1dfb      	adds	r3, r7, #7
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d091      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b004      	add	sp, #16
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	fffffe5f 	.word	0xfffffe5f

08003e28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	21c0      	movs	r1, #192	; 0xc0
 8003e3c:	438a      	bics	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b002      	add	sp, #8
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4912      	ldr	r1, [pc, #72]	; (8003eac <UART_EndRxTransfer+0x5c>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d107      	bne.n	8003e90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b002      	add	sp, #8
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	fffffedf 	.word	0xfffffedf

08003eb0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d114      	bne.n	8003ef4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2252      	movs	r2, #82	; 0x52
 8003ece:	2100      	movs	r1, #0
 8003ed0:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	438a      	bics	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2140      	movs	r1, #64	; 0x40
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ef2:	e003      	b.n	8003efc <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7ff fb94 	bl	8003624 <HAL_UART_TxCpltCallback>
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b004      	add	sp, #16
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff fb8d 	bl	8003634 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b80      	cmp	r3, #128	; 0x80
 8003f48:	d10a      	bne.n	8003f60 <UART_DMAError+0x3e>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b21      	cmp	r3, #33	; 0x21
 8003f4e:	d107      	bne.n	8003f60 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2252      	movs	r2, #82	; 0x52
 8003f54:	2100      	movs	r1, #0
 8003f56:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff ff64 	bl	8003e28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d10a      	bne.n	8003f84 <UART_DMAError+0x62>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b22      	cmp	r3, #34	; 0x22
 8003f72:	d107      	bne.n	8003f84 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	225a      	movs	r2, #90	; 0x5a
 8003f78:	2100      	movs	r1, #0
 8003f7a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7ff ff66 	bl	8003e50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	589b      	ldr	r3, [r3, r2]
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7ff fb54 	bl	8003644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b006      	add	sp, #24
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	225a      	movs	r2, #90	; 0x5a
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2252      	movs	r2, #82	; 0x52
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fb3d 	bl	8003644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b004      	add	sp, #16
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2140      	movs	r1, #64	; 0x40
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff fb13 	bl	8003624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <__errno>:
 8004018:	4b01      	ldr	r3, [pc, #4]	; (8004020 <__errno+0x8>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4770      	bx	lr
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	20000010 	.word	0x20000010

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	2600      	movs	r6, #0
 8004028:	4d0c      	ldr	r5, [pc, #48]	; (800405c <__libc_init_array+0x38>)
 800402a:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	2600      	movs	r6, #0
 8004036:	f000 fc29 	bl	800488c <_init>
 800403a:	4d0a      	ldr	r5, [pc, #40]	; (8004064 <__libc_init_array+0x40>)
 800403c:	4c0a      	ldr	r4, [pc, #40]	; (8004068 <__libc_init_array+0x44>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	00b3      	lsls	r3, r6, #2
 800404a:	58eb      	ldr	r3, [r5, r3]
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	00b3      	lsls	r3, r6, #2
 8004054:	58eb      	ldr	r3, [r5, r3]
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	08004a3c 	.word	0x08004a3c
 8004060:	08004a3c 	.word	0x08004a3c
 8004064:	08004a3c 	.word	0x08004a3c
 8004068:	08004a40 	.word	0x08004a40

0800406c <memset>:
 800406c:	0003      	movs	r3, r0
 800406e:	1812      	adds	r2, r2, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	7019      	strb	r1, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <siprintf>:
 800407c:	b40e      	push	{r1, r2, r3}
 800407e:	b500      	push	{lr}
 8004080:	490b      	ldr	r1, [pc, #44]	; (80040b0 <siprintf+0x34>)
 8004082:	b09c      	sub	sp, #112	; 0x70
 8004084:	ab1d      	add	r3, sp, #116	; 0x74
 8004086:	9002      	str	r0, [sp, #8]
 8004088:	9006      	str	r0, [sp, #24]
 800408a:	9107      	str	r1, [sp, #28]
 800408c:	9104      	str	r1, [sp, #16]
 800408e:	4809      	ldr	r0, [pc, #36]	; (80040b4 <siprintf+0x38>)
 8004090:	4909      	ldr	r1, [pc, #36]	; (80040b8 <siprintf+0x3c>)
 8004092:	cb04      	ldmia	r3!, {r2}
 8004094:	9105      	str	r1, [sp, #20]
 8004096:	6800      	ldr	r0, [r0, #0]
 8004098:	a902      	add	r1, sp, #8
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	f000 f870 	bl	8004180 <_svfiprintf_r>
 80040a0:	2300      	movs	r3, #0
 80040a2:	9a02      	ldr	r2, [sp, #8]
 80040a4:	7013      	strb	r3, [r2, #0]
 80040a6:	b01c      	add	sp, #112	; 0x70
 80040a8:	bc08      	pop	{r3}
 80040aa:	b003      	add	sp, #12
 80040ac:	4718      	bx	r3
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	7fffffff 	.word	0x7fffffff
 80040b4:	20000010 	.word	0x20000010
 80040b8:	ffff0208 	.word	0xffff0208

080040bc <__ssputs_r>:
 80040bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040be:	688e      	ldr	r6, [r1, #8]
 80040c0:	b085      	sub	sp, #20
 80040c2:	0007      	movs	r7, r0
 80040c4:	000c      	movs	r4, r1
 80040c6:	9203      	str	r2, [sp, #12]
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	429e      	cmp	r6, r3
 80040cc:	d83c      	bhi.n	8004148 <__ssputs_r+0x8c>
 80040ce:	2390      	movs	r3, #144	; 0x90
 80040d0:	898a      	ldrh	r2, [r1, #12]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	421a      	tst	r2, r3
 80040d6:	d034      	beq.n	8004142 <__ssputs_r+0x86>
 80040d8:	2503      	movs	r5, #3
 80040da:	6909      	ldr	r1, [r1, #16]
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	1a5b      	subs	r3, r3, r1
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	9802      	ldr	r0, [sp, #8]
 80040e6:	435d      	muls	r5, r3
 80040e8:	0feb      	lsrs	r3, r5, #31
 80040ea:	195d      	adds	r5, r3, r5
 80040ec:	9b01      	ldr	r3, [sp, #4]
 80040ee:	106d      	asrs	r5, r5, #1
 80040f0:	3301      	adds	r3, #1
 80040f2:	181b      	adds	r3, r3, r0
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	d900      	bls.n	80040fa <__ssputs_r+0x3e>
 80040f8:	001d      	movs	r5, r3
 80040fa:	0553      	lsls	r3, r2, #21
 80040fc:	d532      	bpl.n	8004164 <__ssputs_r+0xa8>
 80040fe:	0029      	movs	r1, r5
 8004100:	0038      	movs	r0, r7
 8004102:	f000 fb23 	bl	800474c <_malloc_r>
 8004106:	1e06      	subs	r6, r0, #0
 8004108:	d109      	bne.n	800411e <__ssputs_r+0x62>
 800410a:	230c      	movs	r3, #12
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	2001      	movs	r0, #1
 8004112:	89a2      	ldrh	r2, [r4, #12]
 8004114:	4240      	negs	r0, r0
 8004116:	4313      	orrs	r3, r2
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	b005      	add	sp, #20
 800411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411e:	9a02      	ldr	r2, [sp, #8]
 8004120:	6921      	ldr	r1, [r4, #16]
 8004122:	f000 faac 	bl	800467e <memcpy>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	4a14      	ldr	r2, [pc, #80]	; (800417c <__ssputs_r+0xc0>)
 800412a:	401a      	ands	r2, r3
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	4313      	orrs	r3, r2
 8004130:	81a3      	strh	r3, [r4, #12]
 8004132:	9b02      	ldr	r3, [sp, #8]
 8004134:	6126      	str	r6, [r4, #16]
 8004136:	18f6      	adds	r6, r6, r3
 8004138:	6026      	str	r6, [r4, #0]
 800413a:	6165      	str	r5, [r4, #20]
 800413c:	9e01      	ldr	r6, [sp, #4]
 800413e:	1aed      	subs	r5, r5, r3
 8004140:	60a5      	str	r5, [r4, #8]
 8004142:	9b01      	ldr	r3, [sp, #4]
 8004144:	429e      	cmp	r6, r3
 8004146:	d900      	bls.n	800414a <__ssputs_r+0x8e>
 8004148:	9e01      	ldr	r6, [sp, #4]
 800414a:	0032      	movs	r2, r6
 800414c:	9903      	ldr	r1, [sp, #12]
 800414e:	6820      	ldr	r0, [r4, #0]
 8004150:	f000 fa9e 	bl	8004690 <memmove>
 8004154:	68a3      	ldr	r3, [r4, #8]
 8004156:	2000      	movs	r0, #0
 8004158:	1b9b      	subs	r3, r3, r6
 800415a:	60a3      	str	r3, [r4, #8]
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	199e      	adds	r6, r3, r6
 8004160:	6026      	str	r6, [r4, #0]
 8004162:	e7da      	b.n	800411a <__ssputs_r+0x5e>
 8004164:	002a      	movs	r2, r5
 8004166:	0038      	movs	r0, r7
 8004168:	f000 fb4e 	bl	8004808 <_realloc_r>
 800416c:	1e06      	subs	r6, r0, #0
 800416e:	d1e0      	bne.n	8004132 <__ssputs_r+0x76>
 8004170:	6921      	ldr	r1, [r4, #16]
 8004172:	0038      	movs	r0, r7
 8004174:	f000 faa0 	bl	80046b8 <_free_r>
 8004178:	e7c7      	b.n	800410a <__ssputs_r+0x4e>
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	fffffb7f 	.word	0xfffffb7f

08004180 <_svfiprintf_r>:
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b0a1      	sub	sp, #132	; 0x84
 8004184:	9003      	str	r0, [sp, #12]
 8004186:	001d      	movs	r5, r3
 8004188:	898b      	ldrh	r3, [r1, #12]
 800418a:	000f      	movs	r7, r1
 800418c:	0016      	movs	r6, r2
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	d511      	bpl.n	80041b6 <_svfiprintf_r+0x36>
 8004192:	690b      	ldr	r3, [r1, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10e      	bne.n	80041b6 <_svfiprintf_r+0x36>
 8004198:	2140      	movs	r1, #64	; 0x40
 800419a:	f000 fad7 	bl	800474c <_malloc_r>
 800419e:	6038      	str	r0, [r7, #0]
 80041a0:	6138      	str	r0, [r7, #16]
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d105      	bne.n	80041b2 <_svfiprintf_r+0x32>
 80041a6:	230c      	movs	r3, #12
 80041a8:	9a03      	ldr	r2, [sp, #12]
 80041aa:	3801      	subs	r0, #1
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	b021      	add	sp, #132	; 0x84
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b2:	2340      	movs	r3, #64	; 0x40
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	2300      	movs	r3, #0
 80041b8:	ac08      	add	r4, sp, #32
 80041ba:	6163      	str	r3, [r4, #20]
 80041bc:	3320      	adds	r3, #32
 80041be:	7663      	strb	r3, [r4, #25]
 80041c0:	3310      	adds	r3, #16
 80041c2:	76a3      	strb	r3, [r4, #26]
 80041c4:	9507      	str	r5, [sp, #28]
 80041c6:	0035      	movs	r5, r6
 80041c8:	782b      	ldrb	r3, [r5, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <_svfiprintf_r+0x52>
 80041ce:	2b25      	cmp	r3, #37	; 0x25
 80041d0:	d146      	bne.n	8004260 <_svfiprintf_r+0xe0>
 80041d2:	1bab      	subs	r3, r5, r6
 80041d4:	9305      	str	r3, [sp, #20]
 80041d6:	d00c      	beq.n	80041f2 <_svfiprintf_r+0x72>
 80041d8:	0032      	movs	r2, r6
 80041da:	0039      	movs	r1, r7
 80041dc:	9803      	ldr	r0, [sp, #12]
 80041de:	f7ff ff6d 	bl	80040bc <__ssputs_r>
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d100      	bne.n	80041e8 <_svfiprintf_r+0x68>
 80041e6:	e0ae      	b.n	8004346 <_svfiprintf_r+0x1c6>
 80041e8:	6962      	ldr	r2, [r4, #20]
 80041ea:	9b05      	ldr	r3, [sp, #20]
 80041ec:	4694      	mov	ip, r2
 80041ee:	4463      	add	r3, ip
 80041f0:	6163      	str	r3, [r4, #20]
 80041f2:	782b      	ldrb	r3, [r5, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d100      	bne.n	80041fa <_svfiprintf_r+0x7a>
 80041f8:	e0a5      	b.n	8004346 <_svfiprintf_r+0x1c6>
 80041fa:	2201      	movs	r2, #1
 80041fc:	2300      	movs	r3, #0
 80041fe:	4252      	negs	r2, r2
 8004200:	6062      	str	r2, [r4, #4]
 8004202:	a904      	add	r1, sp, #16
 8004204:	3254      	adds	r2, #84	; 0x54
 8004206:	1852      	adds	r2, r2, r1
 8004208:	1c6e      	adds	r6, r5, #1
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	60e3      	str	r3, [r4, #12]
 800420e:	60a3      	str	r3, [r4, #8]
 8004210:	7013      	strb	r3, [r2, #0]
 8004212:	65a3      	str	r3, [r4, #88]	; 0x58
 8004214:	7831      	ldrb	r1, [r6, #0]
 8004216:	2205      	movs	r2, #5
 8004218:	4853      	ldr	r0, [pc, #332]	; (8004368 <_svfiprintf_r+0x1e8>)
 800421a:	f000 fa25 	bl	8004668 <memchr>
 800421e:	1c75      	adds	r5, r6, #1
 8004220:	2800      	cmp	r0, #0
 8004222:	d11f      	bne.n	8004264 <_svfiprintf_r+0xe4>
 8004224:	6822      	ldr	r2, [r4, #0]
 8004226:	06d3      	lsls	r3, r2, #27
 8004228:	d504      	bpl.n	8004234 <_svfiprintf_r+0xb4>
 800422a:	2353      	movs	r3, #83	; 0x53
 800422c:	a904      	add	r1, sp, #16
 800422e:	185b      	adds	r3, r3, r1
 8004230:	2120      	movs	r1, #32
 8004232:	7019      	strb	r1, [r3, #0]
 8004234:	0713      	lsls	r3, r2, #28
 8004236:	d504      	bpl.n	8004242 <_svfiprintf_r+0xc2>
 8004238:	2353      	movs	r3, #83	; 0x53
 800423a:	a904      	add	r1, sp, #16
 800423c:	185b      	adds	r3, r3, r1
 800423e:	212b      	movs	r1, #43	; 0x2b
 8004240:	7019      	strb	r1, [r3, #0]
 8004242:	7833      	ldrb	r3, [r6, #0]
 8004244:	2b2a      	cmp	r3, #42	; 0x2a
 8004246:	d016      	beq.n	8004276 <_svfiprintf_r+0xf6>
 8004248:	0035      	movs	r5, r6
 800424a:	2100      	movs	r1, #0
 800424c:	200a      	movs	r0, #10
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	782a      	ldrb	r2, [r5, #0]
 8004252:	1c6e      	adds	r6, r5, #1
 8004254:	3a30      	subs	r2, #48	; 0x30
 8004256:	2a09      	cmp	r2, #9
 8004258:	d94e      	bls.n	80042f8 <_svfiprintf_r+0x178>
 800425a:	2900      	cmp	r1, #0
 800425c:	d018      	beq.n	8004290 <_svfiprintf_r+0x110>
 800425e:	e010      	b.n	8004282 <_svfiprintf_r+0x102>
 8004260:	3501      	adds	r5, #1
 8004262:	e7b1      	b.n	80041c8 <_svfiprintf_r+0x48>
 8004264:	4b40      	ldr	r3, [pc, #256]	; (8004368 <_svfiprintf_r+0x1e8>)
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	1ac0      	subs	r0, r0, r3
 800426a:	2301      	movs	r3, #1
 800426c:	4083      	lsls	r3, r0
 800426e:	4313      	orrs	r3, r2
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	002e      	movs	r6, r5
 8004274:	e7ce      	b.n	8004214 <_svfiprintf_r+0x94>
 8004276:	9b07      	ldr	r3, [sp, #28]
 8004278:	1d19      	adds	r1, r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	9107      	str	r1, [sp, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	db01      	blt.n	8004286 <_svfiprintf_r+0x106>
 8004282:	930b      	str	r3, [sp, #44]	; 0x2c
 8004284:	e004      	b.n	8004290 <_svfiprintf_r+0x110>
 8004286:	425b      	negs	r3, r3
 8004288:	60e3      	str	r3, [r4, #12]
 800428a:	2302      	movs	r3, #2
 800428c:	4313      	orrs	r3, r2
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	782b      	ldrb	r3, [r5, #0]
 8004292:	2b2e      	cmp	r3, #46	; 0x2e
 8004294:	d10a      	bne.n	80042ac <_svfiprintf_r+0x12c>
 8004296:	786b      	ldrb	r3, [r5, #1]
 8004298:	2b2a      	cmp	r3, #42	; 0x2a
 800429a:	d135      	bne.n	8004308 <_svfiprintf_r+0x188>
 800429c:	9b07      	ldr	r3, [sp, #28]
 800429e:	3502      	adds	r5, #2
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	9207      	str	r2, [sp, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db2b      	blt.n	8004302 <_svfiprintf_r+0x182>
 80042aa:	9309      	str	r3, [sp, #36]	; 0x24
 80042ac:	4e2f      	ldr	r6, [pc, #188]	; (800436c <_svfiprintf_r+0x1ec>)
 80042ae:	7829      	ldrb	r1, [r5, #0]
 80042b0:	2203      	movs	r2, #3
 80042b2:	0030      	movs	r0, r6
 80042b4:	f000 f9d8 	bl	8004668 <memchr>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d006      	beq.n	80042ca <_svfiprintf_r+0x14a>
 80042bc:	2340      	movs	r3, #64	; 0x40
 80042be:	1b80      	subs	r0, r0, r6
 80042c0:	4083      	lsls	r3, r0
 80042c2:	6822      	ldr	r2, [r4, #0]
 80042c4:	3501      	adds	r5, #1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	7829      	ldrb	r1, [r5, #0]
 80042cc:	2206      	movs	r2, #6
 80042ce:	4828      	ldr	r0, [pc, #160]	; (8004370 <_svfiprintf_r+0x1f0>)
 80042d0:	1c6e      	adds	r6, r5, #1
 80042d2:	7621      	strb	r1, [r4, #24]
 80042d4:	f000 f9c8 	bl	8004668 <memchr>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d03c      	beq.n	8004356 <_svfiprintf_r+0x1d6>
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <_svfiprintf_r+0x1f4>)
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d125      	bne.n	800432e <_svfiprintf_r+0x1ae>
 80042e2:	2207      	movs	r2, #7
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	3307      	adds	r3, #7
 80042e8:	4393      	bics	r3, r2
 80042ea:	3308      	adds	r3, #8
 80042ec:	9307      	str	r3, [sp, #28]
 80042ee:	6963      	ldr	r3, [r4, #20]
 80042f0:	9a04      	ldr	r2, [sp, #16]
 80042f2:	189b      	adds	r3, r3, r2
 80042f4:	6163      	str	r3, [r4, #20]
 80042f6:	e766      	b.n	80041c6 <_svfiprintf_r+0x46>
 80042f8:	4343      	muls	r3, r0
 80042fa:	2101      	movs	r1, #1
 80042fc:	189b      	adds	r3, r3, r2
 80042fe:	0035      	movs	r5, r6
 8004300:	e7a6      	b.n	8004250 <_svfiprintf_r+0xd0>
 8004302:	2301      	movs	r3, #1
 8004304:	425b      	negs	r3, r3
 8004306:	e7d0      	b.n	80042aa <_svfiprintf_r+0x12a>
 8004308:	2300      	movs	r3, #0
 800430a:	200a      	movs	r0, #10
 800430c:	001a      	movs	r2, r3
 800430e:	3501      	adds	r5, #1
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	7829      	ldrb	r1, [r5, #0]
 8004314:	1c6e      	adds	r6, r5, #1
 8004316:	3930      	subs	r1, #48	; 0x30
 8004318:	2909      	cmp	r1, #9
 800431a:	d903      	bls.n	8004324 <_svfiprintf_r+0x1a4>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0c5      	beq.n	80042ac <_svfiprintf_r+0x12c>
 8004320:	9209      	str	r2, [sp, #36]	; 0x24
 8004322:	e7c3      	b.n	80042ac <_svfiprintf_r+0x12c>
 8004324:	4342      	muls	r2, r0
 8004326:	2301      	movs	r3, #1
 8004328:	1852      	adds	r2, r2, r1
 800432a:	0035      	movs	r5, r6
 800432c:	e7f1      	b.n	8004312 <_svfiprintf_r+0x192>
 800432e:	ab07      	add	r3, sp, #28
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	003a      	movs	r2, r7
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <_svfiprintf_r+0x1f8>)
 8004336:	0021      	movs	r1, r4
 8004338:	9803      	ldr	r0, [sp, #12]
 800433a:	e000      	b.n	800433e <_svfiprintf_r+0x1be>
 800433c:	bf00      	nop
 800433e:	9004      	str	r0, [sp, #16]
 8004340:	9b04      	ldr	r3, [sp, #16]
 8004342:	3301      	adds	r3, #1
 8004344:	d1d3      	bne.n	80042ee <_svfiprintf_r+0x16e>
 8004346:	89bb      	ldrh	r3, [r7, #12]
 8004348:	980d      	ldr	r0, [sp, #52]	; 0x34
 800434a:	065b      	lsls	r3, r3, #25
 800434c:	d400      	bmi.n	8004350 <_svfiprintf_r+0x1d0>
 800434e:	e72e      	b.n	80041ae <_svfiprintf_r+0x2e>
 8004350:	2001      	movs	r0, #1
 8004352:	4240      	negs	r0, r0
 8004354:	e72b      	b.n	80041ae <_svfiprintf_r+0x2e>
 8004356:	ab07      	add	r3, sp, #28
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	003a      	movs	r2, r7
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <_svfiprintf_r+0x1f8>)
 800435e:	0021      	movs	r1, r4
 8004360:	9803      	ldr	r0, [sp, #12]
 8004362:	f000 f879 	bl	8004458 <_printf_i>
 8004366:	e7ea      	b.n	800433e <_svfiprintf_r+0x1be>
 8004368:	08004a00 	.word	0x08004a00
 800436c:	08004a06 	.word	0x08004a06
 8004370:	08004a0a 	.word	0x08004a0a
 8004374:	00000000 	.word	0x00000000
 8004378:	080040bd 	.word	0x080040bd

0800437c <_printf_common>:
 800437c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800437e:	0015      	movs	r5, r2
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	688a      	ldr	r2, [r1, #8]
 8004384:	690b      	ldr	r3, [r1, #16]
 8004386:	9000      	str	r0, [sp, #0]
 8004388:	000c      	movs	r4, r1
 800438a:	4293      	cmp	r3, r2
 800438c:	da00      	bge.n	8004390 <_printf_common+0x14>
 800438e:	0013      	movs	r3, r2
 8004390:	0022      	movs	r2, r4
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	3243      	adds	r2, #67	; 0x43
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	2a00      	cmp	r2, #0
 800439a:	d001      	beq.n	80043a0 <_printf_common+0x24>
 800439c:	3301      	adds	r3, #1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	069b      	lsls	r3, r3, #26
 80043a4:	d502      	bpl.n	80043ac <_printf_common+0x30>
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	3302      	adds	r3, #2
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	2706      	movs	r7, #6
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	401f      	ands	r7, r3
 80043b2:	d027      	beq.n	8004404 <_printf_common+0x88>
 80043b4:	0023      	movs	r3, r4
 80043b6:	3343      	adds	r3, #67	; 0x43
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	1e5a      	subs	r2, r3, #1
 80043bc:	4193      	sbcs	r3, r2
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	0692      	lsls	r2, r2, #26
 80043c2:	d430      	bmi.n	8004426 <_printf_common+0xaa>
 80043c4:	0022      	movs	r2, r4
 80043c6:	9901      	ldr	r1, [sp, #4]
 80043c8:	3243      	adds	r2, #67	; 0x43
 80043ca:	9800      	ldr	r0, [sp, #0]
 80043cc:	9e08      	ldr	r6, [sp, #32]
 80043ce:	47b0      	blx	r6
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d025      	beq.n	8004420 <_printf_common+0xa4>
 80043d4:	2306      	movs	r3, #6
 80043d6:	6820      	ldr	r0, [r4, #0]
 80043d8:	682a      	ldr	r2, [r5, #0]
 80043da:	68e1      	ldr	r1, [r4, #12]
 80043dc:	4003      	ands	r3, r0
 80043de:	2500      	movs	r5, #0
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d103      	bne.n	80043ec <_printf_common+0x70>
 80043e4:	1a8d      	subs	r5, r1, r2
 80043e6:	43eb      	mvns	r3, r5
 80043e8:	17db      	asrs	r3, r3, #31
 80043ea:	401d      	ands	r5, r3
 80043ec:	68a3      	ldr	r3, [r4, #8]
 80043ee:	6922      	ldr	r2, [r4, #16]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	dd01      	ble.n	80043f8 <_printf_common+0x7c>
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	18ed      	adds	r5, r5, r3
 80043f8:	2700      	movs	r7, #0
 80043fa:	42bd      	cmp	r5, r7
 80043fc:	d120      	bne.n	8004440 <_printf_common+0xc4>
 80043fe:	2000      	movs	r0, #0
 8004400:	e010      	b.n	8004424 <_printf_common+0xa8>
 8004402:	3701      	adds	r7, #1
 8004404:	68e3      	ldr	r3, [r4, #12]
 8004406:	682a      	ldr	r2, [r5, #0]
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	42bb      	cmp	r3, r7
 800440c:	ddd2      	ble.n	80043b4 <_printf_common+0x38>
 800440e:	0022      	movs	r2, r4
 8004410:	2301      	movs	r3, #1
 8004412:	3219      	adds	r2, #25
 8004414:	9901      	ldr	r1, [sp, #4]
 8004416:	9800      	ldr	r0, [sp, #0]
 8004418:	9e08      	ldr	r6, [sp, #32]
 800441a:	47b0      	blx	r6
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d1f0      	bne.n	8004402 <_printf_common+0x86>
 8004420:	2001      	movs	r0, #1
 8004422:	4240      	negs	r0, r0
 8004424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004426:	2030      	movs	r0, #48	; 0x30
 8004428:	18e1      	adds	r1, r4, r3
 800442a:	3143      	adds	r1, #67	; 0x43
 800442c:	7008      	strb	r0, [r1, #0]
 800442e:	0021      	movs	r1, r4
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	3145      	adds	r1, #69	; 0x45
 8004434:	7809      	ldrb	r1, [r1, #0]
 8004436:	18a2      	adds	r2, r4, r2
 8004438:	3243      	adds	r2, #67	; 0x43
 800443a:	3302      	adds	r3, #2
 800443c:	7011      	strb	r1, [r2, #0]
 800443e:	e7c1      	b.n	80043c4 <_printf_common+0x48>
 8004440:	0022      	movs	r2, r4
 8004442:	2301      	movs	r3, #1
 8004444:	321a      	adds	r2, #26
 8004446:	9901      	ldr	r1, [sp, #4]
 8004448:	9800      	ldr	r0, [sp, #0]
 800444a:	9e08      	ldr	r6, [sp, #32]
 800444c:	47b0      	blx	r6
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	d0e6      	beq.n	8004420 <_printf_common+0xa4>
 8004452:	3701      	adds	r7, #1
 8004454:	e7d1      	b.n	80043fa <_printf_common+0x7e>
	...

08004458 <_printf_i>:
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	9204      	str	r2, [sp, #16]
 800445e:	000a      	movs	r2, r1
 8004460:	3243      	adds	r2, #67	; 0x43
 8004462:	9305      	str	r3, [sp, #20]
 8004464:	9003      	str	r0, [sp, #12]
 8004466:	9202      	str	r2, [sp, #8]
 8004468:	7e0a      	ldrb	r2, [r1, #24]
 800446a:	000c      	movs	r4, r1
 800446c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800446e:	2a6e      	cmp	r2, #110	; 0x6e
 8004470:	d100      	bne.n	8004474 <_printf_i+0x1c>
 8004472:	e086      	b.n	8004582 <_printf_i+0x12a>
 8004474:	d81f      	bhi.n	80044b6 <_printf_i+0x5e>
 8004476:	2a63      	cmp	r2, #99	; 0x63
 8004478:	d033      	beq.n	80044e2 <_printf_i+0x8a>
 800447a:	d808      	bhi.n	800448e <_printf_i+0x36>
 800447c:	2a00      	cmp	r2, #0
 800447e:	d100      	bne.n	8004482 <_printf_i+0x2a>
 8004480:	e08c      	b.n	800459c <_printf_i+0x144>
 8004482:	2a58      	cmp	r2, #88	; 0x58
 8004484:	d04d      	beq.n	8004522 <_printf_i+0xca>
 8004486:	0025      	movs	r5, r4
 8004488:	3542      	adds	r5, #66	; 0x42
 800448a:	702a      	strb	r2, [r5, #0]
 800448c:	e030      	b.n	80044f0 <_printf_i+0x98>
 800448e:	2a64      	cmp	r2, #100	; 0x64
 8004490:	d001      	beq.n	8004496 <_printf_i+0x3e>
 8004492:	2a69      	cmp	r2, #105	; 0x69
 8004494:	d1f7      	bne.n	8004486 <_printf_i+0x2e>
 8004496:	6819      	ldr	r1, [r3, #0]
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	1d0a      	adds	r2, r1, #4
 800449c:	0628      	lsls	r0, r5, #24
 800449e:	d529      	bpl.n	80044f4 <_printf_i+0x9c>
 80044a0:	6808      	ldr	r0, [r1, #0]
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	2800      	cmp	r0, #0
 80044a6:	da03      	bge.n	80044b0 <_printf_i+0x58>
 80044a8:	232d      	movs	r3, #45	; 0x2d
 80044aa:	9a02      	ldr	r2, [sp, #8]
 80044ac:	4240      	negs	r0, r0
 80044ae:	7013      	strb	r3, [r2, #0]
 80044b0:	4e6b      	ldr	r6, [pc, #428]	; (8004660 <_printf_i+0x208>)
 80044b2:	270a      	movs	r7, #10
 80044b4:	e04f      	b.n	8004556 <_printf_i+0xfe>
 80044b6:	2a73      	cmp	r2, #115	; 0x73
 80044b8:	d074      	beq.n	80045a4 <_printf_i+0x14c>
 80044ba:	d808      	bhi.n	80044ce <_printf_i+0x76>
 80044bc:	2a6f      	cmp	r2, #111	; 0x6f
 80044be:	d01f      	beq.n	8004500 <_printf_i+0xa8>
 80044c0:	2a70      	cmp	r2, #112	; 0x70
 80044c2:	d1e0      	bne.n	8004486 <_printf_i+0x2e>
 80044c4:	2220      	movs	r2, #32
 80044c6:	6809      	ldr	r1, [r1, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	6022      	str	r2, [r4, #0]
 80044cc:	e003      	b.n	80044d6 <_printf_i+0x7e>
 80044ce:	2a75      	cmp	r2, #117	; 0x75
 80044d0:	d016      	beq.n	8004500 <_printf_i+0xa8>
 80044d2:	2a78      	cmp	r2, #120	; 0x78
 80044d4:	d1d7      	bne.n	8004486 <_printf_i+0x2e>
 80044d6:	0022      	movs	r2, r4
 80044d8:	2178      	movs	r1, #120	; 0x78
 80044da:	3245      	adds	r2, #69	; 0x45
 80044dc:	7011      	strb	r1, [r2, #0]
 80044de:	4e61      	ldr	r6, [pc, #388]	; (8004664 <_printf_i+0x20c>)
 80044e0:	e022      	b.n	8004528 <_printf_i+0xd0>
 80044e2:	0025      	movs	r5, r4
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	3542      	adds	r5, #66	; 0x42
 80044e8:	1d11      	adds	r1, r2, #4
 80044ea:	6019      	str	r1, [r3, #0]
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	702b      	strb	r3, [r5, #0]
 80044f0:	2301      	movs	r3, #1
 80044f2:	e065      	b.n	80045c0 <_printf_i+0x168>
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	0669      	lsls	r1, r5, #25
 80044fa:	d5d3      	bpl.n	80044a4 <_printf_i+0x4c>
 80044fc:	b200      	sxth	r0, r0
 80044fe:	e7d1      	b.n	80044a4 <_printf_i+0x4c>
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	1d08      	adds	r0, r1, #4
 8004506:	6018      	str	r0, [r3, #0]
 8004508:	6808      	ldr	r0, [r1, #0]
 800450a:	062e      	lsls	r6, r5, #24
 800450c:	d505      	bpl.n	800451a <_printf_i+0xc2>
 800450e:	4e54      	ldr	r6, [pc, #336]	; (8004660 <_printf_i+0x208>)
 8004510:	2708      	movs	r7, #8
 8004512:	2a6f      	cmp	r2, #111	; 0x6f
 8004514:	d01b      	beq.n	800454e <_printf_i+0xf6>
 8004516:	270a      	movs	r7, #10
 8004518:	e019      	b.n	800454e <_printf_i+0xf6>
 800451a:	066d      	lsls	r5, r5, #25
 800451c:	d5f7      	bpl.n	800450e <_printf_i+0xb6>
 800451e:	b280      	uxth	r0, r0
 8004520:	e7f5      	b.n	800450e <_printf_i+0xb6>
 8004522:	3145      	adds	r1, #69	; 0x45
 8004524:	4e4e      	ldr	r6, [pc, #312]	; (8004660 <_printf_i+0x208>)
 8004526:	700a      	strb	r2, [r1, #0]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	1d01      	adds	r1, r0, #4
 800452e:	6800      	ldr	r0, [r0, #0]
 8004530:	6019      	str	r1, [r3, #0]
 8004532:	0615      	lsls	r5, r2, #24
 8004534:	d521      	bpl.n	800457a <_printf_i+0x122>
 8004536:	07d3      	lsls	r3, r2, #31
 8004538:	d502      	bpl.n	8004540 <_printf_i+0xe8>
 800453a:	2320      	movs	r3, #32
 800453c:	431a      	orrs	r2, r3
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	2710      	movs	r7, #16
 8004542:	2800      	cmp	r0, #0
 8004544:	d103      	bne.n	800454e <_printf_i+0xf6>
 8004546:	2320      	movs	r3, #32
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	439a      	bics	r2, r3
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	0023      	movs	r3, r4
 8004550:	2200      	movs	r2, #0
 8004552:	3343      	adds	r3, #67	; 0x43
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	60a3      	str	r3, [r4, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	db58      	blt.n	8004610 <_printf_i+0x1b8>
 800455e:	2204      	movs	r2, #4
 8004560:	6821      	ldr	r1, [r4, #0]
 8004562:	4391      	bics	r1, r2
 8004564:	6021      	str	r1, [r4, #0]
 8004566:	2800      	cmp	r0, #0
 8004568:	d154      	bne.n	8004614 <_printf_i+0x1bc>
 800456a:	9d02      	ldr	r5, [sp, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05a      	beq.n	8004626 <_printf_i+0x1ce>
 8004570:	0025      	movs	r5, r4
 8004572:	7833      	ldrb	r3, [r6, #0]
 8004574:	3542      	adds	r5, #66	; 0x42
 8004576:	702b      	strb	r3, [r5, #0]
 8004578:	e055      	b.n	8004626 <_printf_i+0x1ce>
 800457a:	0655      	lsls	r5, r2, #25
 800457c:	d5db      	bpl.n	8004536 <_printf_i+0xde>
 800457e:	b280      	uxth	r0, r0
 8004580:	e7d9      	b.n	8004536 <_printf_i+0xde>
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	680d      	ldr	r5, [r1, #0]
 8004586:	1d10      	adds	r0, r2, #4
 8004588:	6949      	ldr	r1, [r1, #20]
 800458a:	6018      	str	r0, [r3, #0]
 800458c:	6813      	ldr	r3, [r2, #0]
 800458e:	062e      	lsls	r6, r5, #24
 8004590:	d501      	bpl.n	8004596 <_printf_i+0x13e>
 8004592:	6019      	str	r1, [r3, #0]
 8004594:	e002      	b.n	800459c <_printf_i+0x144>
 8004596:	066d      	lsls	r5, r5, #25
 8004598:	d5fb      	bpl.n	8004592 <_printf_i+0x13a>
 800459a:	8019      	strh	r1, [r3, #0]
 800459c:	2300      	movs	r3, #0
 800459e:	9d02      	ldr	r5, [sp, #8]
 80045a0:	6123      	str	r3, [r4, #16]
 80045a2:	e04f      	b.n	8004644 <_printf_i+0x1ec>
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	1d11      	adds	r1, r2, #4
 80045a8:	6019      	str	r1, [r3, #0]
 80045aa:	6815      	ldr	r5, [r2, #0]
 80045ac:	2100      	movs	r1, #0
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	0028      	movs	r0, r5
 80045b2:	f000 f859 	bl	8004668 <memchr>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d001      	beq.n	80045be <_printf_i+0x166>
 80045ba:	1b40      	subs	r0, r0, r5
 80045bc:	6060      	str	r0, [r4, #4]
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	6123      	str	r3, [r4, #16]
 80045c2:	2300      	movs	r3, #0
 80045c4:	9a02      	ldr	r2, [sp, #8]
 80045c6:	7013      	strb	r3, [r2, #0]
 80045c8:	e03c      	b.n	8004644 <_printf_i+0x1ec>
 80045ca:	6923      	ldr	r3, [r4, #16]
 80045cc:	002a      	movs	r2, r5
 80045ce:	9904      	ldr	r1, [sp, #16]
 80045d0:	9803      	ldr	r0, [sp, #12]
 80045d2:	9d05      	ldr	r5, [sp, #20]
 80045d4:	47a8      	blx	r5
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d03e      	beq.n	8004658 <_printf_i+0x200>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	079b      	lsls	r3, r3, #30
 80045de:	d415      	bmi.n	800460c <_printf_i+0x1b4>
 80045e0:	9b07      	ldr	r3, [sp, #28]
 80045e2:	68e0      	ldr	r0, [r4, #12]
 80045e4:	4298      	cmp	r0, r3
 80045e6:	da39      	bge.n	800465c <_printf_i+0x204>
 80045e8:	0018      	movs	r0, r3
 80045ea:	e037      	b.n	800465c <_printf_i+0x204>
 80045ec:	0022      	movs	r2, r4
 80045ee:	2301      	movs	r3, #1
 80045f0:	3219      	adds	r2, #25
 80045f2:	9904      	ldr	r1, [sp, #16]
 80045f4:	9803      	ldr	r0, [sp, #12]
 80045f6:	9e05      	ldr	r6, [sp, #20]
 80045f8:	47b0      	blx	r6
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	d02c      	beq.n	8004658 <_printf_i+0x200>
 80045fe:	3501      	adds	r5, #1
 8004600:	68e3      	ldr	r3, [r4, #12]
 8004602:	9a07      	ldr	r2, [sp, #28]
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	42ab      	cmp	r3, r5
 8004608:	dcf0      	bgt.n	80045ec <_printf_i+0x194>
 800460a:	e7e9      	b.n	80045e0 <_printf_i+0x188>
 800460c:	2500      	movs	r5, #0
 800460e:	e7f7      	b.n	8004600 <_printf_i+0x1a8>
 8004610:	2800      	cmp	r0, #0
 8004612:	d0ad      	beq.n	8004570 <_printf_i+0x118>
 8004614:	9d02      	ldr	r5, [sp, #8]
 8004616:	0039      	movs	r1, r7
 8004618:	f7fb fdfc 	bl	8000214 <__aeabi_uidivmod>
 800461c:	5c73      	ldrb	r3, [r6, r1]
 800461e:	3d01      	subs	r5, #1
 8004620:	702b      	strb	r3, [r5, #0]
 8004622:	2800      	cmp	r0, #0
 8004624:	d1f7      	bne.n	8004616 <_printf_i+0x1be>
 8004626:	2f08      	cmp	r7, #8
 8004628:	d109      	bne.n	800463e <_printf_i+0x1e6>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	07db      	lsls	r3, r3, #31
 800462e:	d506      	bpl.n	800463e <_printf_i+0x1e6>
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	6922      	ldr	r2, [r4, #16]
 8004634:	4293      	cmp	r3, r2
 8004636:	dc02      	bgt.n	800463e <_printf_i+0x1e6>
 8004638:	2330      	movs	r3, #48	; 0x30
 800463a:	3d01      	subs	r5, #1
 800463c:	702b      	strb	r3, [r5, #0]
 800463e:	9b02      	ldr	r3, [sp, #8]
 8004640:	1b5b      	subs	r3, r3, r5
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	9b05      	ldr	r3, [sp, #20]
 8004646:	aa07      	add	r2, sp, #28
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	0021      	movs	r1, r4
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	9803      	ldr	r0, [sp, #12]
 8004650:	f7ff fe94 	bl	800437c <_printf_common>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d1b8      	bne.n	80045ca <_printf_i+0x172>
 8004658:	2001      	movs	r0, #1
 800465a:	4240      	negs	r0, r0
 800465c:	b009      	add	sp, #36	; 0x24
 800465e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004660:	08004a11 	.word	0x08004a11
 8004664:	08004a22 	.word	0x08004a22

08004668 <memchr>:
 8004668:	b2c9      	uxtb	r1, r1
 800466a:	1882      	adds	r2, r0, r2
 800466c:	4290      	cmp	r0, r2
 800466e:	d101      	bne.n	8004674 <memchr+0xc>
 8004670:	2000      	movs	r0, #0
 8004672:	4770      	bx	lr
 8004674:	7803      	ldrb	r3, [r0, #0]
 8004676:	428b      	cmp	r3, r1
 8004678:	d0fb      	beq.n	8004672 <memchr+0xa>
 800467a:	3001      	adds	r0, #1
 800467c:	e7f6      	b.n	800466c <memchr+0x4>

0800467e <memcpy>:
 800467e:	2300      	movs	r3, #0
 8004680:	b510      	push	{r4, lr}
 8004682:	429a      	cmp	r2, r3
 8004684:	d100      	bne.n	8004688 <memcpy+0xa>
 8004686:	bd10      	pop	{r4, pc}
 8004688:	5ccc      	ldrb	r4, [r1, r3]
 800468a:	54c4      	strb	r4, [r0, r3]
 800468c:	3301      	adds	r3, #1
 800468e:	e7f8      	b.n	8004682 <memcpy+0x4>

08004690 <memmove>:
 8004690:	b510      	push	{r4, lr}
 8004692:	4288      	cmp	r0, r1
 8004694:	d902      	bls.n	800469c <memmove+0xc>
 8004696:	188b      	adds	r3, r1, r2
 8004698:	4298      	cmp	r0, r3
 800469a:	d303      	bcc.n	80046a4 <memmove+0x14>
 800469c:	2300      	movs	r3, #0
 800469e:	e007      	b.n	80046b0 <memmove+0x20>
 80046a0:	5c8b      	ldrb	r3, [r1, r2]
 80046a2:	5483      	strb	r3, [r0, r2]
 80046a4:	3a01      	subs	r2, #1
 80046a6:	d2fb      	bcs.n	80046a0 <memmove+0x10>
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	5ccc      	ldrb	r4, [r1, r3]
 80046ac:	54c4      	strb	r4, [r0, r3]
 80046ae:	3301      	adds	r3, #1
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1fa      	bne.n	80046aa <memmove+0x1a>
 80046b4:	e7f8      	b.n	80046a8 <memmove+0x18>
	...

080046b8 <_free_r>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	0005      	movs	r5, r0
 80046bc:	2900      	cmp	r1, #0
 80046be:	d010      	beq.n	80046e2 <_free_r+0x2a>
 80046c0:	1f0c      	subs	r4, r1, #4
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da00      	bge.n	80046ca <_free_r+0x12>
 80046c8:	18e4      	adds	r4, r4, r3
 80046ca:	0028      	movs	r0, r5
 80046cc:	f000 f8d4 	bl	8004878 <__malloc_lock>
 80046d0:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <_free_r+0x90>)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <_free_r+0x2c>
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	6014      	str	r4, [r2, #0]
 80046dc:	0028      	movs	r0, r5
 80046de:	f000 f8cc 	bl	800487a <__malloc_unlock>
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	d909      	bls.n	80046fc <_free_r+0x44>
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	1860      	adds	r0, r4, r1
 80046ec:	4283      	cmp	r3, r0
 80046ee:	d1f3      	bne.n	80046d8 <_free_r+0x20>
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	1841      	adds	r1, r0, r1
 80046f6:	6021      	str	r1, [r4, #0]
 80046f8:	e7ee      	b.n	80046d8 <_free_r+0x20>
 80046fa:	0013      	movs	r3, r2
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	2a00      	cmp	r2, #0
 8004700:	d001      	beq.n	8004706 <_free_r+0x4e>
 8004702:	42a2      	cmp	r2, r4
 8004704:	d9f9      	bls.n	80046fa <_free_r+0x42>
 8004706:	6819      	ldr	r1, [r3, #0]
 8004708:	1858      	adds	r0, r3, r1
 800470a:	42a0      	cmp	r0, r4
 800470c:	d10b      	bne.n	8004726 <_free_r+0x6e>
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	1809      	adds	r1, r1, r0
 8004712:	1858      	adds	r0, r3, r1
 8004714:	6019      	str	r1, [r3, #0]
 8004716:	4282      	cmp	r2, r0
 8004718:	d1e0      	bne.n	80046dc <_free_r+0x24>
 800471a:	6810      	ldr	r0, [r2, #0]
 800471c:	6852      	ldr	r2, [r2, #4]
 800471e:	1841      	adds	r1, r0, r1
 8004720:	6019      	str	r1, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	e7da      	b.n	80046dc <_free_r+0x24>
 8004726:	42a0      	cmp	r0, r4
 8004728:	d902      	bls.n	8004730 <_free_r+0x78>
 800472a:	230c      	movs	r3, #12
 800472c:	602b      	str	r3, [r5, #0]
 800472e:	e7d5      	b.n	80046dc <_free_r+0x24>
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	1860      	adds	r0, r4, r1
 8004734:	4282      	cmp	r2, r0
 8004736:	d103      	bne.n	8004740 <_free_r+0x88>
 8004738:	6810      	ldr	r0, [r2, #0]
 800473a:	6852      	ldr	r2, [r2, #4]
 800473c:	1841      	adds	r1, r0, r1
 800473e:	6021      	str	r1, [r4, #0]
 8004740:	6062      	str	r2, [r4, #4]
 8004742:	605c      	str	r4, [r3, #4]
 8004744:	e7ca      	b.n	80046dc <_free_r+0x24>
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	200000b0 	.word	0x200000b0

0800474c <_malloc_r>:
 800474c:	2303      	movs	r3, #3
 800474e:	b570      	push	{r4, r5, r6, lr}
 8004750:	1ccd      	adds	r5, r1, #3
 8004752:	439d      	bics	r5, r3
 8004754:	3508      	adds	r5, #8
 8004756:	0006      	movs	r6, r0
 8004758:	2d0c      	cmp	r5, #12
 800475a:	d21e      	bcs.n	800479a <_malloc_r+0x4e>
 800475c:	250c      	movs	r5, #12
 800475e:	42a9      	cmp	r1, r5
 8004760:	d81d      	bhi.n	800479e <_malloc_r+0x52>
 8004762:	0030      	movs	r0, r6
 8004764:	f000 f888 	bl	8004878 <__malloc_lock>
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <_malloc_r+0xb4>)
 800476a:	6814      	ldr	r4, [r2, #0]
 800476c:	0021      	movs	r1, r4
 800476e:	2900      	cmp	r1, #0
 8004770:	d119      	bne.n	80047a6 <_malloc_r+0x5a>
 8004772:	4c24      	ldr	r4, [pc, #144]	; (8004804 <_malloc_r+0xb8>)
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <_malloc_r+0x36>
 800477a:	0030      	movs	r0, r6
 800477c:	f000 f86a 	bl	8004854 <_sbrk_r>
 8004780:	6020      	str	r0, [r4, #0]
 8004782:	0029      	movs	r1, r5
 8004784:	0030      	movs	r0, r6
 8004786:	f000 f865 	bl	8004854 <_sbrk_r>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	d12b      	bne.n	80047e6 <_malloc_r+0x9a>
 800478e:	230c      	movs	r3, #12
 8004790:	0030      	movs	r0, r6
 8004792:	6033      	str	r3, [r6, #0]
 8004794:	f000 f871 	bl	800487a <__malloc_unlock>
 8004798:	e003      	b.n	80047a2 <_malloc_r+0x56>
 800479a:	2d00      	cmp	r5, #0
 800479c:	dadf      	bge.n	800475e <_malloc_r+0x12>
 800479e:	230c      	movs	r3, #12
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	2000      	movs	r0, #0
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
 80047a6:	680b      	ldr	r3, [r1, #0]
 80047a8:	1b5b      	subs	r3, r3, r5
 80047aa:	d419      	bmi.n	80047e0 <_malloc_r+0x94>
 80047ac:	2b0b      	cmp	r3, #11
 80047ae:	d903      	bls.n	80047b8 <_malloc_r+0x6c>
 80047b0:	600b      	str	r3, [r1, #0]
 80047b2:	18cc      	adds	r4, r1, r3
 80047b4:	6025      	str	r5, [r4, #0]
 80047b6:	e003      	b.n	80047c0 <_malloc_r+0x74>
 80047b8:	684b      	ldr	r3, [r1, #4]
 80047ba:	428c      	cmp	r4, r1
 80047bc:	d10d      	bne.n	80047da <_malloc_r+0x8e>
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	0030      	movs	r0, r6
 80047c2:	f000 f85a 	bl	800487a <__malloc_unlock>
 80047c6:	0020      	movs	r0, r4
 80047c8:	2207      	movs	r2, #7
 80047ca:	300b      	adds	r0, #11
 80047cc:	1d23      	adds	r3, r4, #4
 80047ce:	4390      	bics	r0, r2
 80047d0:	1ac3      	subs	r3, r0, r3
 80047d2:	d0e7      	beq.n	80047a4 <_malloc_r+0x58>
 80047d4:	425a      	negs	r2, r3
 80047d6:	50e2      	str	r2, [r4, r3]
 80047d8:	e7e4      	b.n	80047a4 <_malloc_r+0x58>
 80047da:	6063      	str	r3, [r4, #4]
 80047dc:	000c      	movs	r4, r1
 80047de:	e7ef      	b.n	80047c0 <_malloc_r+0x74>
 80047e0:	000c      	movs	r4, r1
 80047e2:	6849      	ldr	r1, [r1, #4]
 80047e4:	e7c3      	b.n	800476e <_malloc_r+0x22>
 80047e6:	2303      	movs	r3, #3
 80047e8:	1cc4      	adds	r4, r0, #3
 80047ea:	439c      	bics	r4, r3
 80047ec:	42a0      	cmp	r0, r4
 80047ee:	d0e1      	beq.n	80047b4 <_malloc_r+0x68>
 80047f0:	1a21      	subs	r1, r4, r0
 80047f2:	0030      	movs	r0, r6
 80047f4:	f000 f82e 	bl	8004854 <_sbrk_r>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d1db      	bne.n	80047b4 <_malloc_r+0x68>
 80047fc:	e7c7      	b.n	800478e <_malloc_r+0x42>
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	200000b0 	.word	0x200000b0
 8004804:	200000b4 	.word	0x200000b4

08004808 <_realloc_r>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	0007      	movs	r7, r0
 800480c:	000d      	movs	r5, r1
 800480e:	0016      	movs	r6, r2
 8004810:	2900      	cmp	r1, #0
 8004812:	d105      	bne.n	8004820 <_realloc_r+0x18>
 8004814:	0011      	movs	r1, r2
 8004816:	f7ff ff99 	bl	800474c <_malloc_r>
 800481a:	0004      	movs	r4, r0
 800481c:	0020      	movs	r0, r4
 800481e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004820:	2a00      	cmp	r2, #0
 8004822:	d103      	bne.n	800482c <_realloc_r+0x24>
 8004824:	f7ff ff48 	bl	80046b8 <_free_r>
 8004828:	0034      	movs	r4, r6
 800482a:	e7f7      	b.n	800481c <_realloc_r+0x14>
 800482c:	f000 f826 	bl	800487c <_malloc_usable_size_r>
 8004830:	002c      	movs	r4, r5
 8004832:	42b0      	cmp	r0, r6
 8004834:	d2f2      	bcs.n	800481c <_realloc_r+0x14>
 8004836:	0031      	movs	r1, r6
 8004838:	0038      	movs	r0, r7
 800483a:	f7ff ff87 	bl	800474c <_malloc_r>
 800483e:	1e04      	subs	r4, r0, #0
 8004840:	d0ec      	beq.n	800481c <_realloc_r+0x14>
 8004842:	0029      	movs	r1, r5
 8004844:	0032      	movs	r2, r6
 8004846:	f7ff ff1a 	bl	800467e <memcpy>
 800484a:	0029      	movs	r1, r5
 800484c:	0038      	movs	r0, r7
 800484e:	f7ff ff33 	bl	80046b8 <_free_r>
 8004852:	e7e3      	b.n	800481c <_realloc_r+0x14>

08004854 <_sbrk_r>:
 8004854:	2300      	movs	r3, #0
 8004856:	b570      	push	{r4, r5, r6, lr}
 8004858:	4c06      	ldr	r4, [pc, #24]	; (8004874 <_sbrk_r+0x20>)
 800485a:	0005      	movs	r5, r0
 800485c:	0008      	movs	r0, r1
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	f7fc f890 	bl	8000984 <_sbrk>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d103      	bne.n	8004870 <_sbrk_r+0x1c>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d000      	beq.n	8004870 <_sbrk_r+0x1c>
 800486e:	602b      	str	r3, [r5, #0]
 8004870:	bd70      	pop	{r4, r5, r6, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	20000214 	.word	0x20000214

08004878 <__malloc_lock>:
 8004878:	4770      	bx	lr

0800487a <__malloc_unlock>:
 800487a:	4770      	bx	lr

0800487c <_malloc_usable_size_r>:
 800487c:	1f0b      	subs	r3, r1, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1f18      	subs	r0, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	da01      	bge.n	800488a <_malloc_usable_size_r+0xe>
 8004886:	580b      	ldr	r3, [r1, r0]
 8004888:	18c0      	adds	r0, r0, r3
 800488a:	4770      	bx	lr

0800488c <_init>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr

08004898 <_fini>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr
